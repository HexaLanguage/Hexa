// Generated by Hexa
// The Hexa Compiler
// LICENSE LGPL-3.0-only
;(function() {
	"use strict"
	const $global = typeof(window) === "undefined"? global : window
	if (typeof($global.require) === "undefined") { $global.require = function () {} };
	function $toIterator(v) { if (typeof(v) === "number") { v = Math.max(v, 0); const i = new Uint32Array(v); let n = 0; while (n < v) i[n] = n++; return i; } return v; };
	const Fs = require("fs")
	const path = require("path")
	var Token = {
		stringify: (token_2571, param = null) => { {
			const temp_2572 = token_2571;
			switch (temp_2572) {
			case 70: {
				return '@'
			} break;
			
			case 83: {
				return '$'
			} break;
			
			case 78: {
				return '#'
			} break;
			
			case 71: {
				return ']'
			} break;
			
			case 72: {
				return '['
			} break;
			
			case 73: {
				return '}'
			} break;
			
			case 74: {
				return '{'
			} break;
			
			case 76: {
				return ':'
			} break;
			
			case 75: {
				return ','
			} break;
			
			case 123: {
				return '<!--default-->'
			} break;
			
			case 77: {
				return '.'
			} break;
			
			case 0: {
				return '<!--eof-->'
			} break;
			
			case 98: {
				return '...'
			} break;
			
			case 58: {
				return 'as'
			} break;
			
			case 3: {
				return 'break'
			} break;
			
			case 4: {
				return 'case'
			} break;
			
			case 6: {
				return 'catch'
			} break;
			
			case 7: {
				return 'class'
			} break;
			
			case 8: {
				return 'continue'
			} break;
			
			case 9: {
				return 'do'
			} break;
			
			case 10: {
				return 'else'
			} break;
			
			case 11: {
				return 'enum'
			} break;
			
			case 12: {
				return 'extends'
			} break;
			
			case 19: {
				return 'export'
			} break;
			
			case 13: {
				return 'declare'
			} break;
			
			case 14: {
				return 'false'
			} break;
			
			case 15: {
				return 'for'
			} break;
			
			case 16: {
				return 'function'
			} break;
			
			case 5: {
				return 'from'
			} break;
			
			case 17: {
				return 'if'
			} break;
			
			case 18: {
				return 'implements'
			} break;
			
			case 2: {
				return 'import'
			} break;
			
			case 20: {
				return 'in'
			} break;
			
			case 22: {
				return 'interface'
			} break;
			
			case 23: {
				return 'let'
			} break;
			
			case 25: {
				return 'new'
			} break;
			
			case 26: {
				return 'null'
			} break;
			
			case 28: {
				return 'module'
			} break;
			
			case 29: {
				return 'private'
			} break;
			
			case 31: {
				return 'return'
			} break;
			
			case 32: {
				return 'static'
			} break;
			
			case 59: {
				return 'super'
			} break;
			
			case 33: {
				return 'switch'
			} break;
			
			case 34: {
				return 'this'
			} break;
			
			case 35: {
				return 'throw'
			} break;
			
			case 36: {
				return 'true'
			} break;
			
			case 37: {
				return 'try'
			} break;
			
			case 39: {
				return 'using'
			} break;
			
			case 40: {
				return 'var'
			} break;
			
			case 41: {
				return 'while'
			} break;
			
			case 111: {
				return '+'
			} break;
			
			case 112: {
				return '&'
			} break;
			
			case 90: {
				return '=>'
			} break;
			
			case 91: {
				return '='
			} break;
			
			case 92: {
				return '&&'
			} break;
			
			case 93: {
				return '||'
			} break;
			
			case 86: {
				return '--'
			} break;
			
			case 94: {
				return '/'
			} break;
			
			case 95: {
				return '=='
			} break;
			
			case 96: {
				return '>'
			} break;
			
			case 97: {
				return '>='
			} break;
			
			case 87: {
				return '++'
			} break;
			
			case 110: {
				return '\\'
			} break;
			
			case 99: {
				return '<'
			} break;
			
			case 100: {
				return '<='
			} break;
			
			case 101: {
				return '%'
			} break;
			
			case 102: {
				return '*'
			} break;
			
			case 88: {
				return '~'
			} break;
			
			case 89: {
				return '!'
			} break;
			
			case 103: {
				return '!='
			} break;
			
			case 104: {
				return '|'
			} break;
			
			case 105: {
				return '<<'
			} break;
			
			case 106: {
				return '>>'
			} break;
			
			case 107: {
				return '-'
			} break;
			
			case 108: {
				return '>>>'
			} break;
			
			case 109: {
				return '^'
			} break;
			
			case 113: {
				return '?.'
			} break;
			
			case 79: {
				return ')'
			} break;
			
			case 80: {
				return '('
			} break;
			
			case 81: {
				return '?'
			} break;
			
			case 82: {
				return ';'
			} break;
			
			case 1: {
				return '_'
			} break;
			
			case 61: {
				return ((param == null))? ('TitleCase') : param
			} break;
			
			case 64: {
				return ((param == null))? ('string') : ('\'' + (param) + '\'')
			} break;
			
			case 66: {
				return ((param == null))? ('backtick') : ('`' + (param) + '`')
			} break;
			
			case 62: {
				return ((param == null))? ('identifier') : param
			} break;
			
			case 63: {
				return ((param == null))? ('integer') : param
			} break;
			
			case 60: {
				return ((param == null))? ('float') : param
			} break;
			
			case 65: {
				return ('///' + (param) + '')
			} break;
			
			case 57: {
				return 'is'
			} break;
			};
		} },
	}
	var NiceExpression = {
		String: (s_2573)=>[0,s_2573],
		Int: (s_2574)=>[1,s_2574],
		Float: (s_2575)=>[2,s_2575],
		Ident: (s_2576,type_2577)=>[5,s_2576,type_2577],
		This: (me_2578)=>[7,me_2578],
		Dot: (expr_2579,name_2580,result_2581)=>[8,expr_2579,name_2580,result_2581],
		Call: (e_2582,args_2583,result_2584,kind_2585)=>[9,e_2582,args_2583,result_2584,kind_2585],
		New: (e_2586,args_2587)=>[10,e_2586,args_2587],
		Binop: (a_2588,op_2589,b_2590,result_2591)=>[11,a_2588,op_2589,b_2590,result_2591],
		Function: (name_2592,expr_2593,args_2594,defaults_2595,funcType_2596)=>[12,name_2592,expr_2593,args_2594,defaults_2595,funcType_2596],
		Arrow: (expr_2597,args_2598,defaults_2599,types_2600,returns_2601)=>[13,expr_2597,args_2598,defaults_2599,types_2600,returns_2601],
		Parenthesis: (inner_2602)=>[14,inner_2602],
		Object: (names_2603,el_2604,types_2605)=>[15,names_2603,el_2604,types_2605],
		Array: (values_2606,valueType_2607)=>[16,values_2606,valueType_2607],
		Map: (keys_2608,values_2609,keyType,valueType_2610)=>[17,keys_2608,values_2609,keyType,valueType_2610],
		Unop: (op_2611,postfix_2612,e_2613)=>[18,op_2611,postfix_2612,e_2613],
		Elvis: (nullable_2614,othewise_2615)=>[19,nullable_2614,othewise_2615],
		If: (econd_2616,eif_2617,eelse_2618)=>[20,econd_2616,eif_2617,eelse_2618],
		Index: (expr_2619,index_2620)=>[21,expr_2619,index_2620],
		UnsafeBitCast: (expr_2621,to_2622)=>[22,expr_2621,to_2622],
		Is: (expr_2623,of)=>[23,expr_2623,of],
		Assignop: (name_2624,op_2625,value_2626)=>[24,name_2624,op_2625,value_2626],
		NativeOperator: (kind_2627,args_2628,name_2629)=>[25,kind_2627,args_2628,name_2629],
		EnumTag: (expr_2630)=>[26,expr_2630],
		Enum: (type_2631,tagName_2632,tag_2633,args_2634)=>[27,type_2631,tagName_2632,tag_2633,args_2634],
		EnumParameter: (expr_2635,index_2636)=>[28,expr_2635,index_2636],
	}
	Object.defineProperty(NiceExpression, "True", { get: function() { return [3] }})
	Object.defineProperty(NiceExpression, "False", { get: function() { return [4] }})
	Object.defineProperty(NiceExpression, "Null", { get: function() { return [6] }})
	Object.defineProperty(NiceExpression, "Underscore", { get: function() { return [29] }})
	var NiceStatement = {
		Statements: (el_2637)=>[0,el_2637],
		Block: (el_2638)=>[1,el_2638],
		Call: (e_2639,args_2640,expects_2641,kind_2642)=>[2,e_2639,args_2640,expects_2641,kind_2642],
		New: (e_2643,args_2644)=>[3,e_2643,args_2644],
		UnusedExpression: (e_2645)=>[4,e_2645],
		Var: (name_2646,expr_2647,type_2648)=>[5,name_2646,expr_2647,type_2648],
		Const: (name_2649,expr_2650,type_2651)=>[6,name_2649,expr_2650,type_2651],
		Function: (name_2652,expr_2653,args_2654,defaults_2655,funcType_2656)=>[7,name_2652,expr_2653,args_2654,defaults_2655,funcType_2656],
		Return: (e_2657)=>[8,e_2657],
		If: (econd_2658,eif_2659,eelse_2660)=>[9,econd_2658,eif_2659,eelse_2660],
		Try: (expr_2661,t_2662,v_2663,catches_2664,temp_2665)=>[10,expr_2661,t_2662,v_2663,catches_2664,temp_2665],
		Throw: (value_2666)=>[11,value_2666],
		Assign: (name_2667,value_2668,to_2669)=>[12,name_2667,value_2668,to_2669],
		Assignop: (name_2670,op_2671,value_2672)=>[13,name_2670,op_2671,value_2672],
		Dot: (expr_2673,name_2674)=>[14,expr_2673,name_2674],
		For: (name_2675,over_2676,by_2677)=>[15,name_2675,over_2676,by_2677],
		While: (econd_2678,e_2679,pre_2680)=>[16,econd_2678,e_2679,pre_2680],
		Increment: (e_2681)=>[17,e_2681],
		Decrement: (e_2682)=>[18,e_2682],
		Switch: (expr_2683,cases_2684,statements_2685)=>[19,expr_2683,cases_2684,statements_2685],
		SuperConstructor: (args_2686)=>[22,args_2686],
	}
	Object.defineProperty(NiceStatement, "Continue", { get: function() { return [20] }})
	Object.defineProperty(NiceStatement, "Break", { get: function() { return [21] }})
	var NodeType = {
		stringify: (nodeType_2697) => { return DataHelper.extractTypeName(nodeType_2697) },
		Optional: (type_2687)=>[0,type_2687],
		Type: (name_2688)=>[1,name_2688],
		ParametricType: (name_2689,params_2690)=>[2,name_2689,params_2690],
		Function: (args_2691,ret_2692)=>[3,args_2691,ret_2692],
		FunctionArg: (name_2693,type_2694,defaultValue)=>[4,name_2693,type_2694,defaultValue],
		Object: (names_2695,types_2696)=>[5,names_2695,types_2696],
	}
	var Node = {
		stringify: (node_2836) => { {
			const temp_2837 = node_2836;
			switch (temp_2837&&temp_2837[0]) {
			case 0: {
				{
					const s_2838 = temp_2837[1];
					return ('\'' + (s_2838) + '\'');
				}
			} break;
			
			case 1: {
				{
					const name_2839 = temp_2837[1];
					return name_2839;
				}
			} break;
			
			case 2: {
				{
					const b_2840 = temp_2837[1];
					return (b_2840)? ('true') : 'false';
				}
			} break;
			
			case 5: {
				{
					const s_2841 = temp_2837[1];
					return s_2841;
				}
			} break;
			
			case 6: {
				{
					const s_2842 = temp_2837[1];
					return s_2842;
				}
			} break;
			
			case 7: {
				return 'null'
			} break;
			
			case 3: {
				return 'this'
			} break;
			
			case 33: {
				{
					const expr_2843 = temp_2837[1];
					const index_2844 = temp_2837[2];
					return Node.stringify(expr_2843) + '[' + Node.stringify(index_2844) + ']';
				}
			} break;
			
			case 28: {
				{
					const expr_2845 = temp_2837[1];
					const name_2846 = temp_2837[2];
					return Node.stringify(expr_2845) + '.' + name_2846;
				}
			} break;
			
			case 29: {
				{
					const expr_2847 = temp_2837[1];
					const name_2848 = temp_2837[2];
					return Node.stringify(expr_2847) + '.' + name_2848;
				}
			} break;
			
			case 12: {
				{
					const e_2849 = temp_2837[1];
					const args_2850 = temp_2837[2];
					const argNames_2851 = temp_2837[3];
					{
						const arg_2852 = [];
						{
							let i_2853 = 0;
							let it_2854 = 0;
							let at_2855 = args_2850.length;
							while (it_2854 < at_2855) {
								i_2853 = it_2854;
								it_2854++;
								{
									let step_2856 = 0;
									const name_2857 = argNames_2851[i_2853];
									if (step_2856 == 0 && name_2857 != null) { step_2856 = 1 };
									if (step_2856 == 1) { arg_2852.push(name_2857 + ': ' + Node.stringify(args_2850[i_2853])) } else arg_2852.push(Node.stringify(args_2850[i_2853]));
								};
							};
						};
						return Node.stringify(e_2849) + '(' + arg_2852.join(', ') + ')';
					};
				}
			} break;
			
			case 31: {
				{
					const elements_2858 = temp_2837[1];
					return '[' + (() => {
						const result_2859 = [];
						const value_2860 = elements_2858;
						for (const el of $toIterator(value_2860)) result_2859.push(Node.stringify(el));
						return result_2859;
					})().join(', ') + ']';
				}
			} break;
			
			case 9: {
				{
					const a_2861 = temp_2837[1];
					const op_2862 = temp_2837[2];
					const b_2863 = temp_2837[3];
					return Node.stringify(a_2861) + ' ' + Token.stringify(op_2862) + ' ' + Node.stringify(b_2863);
				}
			} break;
			
			case 36: {
				{
					const names_2864 = temp_2837[1];
					const el_2865 = temp_2837[2];
					return '{' + (() => {
						const result_2866 = [];
						const value_2867 = el_2865.length;
						for (const i of $toIterator(value_2867)) result_2866.push(names_2864[i] + ': ' + Node.stringify(el_2865[i]));
						return result_2866;
					})().join(', ') + '}';
				}
			} break;
			
			case 48: {
				{
					const t_2868 = temp_2837[1];
					return DataHelper.extractTypeName(t_2868);
				}
			} break;
			
			case 43: {
				{
					const f_2869 = temp_2837[1];
					return 'static ' + Node.stringify(f_2869);
				}
			} break;
			
			default: 
			return '...'
			};
		} },
		TString: (s_2737)=>[0,s_2737],
		TIdent: (name_2738)=>[1,name_2738],
		TBool: (b_2739)=>[2,b_2739],
		TInt: (s_2740)=>[5,s_2740],
		TFloat: (s_2741)=>[6,s_2741],
		TTypeAlias: (alias_2742,value_2743)=>[8,alias_2742,value_2743],
		TBinop: (a_2744,op_2745,b_2746)=>[9,a_2744,op_2745,b_2746],
		TAssignop: (a_2747,op_2748,b_2749)=>[10,a_2747,op_2748,b_2749],
		TBlock: (el_2750)=>[11,el_2750],
		TCall: (e_2751,args_2752,argNames_2753)=>[12,e_2751,args_2752,argNames_2753],
		TIf: (econd_2754,eif_2755,eelse_2756)=>[13,econd_2754,eif_2755,eelse_2756],
		TParenthesis: (inner_2757)=>[14,inner_2757],
		TReturn: (e_2758)=>[15,e_2758],
		TThrow: (e_2759)=>[16,e_2759],
		TUnop: (op_2760,postfix_2761,e_2762)=>[19,op_2760,postfix_2761,e_2762],
		TWhile: (econd_2763,e_2764,pre_2765)=>[20,econd_2763,e_2764,pre_2765],
		TFunction: (name_2766,expr_2767,vars_2768,retType,external_2769)=>[21,name_2766,expr_2767,vars_2768,retType,external_2769],
		TArrow: (expr_2770,vars_2771,retType_2772)=>[22,expr_2770,vars_2771,retType_2772],
		TVar: (name_2773,t_2774,expr_2775,const_2776,external_2777)=>[23,name_2773,t_2774,expr_2775,const_2776,external_2777],
		TVars: (vars_2778)=>[24,vars_2778],
		TClass: (t_2779,extend_2780,implement_2781,fields_2782,external_2783,kind_2784)=>[25,t_2779,extend_2780,implement_2781,fields_2782,external_2783,kind_2784],
		Property: (v_2785,g,s_2786)=>[26,v_2785,g,s_2786],
		TTry: (expr_2787,t_2788,v_2789,catches_2790)=>[27,expr_2787,t_2788,v_2789,catches_2790],
		TDot: (expr_2791,name_2792)=>[28,expr_2791,name_2792],
		TDotUpper: (expr_2793,name_2794)=>[29,expr_2793,name_2794],
		TNew: (path_2795,t_2796,args_2797,fields_2798,el_2799,argNames_2800)=>[30,path_2795,t_2796,args_2797,fields_2798,el_2799,argNames_2800],
		TArray: (elements)=>[31,elements],
		TMap: (keys_2801,values_2802)=>[32,keys_2801,values_2802],
		TIndex: (expr_2803,index_2804)=>[33,expr_2803,index_2804],
		TSwitch: (exprs_2805,conds_2806,guards_2807,cases_2808)=>[34,exprs_2805,conds_2806,guards_2807,cases_2808],
		TModule: (path_2809,el_2810)=>[35,path_2809,el_2810],
		TObject: (names_2811,el_2812)=>[36,names_2811,el_2812],
		TEnum: (t_2813,fields_2814,valuesType_2815,extend_2816)=>[37,t_2813,fields_2814,valuesType_2815,extend_2816],
		TEnumExtract: (path_2817,bind_2818,expr_2819)=>[38,path_2817,bind_2818,expr_2819],
		TUsing: (path_2820)=>[39,path_2820],
		TIs: (expr_2821,t_2822)=>[40,expr_2821,t_2822],
		TAs: (expr_2823,kind_2824,t_2825)=>[41,expr_2823,kind_2824,t_2825],
		TStatic: (field_2826)=>[43,field_2826],
		TPrivate: (field_2827)=>[44,field_2827],
		TExport: (field_2828)=>[45,field_2828],
		TFor: (name_2829,over_2830,by_2831,range_2832)=>[46,name_2829,over_2830,by_2831,range_2832],
		Elvis: (nullable_2833,othewise_2834)=>[47,nullable_2833,othewise_2834],
		NodeTypeValue: (type_2835)=>[48,type_2835],
	}
	Object.defineProperty(Node, "TThis", { get: function() { return [3] }})
	Object.defineProperty(Node, "TSuper", { get: function() { return [4] }})
	Object.defineProperty(Node, "TNull", { get: function() { return [7] }})
	Object.defineProperty(Node, "TBreak", { get: function() { return [17] }})
	Object.defineProperty(Node, "TContinue", { get: function() { return [18] }})
	Object.defineProperty(Node, "TUnderscore", { get: function() { return [42] }})
	var Type = {
		stringify: (type_2896) => { {
			const temp_2897 = type_2896;
			switch (temp_2897&&temp_2897[0]) {
			case 4: {
				{
					const type_2898 = temp_2897[1];
					const generic_2899 = temp_2897[2];
					{
						{
							let step_2900 = 0;
							const gen = generic_2899;
							if (step_2900 == 0 && gen != null) { step_2900 = 1 };
							if (step_2900 == 1) { return DataHelper.nameOf(type_2898.parent) + '<' + (() => {
								const result_2901 = [];
								const value_2902 = gen;
								for (const g of $toIterator(value_2902)) result_2901.push(Type.stringify(g));
								return result_2901;
							})().join(', ') + '>' };
						};
						return DataHelper.nameOf(type_2898.parent);
					};
				}
			} break;
			
			case 3: {
				{
					const type_2903 = temp_2897[1];
					return DataHelper.nameOf(type_2903.parent);
				}
			} break;
			
			case 10: {
				{
					const args_2904 = temp_2897[1];
					const returns_2905 = temp_2897[2];
					return '(' + (() => {
						const result_2906 = [];
						const value_2907 = args_2904;
						for (const arg of $toIterator(value_2907)) result_2906.push(Type.stringify(arg));
						return result_2906;
					})().join(', ') + ') => ' + Type.stringify(returns_2905);
				}
			} break;
			
			case 1: {
				{
					const handle_2908 = temp_2897[1];
					{
						{
							let step_2909 = 0;
							const value_2910 = handle_2908.value;
							if (step_2909 == 0 && value_2910 != null) { step_2909 = 1 };
							if (step_2909 == 1) { return Type.stringify(value_2910) + '?' };
						};
						return 'Unknown?';
					};
				}
			} break;
			
			case 2: {
				{
					const type_2911 = temp_2897[1];
					return Type.stringify(type_2911) + '?';
				}
			} break;
			
			case 6: {
				{
					const type_2912 = temp_2897[1];
					return DataHelper.nameOf(type_2912.parent);
				}
			} break;
			
			case 0: {
				{
					const handle_2913 = temp_2897[1];
					{
						{
							let step_2914 = 0;
							const value_2915 = handle_2913.value;
							if (step_2914 == 0 && value_2915 != null) { step_2914 = 1 };
							if (step_2914 == 1) { return Type.stringify(value_2915) };
						};
						return 'Unknown';
					};
				}
			} break;
			
			default: 
			return '~?' + type_2896 + '?~'
			};
		} },
		Unknown: (handle_2879)=>[0,handle_2879],
		UnknownNullable: (handle_2880)=>[1,handle_2880],
		Nullable: (type_2881)=>[2,type_2881],
		Class: (type_2882)=>[3,type_2882],
		ClassInstance: (type_2883,generic_2884)=>[4,type_2883,generic_2884],
		SuperOf: (type_2885)=>[5,type_2885],
		Enum: (type_2886)=>[6,type_2886],
		EnumInstance: (type_2887,tag_2888)=>[7,type_2887,tag_2888],
		EnumConstructor: (type_2889,tag_2890)=>[8,type_2889,tag_2890],
		Alias: (value_2891)=>[9,value_2891],
		Function: (args_2892,returns_2893)=>[10,args_2892,returns_2893],
		Struct: (names_2894,types_2895)=>[11,names_2894,types_2895],
	}
	var Fail = {
	}
	Object.defineProperty(Fail, "ParserError", { get: function() { return [0] }})
	Object.defineProperty(Fail, "ParserInternalError", { get: function() { return [1] }})
	Object.defineProperty(Fail, "LexerError", { get: function() { return [2] }})
	Object.defineProperty(Fail, "TyperError", { get: function() { return [3] }})
	Object.defineProperty(Fail, "InfererError", { get: function() { return [4] }})
	var process_19 = $global.process
	var Normalizer = class {
		constructor() { 
			this.project = new NiceProject()
			this.keywords = []
			this.reservedGlobals = []
			this.collected = []
			this.nativeEnums = false
			this.globalAccessor = '<!-- global -->'
			this.inline = new Map()
			this.scopes = [new Map()]
			this.globals = []
			this.id = Math.round(Math.random() * 123.0)
			this.parentNames = new Map()
		{
		} };
		normalize() {
			for (const global of $toIterator(this.reservedGlobals)) this.addToScope(global);
			for (const file of $toIterator(this.collected)) for (const e of $toIterator(file)) {
				const temp = e;
				switch (temp&&temp[0]) {
				case 35: {
					{
						const path_103 = temp[1];
						const el = temp[2];
						for (const e of $toIterator(el)) {
							const temp_104 = e;
							switch (temp_104&&temp_104[0]) {
							case 25: {
								{
									const t = temp_104[1];
									const ext = temp_104[2];
									const impl = temp_104[3];
									const fields = temp_104[4];
									const external = temp_104[5];
									this.renameClassFields(fields);
								}
							} break;
							
							case 37: {
								{
									const t_105 = temp_104[1];
									const fields_106 = temp_104[2];
									const valuesType = temp_104[3];
									this.renameClassFields(fields_106);
								}
							} break;
							
							case 23: {
								{
									const name_107 = temp_104[1];
									const t_108 = temp_104[2];
									const expr = temp_104[3];
									const const_109 = temp_104[4];
									const external_110 = temp_104[5];
									{
										const atts = Project.mapAttributes.get(e);
										const native = Normalizer.getAtt(atts, 'native');
										if (native != null) {
											const temp_111 = native.values[0];
											switch (temp_111&&temp_111[0]) {
											case 0: {
												{
													const s = temp_111[1];
													this.uniqueNative(s, e);
												}
											} break;
											
											default: 
											throw '@native takes string as argument'
											};
										} else this.unique(name_107, e);
									};
								}
							} break;
							
							case 21: {
								{
									const name_112 = temp_104[1];
									const expr_113 = temp_104[2];
									const vars = temp_104[3];
									const rettype = temp_104[4];
									const external_114 = temp_104[5];
									{
										let step = 0;
										const name_115 = name_112;
										if (step == 0 && name_115 != null) { step = 1 };
										if (step == 1) { this.unique(name_115, e) };
									};
								}
							} break;
							};
						};
					}
				} break;
				};
			};
			const init = [];
			for (const file of $toIterator(this.collected)) {
				const initial = [];
				this.pushScope();
				for (const e of $toIterator(file)) {
					const temp_116 = e;
					switch (temp_116&&temp_116[0]) {
					case 35: {
						{
							const path_117 = temp_116[1];
							const el_118 = temp_116[2];
							{
								this.pushScope();
								for (const e of $toIterator(el_118)) {
									const temp_119 = e;
									switch (temp_119&&temp_119[0]) {
									case 21: {
										{
											let step_120 = 0;
											const s_121 = this.nodeToStatement(e);
											if (step_120 == 0 && s_121 != null) { step_120 = 1 };
											if (step_120 == 1) { this.project.globalFuncs.push(s_121) };
										}
									} break;
									
									case 23: {
										{
											let step_122 = 0;
											const s_123 = this.nodeToStatement(e);
											if (step_122 == 0 && s_123 != null) { step_122 = 1 };
											if (step_122 == 1) { this.project.globalVars.push(s_123) };
										}
									} break;
									
									case 24: {
										{
											const vars_124 = temp_119[1];
											for (const v of $toIterator(vars_124)) {
												let step_125 = 0;
												const s_126 = this.nodeToStatement(v);
												if (step_125 == 0 && s_126 != null) { step_125 = 1 };
												if (step_125 == 1) { this.project.globalVars.push(s_126) };
											};
										}
									} break;
									
									default: 
									this.fillStatement(e, path_117)
									};
								};
								this.popScope();
							};
						}
					} break;
					
					default: 
					{
						const statement = this.fillStatement(e, null);
						{
							const temp_127 = statement;
							switch (temp_127&&temp_127[0]) {
							case null: case undefined: {
								{
								}
							} break;
							
							case 1: {
								{
									const el_128 = temp_127[1];
									if (el_128.length > 0) { initial.push(statement) };
								}
							} break;
							
							default: 
							initial.push(statement)
							};
						};
					}
					};
				};
				this.popScope();
				if (initial.length > 0) { init.push(/*Block*/[1,initial]) };
			};
			this.project.init.push(/*Block*/[1,init]);
			if (this.project.init.length > 1) { throw 'too many inits' };
			this.project.package = this.package;
			this.project.typer = this.typer;
			this.project.classes.sort((a_129, b_130) => {
				if (a_129.external == true) { return (-1) };
				if (a_129.extend == null) { return 0 };
				return 1;
			});
			return this.project;
		};
		nodeToExpression(e) {
			if (e == null) { return null };
			{
				const temp_131 = e;
				switch (temp_131&&temp_131[0]) {
				case 0: {
					{
						const v_132 = temp_131[1];
						return /*String*/[0,v_132];
					}
				} break;
				
				case 5: {
					{
						const v_133 = temp_131[1];
						return /*Int*/[1,v_133];
					}
				} break;
				
				case 6: {
					{
						const v_134 = temp_131[1];
						return /*Float*/[2,v_134];
					}
				} break;
				
				case 2: {
					{
						const v_135 = temp_131[1];
						{
							if (v_135) { return /*True*/[3] };
							return /*False*/[4];
						};
					}
				} break;
				
				case 7: {
					return /*Null*/[6]
				} break;
				
				case 48: {
					{
						const t_136 = temp_131[1];
						{
							const temp_137 = t_136;
							switch (temp_137&&temp_137[0]) {
							case 1: {
								{
									const name_138 = temp_137[1];
									return /*Ident*/[5,(() => {
										const result = this.parentNames.get(this.typer.parents.get(e));
										if (result != null) { return result };
										return name_138;
									})(),null];
								}
							} break;
							};
						};
					}
				} break;
				
				case 1: {
					{
						const name_139 = temp_131[1];
						{
							let source = this.typer.parents.get(e);
							{
								let step_140 = 0;
								const value_141 = this.inline.get(source);
								if (step_140 == 0 && value_141 != null) { step_140 = 1 };
								if (step_140 == 1) { return value_141 };
							};
							{
								const temp_142 = source;
								switch (temp_142&&temp_142[0]) {
								case null: case undefined: {
									throw ('Unmapped `' + (e) + '` of name `' + (name_139) + '` ') + JSON.stringify(Project.data.get(e))
								} break;
								
								case 23: {
									{
										const name_143 = temp_142[1];
										{
											let step_144 = 0;
											const map = this.typer.parents.get(source);
											if (step_144 == 0 && map != null) { step_144 = 1 };
											if (step_144 == 1) {
												const temp_145 = map;
												switch (temp_145&&temp_145[0]) {
												case 35: {
													{
														const path_146 = temp_145[1];
														{
															const name_147 = (() => {
																const result_148 = this.parentNames.get(source);
																if (result_148 != null) { return result_148 };
																return name_143;
															})();
															return /*Ident*/[5,this.globalAccessor + name_147,this.typer.types.get(source)];
														};
													}
												} break;
												
												default: 
												{
													const type = this.typer.types.get(this.typer.parents.get(source));
													return /*Dot*/[8,/*This*/[7,type],(() => {
														const result_149 = this.parentNames.get(source);
														if (result_149 != null) { return result_149 };
														return name_143;
													})(),this.typer.types.get(e)];
												}
												};
											};
										};
									}
								} break;
								
								case 21: {
									{
										const name_150 = temp_142[1];
										{
											let step_151 = 0;
											const map_152 = this.typer.parents.get(source);
											if (step_151 == 0 && map_152 != null) { step_151 = 1 };
											if (step_151 == 1) {
												const temp_153 = map_152;
												switch (temp_153&&temp_153[0]) {
												case 35: {
													{
														const path_154 = temp_153[1];
														return /*Ident*/[5,this.globalAccessor + name_150,null];
													}
												} break;
												
												default: 
												{
													const type_155 = this.typer.types.get(this.typer.parents.get(source));
													return /*Dot*/[8,/*This*/[7,type_155],(() => {
														const result_156 = this.parentNames.get(source);
														if (result_156 != null) { return result_156 };
														return name_150;
													})(),this.typer.types.get(e)];
												}
												};
											};
										};
									}
								} break;
								
								case 43: {
									{
										const f_157 = temp_142[1];
										{
											const staticSource = this.typer.parents.get(source);
											{
												const temp_158 = staticSource;
												switch (temp_158&&temp_158[0]) {
												case 25: {
													{
														const t_159 = temp_158[1];
														return /*Dot*/[8,/*Ident*/[5,DataHelper.extractTypeName(t_159),null],this.getClassDotField(staticSource, name_139),this.typer.types.get(e)];
													}
												} break;
												
												case 37: {
													{
														const t_160 = temp_158[1];
														return /*Dot*/[8,/*Ident*/[5,DataHelper.extractTypeName(t_160),null],this.getClassDotField(staticSource, name_139),this.typer.types.get(e)];
													}
												} break;
												
												default: 
												throw ('staticSource is ' + (staticSource) + ' for ' + (name_139) + '')
												};
											};
										};
									}
								} break;
								};
							};
							return /*Ident*/[5,(() => {
								const result_161 = this.parentNames.get(source);
								if (result_161 != null) { return result_161 };
								return name_139;
							})(),this.typer.types.get(e)];
						};
					}
				} break;
				
				case 28: {
					{
						const expr_162 = temp_131[1];
						const name_163 = temp_131[2];
						{
							const parent = this.typer.parents.get(expr_162);
							{
								const temp_164 = expr_162;
								switch (temp_164&&temp_164[0]) {
								case 3: {
									return /*Dot*/[8,/*This*/[7,this.typer.types.get(expr_162)],(() => {
										const result_165 = this.getClassDotField(this.typer.types.get(expr_162).parent, name_163);
										if (result_165 != null) { return result_165 };
										return name_163;
									})(),this.typer.types.get(e)]
								} break;
								};
							};
							{
								const temp_166 = parent;
								switch (temp_166&&temp_166[0]) {
								case 37: {
									{
										const t_167 = temp_166[1];
										const fields_168 = temp_166[2];
										const valuesType_169 = temp_166[3];
										{
											{
												let step_170 = 0;
												const temp_171 = (!this.nativeEnums);
												let vt = null;
												if (step_170 == 0 && temp_171 != false) {
													vt = valuesType_169;
													step_170 = 1;
												};
												let tag = null;
												if (step_170 == 1 && vt != null) {
													tag = this.getTag(parent, name_163);
													step_170 = 2;
												};
												if (step_170 == 2 && tag != null) { step_170 = 3 };
												if (step_170 == 3) { return tag };
											};
											return /*Dot*/[8,this.nodeToExpression(expr_162),(() => {
												const result_172 = this.getClassDotField(parent, name_163);
												if (result_172 != null) { return result_172 };
												return name_163;
											})(),this.typer.types.get(e)];
										};
									}
								} break;
								
								case 25: {
									return /*Dot*/[8,this.nodeToExpression(expr_162),(() => {
										const result_173 = this.getClassDotField(parent, name_163);
										if (result_173 != null) { return result_173 };
										return name_163;
									})(),this.typer.types.get(e)]
								} break;
								};
							};
							{
								let step_174 = 0;
								const type_175 = this.typer.types.get(expr_162);
								if (step_174 == 0 && type_175 != null) { step_174 = 1 };
								if (step_174 == 1) {
									const temp_176 = type_175;
									switch (temp_176&&temp_176[0]) {
									case 4: {
										{
											const type_177 = temp_176[1];
											{
												const renamed = type_177.fieldRenames[type_177.fieldNames.indexOf(name_163)];
												{
													let step_178 = 0;
													const rename = renamed;
													if (step_178 == 0 && rename != null) { step_178 = 1 };
													if (step_178 == 1) { return /*Dot*/[8,this.nodeToExpression(expr_162),rename,this.typer.types.get(e)] };
												};
											};
										}
									} break;
									};
								};
							};
							return /*Dot*/[8,this.nodeToExpression(expr_162),name_163,this.typer.types.get(e)];
						};
					}
				} break;
				
				case 29: {
					{
						const expr_179 = temp_131[1];
						const name_180 = temp_131[2];
						{
							const parent_181 = this.typer.parents.get(expr_179);
							{
								const temp_182 = parent_181;
								switch (temp_182&&temp_182[0]) {
								case 37: {
									{
										const t_183 = temp_182[1];
										const fields_184 = temp_182[2];
										const valuesType_185 = temp_182[3];
										{
											{
												let step_186 = 0;
												const temp_187 = (!this.nativeEnums);
												let vt_188 = null;
												if (step_186 == 0 && temp_187 != false) {
													vt_188 = valuesType_185;
													step_186 = 1;
												};
												let tag_189 = null;
												if (step_186 == 1 && vt_188 != null) {
													tag_189 = this.getTag(parent_181, name_180);
													step_186 = 2;
												};
												if (step_186 == 2 && tag_189 != null) { step_186 = 3 };
												if (step_186 == 3) { return tag_189 };
											};
											{
												let step_190 = 0;
												const temp_191 = (!this.nativeEnums);
												let temp_192 = null;
												if (step_190 == 0 && temp_191 != false) {
													temp_192 = valuesType_185 == null;
													step_190 = 1;
												};
												let tag_193 = null;
												if (step_190 == 1 && temp_192 != false) {
													tag_193 = this.getTag(parent_181, name_180);
													step_190 = 2;
												};
												if (step_190 == 2 && tag_193 != null) { step_190 = 3 };
												if (step_190 == 3) { return /*Enum*/[27,DataHelper.extractTypeName(t_183),name_180,tag_193,[]] };
											};
											return /*Dot*/[8,this.nodeToExpression(expr_179),(() => {
												const result_194 = this.getClassDotField(parent_181, name_180);
												if (result_194 != null) { return result_194 };
												return name_180;
											})(),this.typer.types.get(e)];
										};
									}
								} break;
								
								case 25: {
									return /*Dot*/[8,this.nodeToExpression(expr_179),(() => {
										const result_195 = this.getClassDotField(parent_181, name_180);
										if (result_195 != null) { return result_195 };
										return name_180;
									})(),this.typer.types.get(e)]
								} break;
								};
							};
							return /*Dot*/[8,this.nodeToExpression(expr_179),name_180,this.typer.types.get(e)];
						};
					}
				} break;
				
				case 12: {
					{
						const expr_196 = temp_131[1];
						const args = temp_131[2];
						const argNames = temp_131[3];
						{
							if (args.length == 1) {
								const temp_197 = expr_196;
								switch (temp_197&&temp_197[0]) {
								case 28: {
									{
										const expr_198 = temp_197[1];
										const name_199 = temp_197[2];
										if (name_199 == 'charCodeAt') {
											const temp_200 = expr_198;
											switch (temp_200&&temp_200[0]) {
											case 0: {
												{
													const s_201 = temp_200[1];
													if (s_201.indexOf('\\') == (-1)) {
														const temp_202 = args[0];
														switch (temp_202&&temp_202[0]) {
														case 5: {
															{
																const v_203 = temp_202[1];
																{
																	const i = parseInt(v_203);
																	if ((i < s_201.length) && (i > (-1))) { return /*Int*/[1,s_201.charCodeAt(i)] };
																};
															}
														} break;
														};
													};
												}
											} break;
											};
										};
									}
								} break;
								};
							};
							let kind = 11;
							{
								const temp_204 = expr_196;
								switch (temp_204&&temp_204[0]) {
								case 28: {
									{
										const expr_205 = temp_204[1];
										{
											const temp_206 = this.typer.types.get(expr_205);
											switch (temp_206&&temp_206[0]) {
											case 4: {
												kind = 12
											} break;
											
											case 3: {
												kind = 10
											} break;
											};
										};
									}
								} break;
								};
							};
							const a_207 = [];
							for (const arg of $toIterator(args)) {
								a_207.push(this.nodeToExpression(arg));
							};
							if ((!this.nativeEnums)) {
								const temp_208 = expr_196;
								switch (temp_208&&temp_208[0]) {
								case 29: {
									{
										const expr_209 = temp_208[1];
										const name_210 = temp_208[2];
										{
											const parent_211 = this.typer.parents.get(expr_209);
											{
												const temp_212 = parent_211;
												switch (temp_212&&temp_212[0]) {
												case 37: {
													{
														const t_213 = temp_212[1];
														const fields_214 = temp_212[2];
														const valuesType_215 = temp_212[3];
														{
															let step_216 = 0;
															const tag_217 = this.getTag(parent_211, name_210);
															if (step_216 == 0 && tag_217 != null) { step_216 = 1 };
															if (step_216 == 1) { return /*Enum*/[27,DataHelper.extractTypeName(t_213),name_210,tag_217,a_207] };
														};
													}
												} break;
												};
											};
										};
									}
								} break;
								};
							};
							const atts_218 = Project.mapAttributes.get(this.typer.parents.get(expr_196));
							const infix = Normalizer.getAtt(atts_218, 'infix');
							if (infix != null) {
								const temp_219 = infix.values[0];
								switch (temp_219&&temp_219[0]) {
								case 0: {
									{
										const s_220 = temp_219[1];
										return /*NativeOperator*/[25,0,a_207,s_220];
									}
								} break;
								
								default: 
								throw '@infix takes string as argument'
								};
							};
							const operator = Normalizer.getAtt(atts_218, 'operator');
							if (operator != null) {
								const temp_221 = operator.values[0];
								switch (temp_221&&temp_221[0]) {
								case 0: {
									{
										const s_222 = temp_221[1];
										return /*NativeOperator*/[25,1,a_207,s_222];
									}
								} break;
								
								default: 
								throw '@operator takes string as argument'
								};
							};
							const v_223 = this.nodeToExpression(expr_196);
							{
								const temp_224 = v_223;
								switch (temp_224&&temp_224[0]) {
								case 8: {
									{
										const expr_225 = temp_224[1];
										{
											const temp_226 = expr_225;
											switch (temp_226&&temp_226[0]) {
											case 7: {
												kind = 12
											} break;
											};
										};
									}
								} break;
								};
							};
							return /*Call*/[9,v_223,a_207,this.typer.types.get(e),kind];
						};
					}
				} break;
				
				case 9: {
					{
						const a_227 = temp_131[1];
						const op = temp_131[2];
						const b_228 = temp_131[3];
						{
							const ea = this.nodeToExpression(a_227);
							const eb = this.nodeToExpression(b_228);
							if (op == 111) {
								const temp_229 = ea;
								switch (temp_229&&temp_229[0]) {
								case 0: {
									{
										const sa = temp_229[1];
										{
											const temp_230 = eb;
											switch (temp_230&&temp_230[0]) {
											case 0: {
												{
													const sb = temp_230[1];
													return /*String*/[0,sa + sb];
												}
											} break;
											};
										};
									}
								} break;
								};
							};
							if (op == 93) {
								const temp_231 = ea;
								switch (temp_231&&temp_231[0]) {
								case 3: {
									{
										const temp_232 = eb;
										switch (temp_232&&temp_232[0]) {
										case 4: {
											return /*True*/[3]
										} break;
										
										case 3: {
											return /*True*/[3]
										} break;
										};
									}
								} break;
								
								case 4: {
									{
										const temp_233 = eb;
										switch (temp_233&&temp_233[0]) {
										case 4: {
											return /*False*/[4]
										} break;
										
										case 3: {
											return /*True*/[3]
										} break;
										};
									}
								} break;
								};
							};
							if (op == 92) {
								const temp_234 = ea;
								switch (temp_234&&temp_234[0]) {
								case 3: {
									{
										const temp_235 = eb;
										switch (temp_235&&temp_235[0]) {
										case 4: {
											return /*False*/[4]
										} break;
										
										case 3: {
											return /*True*/[3]
										} break;
										};
									}
								} break;
								
								case 4: {
									{
										const temp_236 = eb;
										switch (temp_236&&temp_236[0]) {
										case 4: {
											return /*False*/[4]
										} break;
										
										case 3: {
											return /*False*/[4]
										} break;
										};
									}
								} break;
								};
							};
							return /*Binop*/[11,ea,op,eb,this.typer.types.get(e)];
						};
					}
				} break;
				
				case 30: {
					{
						const path_237 = temp_131[1];
						const t_238 = temp_131[2];
						const args_239 = temp_131[3];
						const fields_240 = temp_131[4];
						const el_241 = temp_131[5];
						{
							const v_242 = /*Ident*/[5,(() => {
								const result_243 = this.parentNames.get(this.typer.parents.get(e));
								if (result_243 != null) { return result_243 };
								return DataHelper.extractTypeName(t_238);
							})(),null];
							const a_244 = [];
							for (const arg of $toIterator(args_239)) {
								a_244.push(this.nodeToExpression(arg));
							};
							return /*New*/[10,v_242,a_244];
						};
					}
				} break;
				
				case 21: {
					{
						const name_245 = temp_131[1];
						const expr_246 = temp_131[2];
						const vars_247 = temp_131[3];
						const rettype_248 = temp_131[4];
						const external_249 = temp_131[5];
						{
							const a_250 = [];
							const defaults = [];
							const types = [];
							for (const arg of $toIterator(vars_247)) {
								const temp_251 = arg;
								switch (temp_251&&temp_251[0]) {
								case 23: {
									{
										const name_252 = temp_251[1];
										const t_253 = temp_251[2];
										const expr_254 = temp_251[3];
										const const_255 = temp_251[4];
										{
											a_250.push(this.unique(name_252, arg));
											types.push(t_253);
											if (expr_254 != null) { defaults.push(this.nodeToExpression(expr_254)) } else defaults.push(null);
										};
									}
								} break;
								};
							};
							return /*Function*/[12,name_245 != (null)? (this.unique(name_245, e)) : (null),this.nodeToStatement(expr_246),a_250,defaults,this.typer.types.get(e)];
						};
					}
				} break;
				
				case 22: {
					{
						const expr_256 = temp_131[1];
						const vars_257 = temp_131[2];
						const rettype_258 = temp_131[3];
						{
							const a_259 = [];
							const defaults_260 = [];
							const types_261 = [];
							for (const arg of $toIterator(vars_257)) {
								const temp_262 = arg;
								switch (temp_262&&temp_262[0]) {
								case 23: {
									{
										const name_263 = temp_262[1];
										const t_264 = temp_262[2];
										const expr_265 = temp_262[3];
										const const_266 = temp_262[4];
										{
											a_259.push(this.unique(name_263, arg));
											types_261.push(t_264);
											if (expr_265 != null) { defaults_260.push(this.nodeToExpression(expr_265)) } else defaults_260.push(null);
										};
									}
								} break;
								};
							};
							return /*Arrow*/[13,this.nodeToExpression(expr_256),a_259,defaults_260,types_261,rettype_258];
						};
					}
				} break;
				
				case 11: {
					{
						const el_267 = temp_131[1];
						{
							if (el_267.length == 0) { return /*Object*/[15,[],[],[]] };
							if (el_267.length == 1) { return this.nodeToExpression(el_267[0]) };
							const block = [];
							let i_268 = 0;
							while (i_268 < el_267.length - 1) {
								{
									let step_269 = 0;
									const s_270 = this.nodeToStatement(el_267[i_268]);
									if (step_269 == 0 && s_270 != null) { step_269 = 1 };
									if (step_269 == 1) { block.push(s_270) };
								};
								i_268++;
							};
							const result_271 = el_267[el_267.length - 1];
							block.push(/*Return*/[8,this.nodeToExpression(result_271)]);
							return /*Call*/[9,/*Parenthesis*/[14,/*Function*/[12,null,/*Block*/[1,block],[],[],null]],[],this.typer.types.get(result_271),11];
						};
					}
				} break;
				
				case 36: {
					{
						const names = temp_131[1];
						const el_272 = temp_131[2];
						{
							const els = [];
							const types_273 = [];
							for (const e of $toIterator(el_272)) {
								els.push(this.nodeToExpression(e));
								types_273.push(this.typer.types.get(e));
							};
							return /*Object*/[15,names,els,types_273];
						};
					}
				} break;
				
				case 14: {
					{
						const inner = temp_131[1];
						{
							const unwrapNestedParens = (inner_274) => {
								const temp_275 = inner_274;
								switch (temp_275&&temp_275[0]) {
								case 14: {
									{
										const i_276 = temp_275[1];
										return unwrapNestedParens(i_276);
									}
								} break;
								
								default: 
								return inner_274
								};
							};
							const value_277 = this.nodeToExpression(unwrapNestedParens(inner));
							{
								const temp_278 = value_277;
								switch (temp_278&&temp_278[0]) {
								case 1: {
									return value_277
								} break;
								
								case 0: {
									return value_277
								} break;
								
								case 2: {
									return value_277
								} break;
								
								case 3: {
									return value_277
								} break;
								
								case 4: {
									return value_277
								} break;
								
								case 6: {
									return value_277
								} break;
								};
							};
							return /*Parenthesis*/[14,value_277];
						};
					}
				} break;
				
				case 31: {
					{
						const el_279 = temp_131[1];
						{
							if (el_279.length == 1) {
								const temp_280 = el_279[0];
								switch (temp_280&&temp_280[0]) {
								case 46: {
									{
										const name_281 = temp_280[1];
										const over = temp_280[2];
										const by = temp_280[3];
										const range = temp_280[4];
										{
											const block_282 = [];
											const result_283 = this.unique('result');
											const resultType = this.typer.types.get(e);
											block_282.push(/*Const*/[6,result_283,/*Array*/[16,[],[]],this.typer.types.get(e)]);
											const value_284 = this.unique('value');
											const valueType = this.typer.types.get(el_279[0]);
											block_282.push(/*Const*/[6,value_284,this.nodeToExpression(over),valueType]);
											const push = /*Call*/[2,/*Dot*/[8,/*Ident*/[5,result_283,this.typer.types.get(e)],'push',null],[this.nodeToExpression(by)],[],12];
											const fillLoop = () => {
												{
													const temp_285 = over;
													switch (temp_285&&temp_285[0]) {
													case 5: {
														{
															const s_286 = temp_285[1];
															{
																const i_287 = name_281;
																block_282.push(/*Const*/[6,i_287,/*Int*/[1,(-1)],this.typer.typeInt]);
																block_282.push(/*While*/[16,/*Binop*/[11,/*Parenthesis*/[14,/*Binop*/[11,/*Ident*/[5,i_287,this.typer.typeInt],111,/*Int*/[1,1],this.typer.typeInt]],99,/*Ident*/[5,value_284,valueType],this.typer.typeBool],/*Block*/[1,[/*Increment*/[17,/*Ident*/[5,i_287,this.typer.typeInt]], push]],true]);
																return;
															};
														}
													} break;
													};
												};
												block_282.push(/*For*/[15,name_281,/*Ident*/[5,value_284,valueType],push]);
											};
											fillLoop();
											block_282.push(/*Return*/[8,/*Ident*/[5,result_283,resultType]]);
											return /*Call*/[9,/*Parenthesis*/[14,/*Function*/[12,null,/*Block*/[1,block_282],[],[],/*Function*/[10,[],this.typer.types.get(e)]]],[],this.typer.types.get(e),11];
										};
									}
								} break;
								};
							};
							const els_288 = [];
							const types_289 = [];
							for (const e of $toIterator(el_279)) {
								els_288.push(this.nodeToExpression(e));
								types_289.push(this.typer.types.get(e));
							};
							return /*Array*/[16,els_288,types_289];
						};
					}
				} break;
				
				case 47: {
					{
						const nullable = temp_131[1];
						const otherwise = temp_131[2];
						{
							const result_290 = this.unique('result');
							const resultType_291 = null;
							return /*Call*/[9,/*Parenthesis*/[14,/*Function*/[12,null,/*Block*/[1,[/*Const*/[6,result_290,this.nodeToExpression(nullable),null], /*If*/[9,/*Binop*/[11,/*Ident*/[5,result_290,null],103,/*Null*/[6],this.typer.typeBool],/*Return*/[8,/*Ident*/[5,result_290,null]],null], /*Return*/[8,this.nodeToExpression(otherwise)]]],[],[],/*Function*/[10,[],this.typer.types.get(otherwise)]]],[],this.typer.types.get(otherwise),11];
							return /*Elvis*/[19,this.nodeToExpression(nullable),this.nodeToExpression(otherwise)];
						};
					}
				} break;
				
				case 19: {
					{
						const op_292 = temp_131[1];
						const postfix = temp_131[2];
						const e_293 = temp_131[3];
						return /*Unop*/[18,op_292,postfix,this.nodeToExpression(e_293)];
					}
				} break;
				
				case 3: {
					return /*This*/[7,this.typer.types.get(e)]
				} break;
				
				case 32: {
					{
						const keys = temp_131[1];
						const values_294 = temp_131[2];
						{
							const k_295 = [];
							const v_296 = [];
							for (const key of $toIterator(keys)) k_295.push(this.nodeToExpression(key));
							for (const value of $toIterator(values_294)) v_296.push(this.nodeToExpression(value));
							return /*Map*/[17,k_295,v_296,this.typer.types.get(keys[0]),this.typer.types.get(values_294[0])];
						};
					}
				} break;
				
				case 10: {
					{
						const a_297 = temp_131[1];
						const op_298 = temp_131[2];
						const b_299 = temp_131[3];
						return /*Assignop*/[24,this.nodeToExpression(a_297),op_298,this.nodeToExpression(b_299)];
					}
				} break;
				
				case 13: {
					{
						const econd = temp_131[1];
						const eif = temp_131[2];
						const eelse = temp_131[3];
						{
							let binds = false;
							for (const cond of $toIterator(econd)) {
								const temp_300 = cond;
								switch (temp_300&&temp_300[0]) {
								case 23: {
									binds = true
								} break;
								};
							};
							if ((!binds) && econd.length == 1) { return /*If*/[20,this.nodeToExpression(econd[0]),this.nodeToExpression(eif),this.nodeToExpression(eelse)] };
							if ((!binds)) {
								let parens = /*Parenthesis*/[14,this.nodeToExpression(econd[0])];
								let i_301 = 1;
								while (i_301 < econd.length) {
									parens = /*Binop*/[11,parens,92,/*Parenthesis*/[14,this.nodeToExpression(econd[i_301])],this.typer.typeBool];
									i_301++;
								};
								return /*If*/[20,parens,this.nodeToExpression(eif),this.nodeToExpression(eelse)];
							};
							return /*If*/[20,this.nodeToExpression(econd[0]),this.nodeToExpression(eif),this.nodeToExpression(eelse)];
						};
					}
				} break;
				
				case 33: {
					{
						const expr_302 = temp_131[1];
						const index_303 = temp_131[2];
						return /*Index*/[21,this.nodeToExpression(expr_302),this.nodeToExpression(index_303)];
					}
				} break;
				
				case 41: {
					{
						const e_304 = temp_131[1];
						const kind_305 = temp_131[2];
						const t_306 = temp_131[3];
						{
							const temp_307 = kind_305;
							switch (temp_307) {
							case 81: {
								console.log('`as?` is not yet supported by normalizer, only `as!`')
							} break;
							
							case 89: {
								return /*UnsafeBitCast*/[22,this.nodeToExpression(e_304),this.typer.types.get(t_306)]
							} break;
							
							default: 
							console.log('`as` is not yet supported by normalizer, only `as!`')
							};
						};
					}
				} break;
				
				case 40: {
					{
						const e_308 = temp_131[1];
						const t_309 = temp_131[2];
						return /*Is*/[23,this.nodeToExpression(e_308),this.typer.types.get(t_309)];
					}
				} break;
				
				case 34: {
					{
						const exprs = temp_131[1];
						const conds = temp_131[2];
						const guards = temp_131[3];
						const cases = temp_131[4];
						{
							const block_310 = [];
							const caseRet = [];
							let funcType = this.typer.typeVoid;
							let resultType_311 = this.typer.typeVoid;
							for (const c of $toIterator(cases)) {
								resultType_311 = this.typer.types.get(c);
								funcType = /*Function*/[10,[],resultType_311];
								caseRet.push(/*TReturn*/[15,c]);
							};
							block_310.push(this.nodeToStatement(/*TSwitch*/[34,exprs,conds,guards,caseRet]));
							return /*Call*/[9,/*Parenthesis*/[14,/*Function*/[12,null,/*Block*/[1,block_310],[],[],funcType]],[],resultType_311,11];
						};
					}
				} break;
				
				default: 
				console.error('(internal warning) Unknown node type for expression:', e, Project.data.get(e))
				};
			};
			return null;
		};
		nodeToStatement(e_312) {
			if (e_312 == null) { return null };
			{
				const temp_313 = e_312;
				switch (temp_313&&temp_313[0]) {
				case 11: {
					{
						const el_314 = temp_313[1];
						{
							let els_315 = [];
							for (const e of $toIterator(el_314)) {
								const statement_316 = this.nodeToStatement(e);
								if (statement_316 != null) { els_315.push(statement_316) };
							};
							if (els_315.length == 1) {
								const temp_317 = els_315[0];
								switch (temp_317&&temp_317[0]) {
								case 1: {
									return els_315[0]
								} break;
								};
							};
							return /*Block*/[1,els_315];
						};
					}
				} break;
				
				case 37: {
					{
						const t_318 = temp_313[1];
						const fields_319 = temp_313[2];
						const valuesType_320 = temp_313[3];
						{
							this.renameClassFields(fields_319);
							const isComplexEnum = valuesType_320 == null;
							if (isComplexEnum) {
								const type_321 = new NiceComplexEnum();
								type_321.name = this.unique(DataHelper.extractTypeName(t_318), e_312);
								this.globals.push(type_321.name);
								const names_322 = [];
								const constructors = [];
								const constructorsTypes = [];
								const types_323 = [];
								for (const f of $toIterator(fields_319)) {
									const temp_324 = f;
									switch (temp_324&&temp_324[0]) {
									case 48: {
										{
											const t_325 = temp_324[1];
											{
												const temp_326 = t_325;
												switch (temp_326&&temp_326[0]) {
												case 1: {
													{
														const name_327 = temp_326[1];
														{
															names_322.push(name_327);
															constructors.push(null);
															constructorsTypes.push(null);
															types_323.push(null);
														};
													}
												} break;
												};
											};
										}
									} break;
									
									case 12: {
										{
											const e_328 = temp_324[1];
											const args_329 = temp_324[2];
											const argNames_330 = temp_324[3];
											{
												{
													const temp_331 = e_328;
													switch (temp_331&&temp_331[0]) {
													case 48: {
														{
															const t_332 = temp_331[1];
															{
																const temp_333 = t_332;
																switch (temp_333&&temp_333[0]) {
																case 1: {
																	{
																		const name_334 = temp_333[1];
																		names_322.push(name_334);
																	}
																} break;
																};
															};
														}
													} break;
													};
												};
												constructors.push((() => {
													const result_335 = [];
													const value_336 = argNames_330;
													for (const arg of $toIterator(value_336)) result_335.push(this.unique((arg)));
													return result_335;
												})());
												constructorsTypes.push((() => {
													const result_337 = [];
													const value_338 = args_329;
													for (const arg of $toIterator(value_338)) result_337.push(this.typer.toType(Typer.nodeToNodeType(arg), arg));
													return result_337;
												})());
												types_323.push((() => {
													const result_339 = [];
													const value_340 = args_329;
													for (const arg of $toIterator(value_340)) result_339.push(this.unique((arg)));
													return result_339;
												})());
											};
										}
									} break;
									
									case 43: {
										{
											const field = temp_324[1];
											{
												const temp_341 = field;
												switch (temp_341&&temp_341[0]) {
												case 23: {
													{
														const name_342 = temp_341[1];
														const t_343 = temp_341[2];
														const expr_344 = temp_341[3];
														const const_345 = temp_341[4];
														{
															const uname = (() => {
																const result_346 = this.parentNames.get(field);
																if (result_346 != null) { return result_346 };
																return this.unique(name_342, field);
															})();
															if (const_345) {
																const value_347 = this.nodeToExpression(expr_344);
																this.saveInlineIfViable(f, value_347);
																type_321.staticVars.push(/*Const*/[6,uname,value_347,this.typer.types.get(field)]);
															} else type_321.staticVars.push(/*Var*/[5,uname,this.nodeToExpression(expr_344),this.typer.types.get(field)]);
														};
													}
												} break;
												
												case 21: {
													{
														const name_348 = temp_341[1];
														const expr_349 = temp_341[2];
														const vars_350 = temp_341[3];
														const rettype_351 = temp_341[4];
														const external_352 = temp_341[5];
														{
															const uname_353 = (() => {
																const result_354 = this.parentNames.get(field);
																if (result_354 != null) { return result_354 };
																return this.unique(name_348, field);
															})();
															const a_355 = [];
															const defaults_356 = [];
															const types_357 = [];
															for (const arg of $toIterator(vars_350)) {
																const temp_358 = arg;
																switch (temp_358&&temp_358[0]) {
																case 23: {
																	{
																		const name_359 = temp_358[1];
																		const t_360 = temp_358[2];
																		const expr_361 = temp_358[3];
																		const const_362 = temp_358[4];
																		{
																			a_355.push(this.unique(name_359, arg));
																			types_357.push(t_360);
																			if (expr_361 != null) { defaults_356.push(this.nodeToExpression(expr_361)) } else defaults_356.push(null);
																		};
																	}
																} break;
																};
															};
															type_321.staticMethods.push(/*Function*/[7,uname_353,this.unwrapNestingBlocks(this.nodeToStatement(expr_349)),a_355,defaults_356,this.typer.types.get(field)]);
														};
													}
												} break;
												
												default: 
												console.error('(internal warning) Unknown complex enum static field kind:', field)
												};
											};
										}
									} break;
									
									default: 
									console.error('(internal warning) Unknown complex enum field kind:', f)
									};
								};
								type_321.names = names_322;
								type_321.constructors = constructors;
								type_321.constructorsTypes = constructorsTypes;
								type_321.types = types_323;
								this.project.enumsComplex.push(type_321);
								return null;
							} else {
								const type_363 = new NiceSimpleEnum();
								type_363.name = DataHelper.extractTypeName(t_318);
								const names_364 = [];
								const values_365 = [];
								for (const f of $toIterator(fields_319)) {
									const temp_366 = f;
									switch (temp_366&&temp_366[0]) {
									case 9: {
										{
											const a_367 = temp_366[1];
											const op_368 = temp_366[2];
											const b_369 = temp_366[3];
											{
												{
													const temp_370 = a_367;
													switch (temp_370&&temp_370[0]) {
													case 48: {
														{
															const t_371 = temp_370[1];
															{
																const temp_372 = t_371;
																switch (temp_372&&temp_372[0]) {
																case 1: {
																	{
																		const name_373 = temp_372[1];
																		names_364.push(name_373);
																	}
																} break;
																};
															};
														}
													} break;
													};
												};
												{
													const temp_374 = b_369;
													switch (temp_374&&temp_374[0]) {
													case 0: {
														{
															const s_375 = temp_374[1];
															values_365.push(/*String*/[0,s_375]);
														}
													} break;
													
													case 5: {
														{
															const s_376 = temp_374[1];
															values_365.push(/*Int*/[1,s_376]);
														}
													} break;
													
													default: 
													console.error('(internal warning) Unknown node field value kind:', b_369)
													};
												};
											};
										}
									} break;
									
									case 48: {
										{
											const t_377 = temp_366[1];
											{
												const temp_378 = t_377;
												switch (temp_378&&temp_378[0]) {
												case 1: {
													{
														const name_379 = temp_378[1];
														names_364.push(name_379);
													}
												} break;
												};
											};
										}
									} break;
									
									case 43: {
										{
											const field_380 = temp_366[1];
											{
												const temp_381 = field_380;
												switch (temp_381&&temp_381[0]) {
												case 23: {
													{
														const name_382 = temp_381[1];
														const t_383 = temp_381[2];
														const expr_384 = temp_381[3];
														const const_385 = temp_381[4];
														{
															const uname_386 = (() => {
																const result_387 = this.parentNames.get(field_380);
																if (result_387 != null) { return result_387 };
																return this.unique(name_382, field_380);
															})();
															if (const_385) {
																const value_388 = this.nodeToExpression(expr_384);
																this.saveInlineIfViable(f, value_388);
																type_363.staticVars.push(/*Const*/[6,uname_386,value_388,this.typer.types.get(field_380)]);
															} else type_363.staticVars.push(/*Var*/[5,uname_386,this.nodeToExpression(expr_384),this.typer.types.get(field_380)]);
														};
													}
												} break;
												
												case 21: {
													{
														const name_389 = temp_381[1];
														const expr_390 = temp_381[2];
														const vars_391 = temp_381[3];
														const rettype_392 = temp_381[4];
														const external_393 = temp_381[5];
														{
															const uname_394 = (() => {
																const result_395 = this.parentNames.get(field_380);
																if (result_395 != null) { return result_395 };
																return this.unique(name_389, field_380);
															})();
															const a_396 = [];
															const defaults_397 = [];
															const types_398 = [];
															for (const arg of $toIterator(vars_391)) {
																const temp_399 = arg;
																switch (temp_399&&temp_399[0]) {
																case 23: {
																	{
																		const name_400 = temp_399[1];
																		const t_401 = temp_399[2];
																		const expr_402 = temp_399[3];
																		const const_403 = temp_399[4];
																		{
																			a_396.push(this.unique(name_400, arg));
																			types_398.push(t_401);
																			if (expr_402 != null) { defaults_397.push(this.nodeToExpression(expr_402)) } else defaults_397.push(null);
																		};
																	}
																} break;
																};
															};
															type_363.staticMethods.push(/*Function*/[7,uname_394,this.unwrapNestingBlocks(this.nodeToStatement(expr_390)),a_396,defaults_397,this.typer.types.get(field_380)]);
														};
													}
												} break;
												
												default: 
												console.error('(internal warning) Unknown simple enum static field kind:', field_380)
												};
											};
										}
									} break;
									
									default: 
									console.error('(internal warning) Unknown simple enum field kind:', f)
									};
								};
								type_363.names = names_364;
								type_363.values = values_365;
								this.project.enumsSimple.push(type_363);
								return null;
							};
						};
					}
				} break;
				
				case 25: {
					{
						const t_404 = temp_313[1];
						const ext_405 = temp_313[2];
						const impl_406 = temp_313[3];
						const fields_407 = temp_313[4];
						const external_408 = temp_313[5];
						{
							this.renameClassFields(fields_407);
							const type_409 = new NiceClass();
							{
								const temp_410 = this.typer.types.get(e_312);
								switch (temp_410&&temp_410[0]) {
								case 3: {
									{
										const the = temp_410[1];
										type_409.useless = the.useless;
									}
								} break;
								};
							};
							type_409.external = external_408;
							type_409.extend = DataHelper.extractTypeName(ext_405);
							for (const implement of $toIterator(impl_406)) {
								const temp_411 = implement;
								switch (temp_411&&temp_411[0]) {
								case 1: {
									{
										const name_412 = temp_411[1];
										type_409.implement = name_412;
									}
								} break;
								
								case 2: {
									{
										const name_413 = temp_411[1];
										const params = temp_411[2];
										{
											type_409.implement = name_413;
											type_409.implementParams = (() => {
												const result_414 = [];
												const value_415 = params;
												for (const param of $toIterator(value_415)) result_414.push(DataHelper.extractTypeName(param));
												return result_414;
											})();
										};
									}
								} break;
								};
							};
							{
								const temp_416 = t_404;
								switch (temp_416&&temp_416[0]) {
								case 1: {
									{
										const name_417 = temp_416[1];
										{
										};
									}
								} break;
								
								case 2: {
									{
										const name_418 = temp_416[1];
										const params_419 = temp_416[2];
										type_409.genericParams = (() => {
											const result_420 = [];
											const value_421 = params_419;
											for (const param of $toIterator(value_421)) result_420.push(DataHelper.extractTypeName(param));
											return result_420;
										})();
									}
								} break;
								};
							};
							const atts_422 = Project.mapAttributes.get(e_312);
							const require_423 = Normalizer.getAtt(atts_422, 'require');
							if (require_423 != null) {
								const temp_424 = require_423.values[0];
								switch (temp_424&&temp_424[0]) {
								case 0: {
									{
										const s_425 = temp_424[1];
										type_409.jsRequire = s_425;
									}
								} break;
								
								default: 
								throw '@require takes string as argument'
								};
							};
							const native_426 = Normalizer.getAtt(atts_422, 'native');
							if (native_426 != null) {
								const temp_427 = native_426.values[0];
								switch (temp_427&&temp_427[0]) {
								case 0: {
									{
										const s_428 = temp_427[1];
										{
											type_409.jsNative = s_428;
											type_409.name = this.unique(s_428, e_312);
										};
									}
								} break;
								
								default: 
								throw '@native takes string as argument'
								};
							} else type_409.name = this.unique(DataHelper.extractTypeName(t_404), e_312);
							this.globals.push(type_409.name);
							for (const f of $toIterator(fields_407)) {
								const temp_429 = f;
								switch (temp_429&&temp_429[0]) {
								case 23: {
									{
										const name_430 = temp_429[1];
										const t_431 = temp_429[2];
										const expr_432 = temp_429[3];
										const const_433 = temp_429[4];
										{
											const uname_434 = (() => {
												const result_435 = this.parentNames.get(f);
												if (result_435 != null) { return result_435 };
												return this.unique(name_430, f);
											})();
											if (const_433) {
												const value_436 = this.nodeToExpression(expr_432);
												this.saveInlineIfViable(f, value_436);
												type_409.vars.push(/*Const*/[6,uname_434,value_436,this.typer.types.get(f)]);
											} else type_409.vars.push(/*Var*/[5,uname_434,this.nodeToExpression(expr_432),this.typer.types.get(f)]);
										};
									}
								} break;
								
								case 26: {
									{
										const field_437 = temp_429[1];
										{
											const temp_438 = field_437;
											switch (temp_438&&temp_438[0]) {
											case 23: {
												{
													const name_439 = temp_438[1];
													const t_440 = temp_438[2];
													const expr_441 = temp_438[3];
													const const_442 = temp_438[4];
													{
														const uname_443 = (() => {
															const result_444 = this.parentNames.get(f);
															if (result_444 != null) { return result_444 };
															return this.unique(name_439, f);
														})();
														if (const_442) { type_409.vars.push(/*Const*/[6,uname_443,this.nodeToExpression(expr_441),this.typer.types.get(field_437)]) } else type_409.vars.push(/*Var*/[5,uname_443,this.nodeToExpression(expr_441),this.typer.types.get(field_437)]);
														type_409.property.push(uname_443);
													};
												}
											} break;
											};
										};
									}
								} break;
								
								case 21: {
									{
										const name_445 = temp_429[1];
										const expr_446 = temp_429[2];
										const vars_447 = temp_429[3];
										const rettype_448 = temp_429[4];
										const external_449 = temp_429[5];
										{
											const uname_450 = ((name_445 == 'new'))? ('new') : ((() => {
												const result_451 = this.parentNames.get(f);
												if (result_451 != null) { return result_451 };
												return this.unique(name_445, f);
											})());
											const a_452 = [];
											const defaults_453 = [];
											const types_454 = [];
											for (const arg of $toIterator(vars_447)) {
												const temp_455 = arg;
												switch (temp_455&&temp_455[0]) {
												case 23: {
													{
														const name_456 = temp_455[1];
														const t_457 = temp_455[2];
														const expr_458 = temp_455[3];
														const const_459 = temp_455[4];
														{
															a_452.push(this.unique(name_456, arg));
															types_454.push(t_457);
															if (expr_458 != null) { defaults_453.push(this.nodeToExpression(expr_458)) } else defaults_453.push(null);
														};
													}
												} break;
												};
											};
											type_409.methods.push(/*Function*/[7,uname_450,this.unwrapNestingBlocks(this.nodeToStatement(expr_446)),a_452,defaults_453,this.typer.types.get(f)]);
										};
									}
								} break;
								
								case 43: {
									{
										const field_460 = temp_429[1];
										{
											const temp_461 = field_460;
											switch (temp_461&&temp_461[0]) {
											case 23: {
												{
													const name_462 = temp_461[1];
													const t_463 = temp_461[2];
													const expr_464 = temp_461[3];
													const const_465 = temp_461[4];
													{
														const uname_466 = (() => {
															const result_467 = this.parentNames.get(field_460);
															if (result_467 != null) { return result_467 };
															return this.unique(name_462, field_460);
														})();
														if (const_465) {
															const value_468 = this.nodeToExpression(expr_464);
															this.saveInlineIfViable(f, value_468);
															type_409.staticVars.push(/*Const*/[6,uname_466,value_468,this.typer.types.get(field_460)]);
														} else type_409.staticVars.push(/*Var*/[5,uname_466,this.nodeToExpression(expr_464),this.typer.types.get(field_460)]);
													};
												}
											} break;
											
											case 21: {
												{
													const name_469 = temp_461[1];
													const expr_470 = temp_461[2];
													const vars_471 = temp_461[3];
													const rettype_472 = temp_461[4];
													{
														const uname_473 = (() => {
															const result_474 = this.parentNames.get(field_460);
															if (result_474 != null) { return result_474 };
															return this.unique(name_469, field_460);
														})();
														const a_475 = [];
														const defaults_476 = [];
														const types_477 = [];
														for (const arg of $toIterator(vars_471)) {
															const temp_478 = arg;
															switch (temp_478&&temp_478[0]) {
															case 23: {
																{
																	const name_479 = temp_478[1];
																	const t_480 = temp_478[2];
																	const expr_481 = temp_478[3];
																	const const_482 = temp_478[4];
																	{
																		a_475.push(this.unique(name_479, arg));
																		types_477.push(t_480);
																		if (expr_481 != null) { defaults_476.push(this.nodeToExpression(expr_481)) } else defaults_476.push(null);
																	};
																}
															} break;
															};
														};
														type_409.staticMethods.push(/*Function*/[7,uname_473,this.unwrapNestingBlocks(this.nodeToStatement(expr_470)),a_475,defaults_476,this.typer.types.get(field_460)]);
													};
												}
											} break;
											
											default: 
											console.error('(internal warning) Unknown class static field kind:', field_460)
											};
										};
									}
								} break;
								
								default: 
								console.error('(internal warning) Unknown class field kind:', f)
								};
							};
							this.project.classes.push(type_409);
							return null;
						};
					}
				} break;
				
				case 8: {
					{
					}
				} break;
				
				case 30: {
					{
						const path_483 = temp_313[1];
						const t_484 = temp_313[2];
						const args_485 = temp_313[3];
						const fields_486 = temp_313[4];
						const values_487 = temp_313[5];
						{
							const v_488 = /*Ident*/[5,(() => {
								const result_489 = this.parentNames.get(this.typer.parents.get(e_312));
								if (result_489 != null) { return result_489 };
								return DataHelper.extractTypeName(t_484);
							})(),null];
							const a_490 = [];
							for (const arg of $toIterator(args_485)) {
								a_490.push(this.nodeToExpression(arg));
							};
							const resultType_491 = this.typer.types.get(e_312);
							if (fields_486.length > 0) {
								const temp_492 = this.unique('temp');
								const block_493 = [/*Const*/[6,temp_492,/*New*/[10,v_488,a_490],resultType_491]];
								{
									let field_494 = 0;
									let it = 0;
									let at = fields_486.length;
									while (it < at) {
										field_494 = it;
										it++;
										block_493.push(/*Assign*/[12,/*Dot*/[8,/*Ident*/[5,temp_492,resultType_491],fields_486[field_494],null],this.nodeToExpression(values_487[field_494]),null]);
									};
								};
								return /*Block*/[1,block_493];
							};
							const result_495 = /*New*/[3,v_488,a_490];
							return result_495;
						};
					}
				} break;
				
				case 12: {
					{
						const e_496 = temp_313[1];
						const args_497 = temp_313[2];
						const argNames_498 = temp_313[3];
						{
							let kind_499 = 11;
							{
								const temp_500 = e_496;
								switch (temp_500&&temp_500[0]) {
								case 4: {
									{
										const a_501 = [];
										for (const arg of $toIterator(args_497)) {
											a_501.push(this.nodeToExpression(arg));
										};
										return /*SuperConstructor*/[22,a_501];
									}
								} break;
								
								case 28: {
									{
										const expr_502 = temp_500[1];
										{
											const temp_503 = this.typer.types.get(expr_502);
											switch (temp_503&&temp_503[0]) {
											case 4: {
												kind_499 = 12
											} break;
											
											case 3: {
												kind_499 = 10
											} break;
											};
										};
									}
								} break;
								};
							};
							const v_504 = this.nodeToExpression(e_496);
							const a_505 = [];
							for (const arg of $toIterator(args_497)) {
								a_505.push(this.nodeToExpression(arg));
							};
							let expects = [];
							{
								const temp_506 = this.typer.types.get(e_496);
								switch (temp_506&&temp_506[0]) {
								case 10: {
									{
										const args_507 = temp_506[1];
										expects = args_507;
									}
								} break;
								};
							};
							{
								const temp_508 = v_504;
								switch (temp_508&&temp_508[0]) {
								case 8: {
									{
										const expr_509 = temp_508[1];
										{
											const temp_510 = expr_509;
											switch (temp_510&&temp_510[0]) {
											case 7: {
												kind_499 = 12
											} break;
											};
										};
									}
								} break;
								};
							};
							return /*Call*/[2,v_504,a_505,expects,kind_499];
						};
					}
				} break;
				
				case 23: {
					{
						const name_511 = temp_313[1];
						const t_512 = temp_313[2];
						const expr_513 = temp_313[3];
						const const_514 = temp_313[4];
						const external_515 = temp_313[5];
						{
							const uname_516 = (() => {
								const result_517 = this.parentNames.get(e_312);
								if (result_517 != null) { return result_517 };
								return this.unique(name_511, e_312);
							})();
							if (external_515) { return null };
							if (const_514) {
								const value_518 = this.nodeToExpression(expr_513);
								this.saveInlineIfViable(e_312, value_518);
								return /*Const*/[6,uname_516,value_518,this.typer.types.get(e_312)];
							};
							return /*Var*/[5,uname_516,this.nodeToExpression(expr_513),this.typer.types.get(e_312)];
						};
					}
				} break;
				
				case 21: {
					{
						const name_519 = temp_313[1];
						const expr_520 = temp_313[2];
						const vars_521 = temp_313[3];
						const rettype_522 = temp_313[4];
						const external_523 = temp_313[5];
						{
							const uname_524 = ((name_519 != null))? (((() => {
								const result_525 = this.parentNames.get(e_312);
								if (result_525 != null) { return result_525 };
								return this.unique(name_519, e_312);
							})())) : (null);
							if (external_523) { return null };
							let rettype_526 = rettype_522;
							const a_527 = [];
							const defaults_528 = [];
							let types_529 = [];
							for (const arg of $toIterator(vars_521)) {
								const temp_530 = arg;
								switch (temp_530&&temp_530[0]) {
								case 23: {
									{
										const name_531 = temp_530[1];
										const t_532 = temp_530[2];
										const expr_533 = temp_530[3];
										const const_534 = temp_530[4];
										{
											a_527.push(this.unique(name_531, arg));
											types_529.push(t_532);
											if (expr_533 != null) { defaults_528.push(this.nodeToExpression(expr_533)) } else defaults_528.push(null);
										};
									}
								} break;
								};
							};
							if (name_519 == 'new') { return /*Function*/[7,null,this.unwrapNestingBlocks(this.nodeToStatement(expr_520)),a_527,defaults_528,this.typer.types.get(e_312)] };
							return /*Function*/[7,uname_524,this.unwrapNestingBlocks(this.nodeToStatement(expr_520)),a_527,defaults_528,this.typer.types.get(e_312)];
						};
					}
				} break;
				
				case 46: {
					{
						const name_535 = temp_313[1];
						const over_536 = temp_313[2];
						const by_537 = temp_313[3];
						const range_538 = temp_313[4];
						{
							if (range_538 == null) {
								const temp_539 = over_536;
								switch (temp_539&&temp_539[0]) {
								case 5: {
									{
										const s_540 = temp_539[1];
										{
											const i_541 = this.unique(name_535, e_312);
											const it_542 = this.unique('it');
											return /*Block*/[1,[/*Var*/[5,i_541,/*Int*/[1,0],this.typer.typeInt], /*Var*/[5,it_542,/*Int*/[1,0],this.typer.typeInt], /*While*/[16,/*Binop*/[11,/*Ident*/[5,it_542,this.typer.typeInt],99,/*Int*/[1,s_540],this.typer.typeBool],/*Block*/[1,[/*Assign*/[12,/*Ident*/[5,i_541,this.typer.typeInt],/*Ident*/[5,it_542,this.typer.typeInt],null], /*Increment*/[17,/*Ident*/[5,it_542,this.typer.typeInt]], this.nodeToStatement(by_537)]],true]]];
										};
									}
								} break;
								
								default: 
								{
									let iteratorOverInt = false;
									{
										const temp_543 = this.typer.types.get(over_536);
										switch (temp_543&&temp_543[0]) {
										case 4: {
											{
												const type_544 = temp_543[1];
												const generic = temp_543[2];
												if ((generic == null || generic.length == 0) && (type_544.name == 'Int')) { iteratorOverInt = true };
											}
										} break;
										};
									};
									if (iteratorOverInt) {
										const i_545 = this.unique(name_535, e_312);
										const it_546 = this.unique('it');
										const finish = this.unique('at');
										return /*Block*/[1,[/*Var*/[5,i_545,/*Int*/[1,0],this.typer.typeInt], /*Var*/[5,it_546,/*Int*/[1,0],this.typer.typeInt], /*Var*/[5,finish,this.nodeToExpression(over_536),this.typer.types.get(over_536)], /*While*/[16,/*Binop*/[11,/*Ident*/[5,it_546,this.typer.typeInt],99,/*Ident*/[5,finish,this.typer.types.get(over_536)],this.typer.typeBool],/*Block*/[1,[/*Assign*/[12,/*Ident*/[5,i_545,this.typer.typeInt],/*Ident*/[5,it_546,this.typer.typeInt],null], /*Increment*/[17,/*Ident*/[5,it_546,this.typer.typeInt]], this.nodeToStatement(by_537)]],true]]];
									};
								}
								};
							};
							{
								let step_547 = 0;
								const range_548 = range_538;
								if (step_547 == 0 && range_548 != null) { step_547 = 1 };
								if (step_547 == 1) {
									const i_549 = this.unique(name_535, e_312);
									const it_550 = this.unique('it');
									const finish_551 = this.unique('at');
									return /*Block*/[1,[/*Var*/[5,i_549,/*Int*/[1,0],this.typer.typeInt], /*Var*/[5,it_550,this.nodeToExpression(over_536),this.typer.typeInt], /*Var*/[5,finish_551,this.nodeToExpression(range_548),this.typer.typeInt], /*While*/[16,/*Binop*/[11,/*Ident*/[5,it_550,this.typer.typeInt],99,/*Ident*/[5,finish_551,this.typer.typeInt],this.typer.typeBool],/*Block*/[1,[/*Assign*/[12,/*Ident*/[5,i_549,this.typer.typeInt],/*Ident*/[5,it_550,this.typer.typeInt],null], /*Increment*/[17,/*Ident*/[5,it_550,this.typer.typeInt]], this.nodeToStatement(by_537)]],true]]];
								};
							};
							return /*For*/[15,name_535,this.nodeToExpression(over_536),this.nodeToStatement(by_537)];
						};
					}
				} break;
				
				case 15: {
					{
						const e_552 = temp_313[1];
						{
							if (e_552 == null) { return /*Return*/[8,null] };
							return /*Return*/[8,this.nodeToExpression(e_552)];
						};
					}
				} break;
				
				case 28: {
					{
						const expr_553 = temp_313[1];
						const name_554 = temp_313[2];
						return /*Dot*/[14,this.nodeToExpression(expr_553),name_554];
					}
				} break;
				
				case 29: {
					{
						const expr_555 = temp_313[1];
						const name_556 = temp_313[2];
						return /*Dot*/[14,this.nodeToExpression(expr_555),name_556];
					}
				} break;
				
				case 13: {
					{
						const econd_557 = temp_313[1];
						const eif_558 = temp_313[2];
						const eelse_559 = temp_313[3];
						{
							let binds_560 = false;
							for (const cond of $toIterator(econd_557)) {
								const temp_561 = cond;
								switch (temp_561&&temp_561[0]) {
								case 23: {
									binds_560 = true
								} break;
								};
							};
							if ((!binds_560) && econd_557.length == 1) { return /*If*/[9,this.nodeToExpression(econd_557[0]),this.nodeToStatement(eif_558),this.nodeToStatement(eelse_559)] };
							if ((!binds_560)) {
								let parens_562 = /*Parenthesis*/[14,this.nodeToExpression(econd_557[0])];
								let i_563 = 1;
								while (i_563 < econd_557.length) {
									parens_562 = /*Binop*/[11,parens_562,92,/*Parenthesis*/[14,this.nodeToExpression(econd_557[i_563])],this.typer.typeBool];
									i_563++;
								};
								return /*If*/[9,parens_562,this.nodeToStatement(eif_558),this.nodeToStatement(eelse_559)];
							};
							const block_564 = [];
							let current = 0;
							const step_565 = this.unique('step');
							block_564.push(/*Var*/[5,step_565,/*Int*/[1,0],this.typer.typeInt]);
							let nullable_566 = false;
							let last = '';
							const lastType = this.typer.types.get(econd_557[0]);
							{
								const temp_567 = econd_557[0];
								switch (temp_567&&temp_567[0]) {
								case 23: {
									{
										const name_568 = temp_567[1];
										const t_569 = temp_567[2];
										const expr_570 = temp_567[3];
										const const_571 = temp_567[4];
										{
											last = this.unique(name_568, econd_557[0]);
											nullable_566 = true;
											block_564.push(/*Const*/[6,last,this.nodeToExpression(expr_570),this.typer.types.get(econd_557[0])]);
										};
									}
								} break;
								
								default: 
								{
									last = this.unique('temp');
									block_564.push(/*Const*/[6,last,this.nodeToExpression(econd_557[0]),this.typer.types.get(econd_557[0])]);
								}
								};
							};
							while (current < econd_557.length - 1) {
								const temp_572 = econd_557[current + 1];
								switch (temp_572&&temp_572[0]) {
								case 23: {
									{
										const vname = temp_572[1];
										const t_573 = temp_572[2];
										const expr_574 = temp_572[3];
										const const_575 = temp_572[4];
										{
											const name_576 = this.unique(vname, econd_557[current + 1]);
											block_564.push(/*Var*/[5,name_576,/*Null*/[6],this.typer.types.get(expr_574)]);
											block_564.push(/*If*/[9,/*Binop*/[11,/*Binop*/[11,/*Ident*/[5,step_565,this.typer.typeInt],95,/*Int*/[1,current + 0],this.typer.typeBool],92,/*Binop*/[11,/*Ident*/[5,last,lastType],103,(nullable_566)? (/*Null*/[6]) : /*False*/[4],this.typer.typeBool],this.typer.typeBool],/*Block*/[1,[/*Assign*/[12,/*Ident*/[5,name_576,this.typer.types.get(expr_574)],this.nodeToExpression(expr_574),null], /*Assign*/[12,/*Ident*/[5,step_565,this.typer.typeInt],/*Int*/[1,current + 1],null]]],null]);
											current++;
											last = name_576;
											nullable_566 = true;
										};
									}
								} break;
								
								default: 
								{
									const next = this.unique('temp');
									const nextType = this.typer.types.get(econd_557[0]);
									block_564.push(/*Var*/[5,next,/*Null*/[6],nextType]);
									block_564.push(/*If*/[9,/*Binop*/[11,/*Binop*/[11,/*Ident*/[5,step_565,this.typer.typeInt],95,/*Int*/[1,current + 0],this.typer.typeBool],92,/*Binop*/[11,/*Ident*/[5,last,lastType],103,(nullable_566)? (/*Null*/[6]) : /*False*/[4],this.typer.typeBool],this.typer.typeBool],/*Block*/[1,[/*Assign*/[12,/*Ident*/[5,next,nextType],this.nodeToExpression(econd_557[current + 1]),null], /*Assign*/[12,/*Ident*/[5,step_565,this.typer.typeInt],/*Int*/[1,current + 1],null]]],null]);
									current++;
									last = next;
									nullable_566 = false;
								}
								};
							};
							block_564.push(/*If*/[9,/*Binop*/[11,/*Binop*/[11,/*Ident*/[5,step_565,this.typer.typeInt],95,/*Int*/[1,econd_557.length - 1],this.typer.typeBool],92,/*Binop*/[11,/*Ident*/[5,last,lastType],103,(nullable_566)? (/*Null*/[6]) : /*False*/[4],this.typer.typeBool],this.typer.typeBool],/*Assign*/[12,/*Ident*/[5,step_565,this.typer.typeInt],/*Int*/[1,econd_557.length],null],null]);
							block_564.push(/*If*/[9,/*Binop*/[11,/*Ident*/[5,step_565,this.typer.typeInt],95,/*Int*/[1,econd_557.length],this.typer.typeBool],this.nodeToStatement(eif_558),this.nodeToStatement(eelse_559)]);
							return /*Block*/[1,block_564];
						};
					}
				} break;
				
				case 27: {
					{
						const expr_577 = temp_313[1];
						const t_578 = temp_313[2];
						const v_579 = temp_313[3];
						const catches = temp_313[4];
						{
							let temp_580 = this.unique('temp');
							let tt = [];
							let vv = [];
							for (const c of $toIterator(v_579)) vv.push(DataHelper.nameOf(c));
							let cc = [];
							for (const c of $toIterator(catches)) cc.push(this.nodeToStatement(c));
							for (const c of $toIterator(t_578)) tt.push(this.typer.types.get(c));
							return /*Try*/[10,this.nodeToStatement(expr_577),tt,vv,cc,temp_580];
						};
					}
				} break;
				
				case 16: {
					{
						const value_581 = temp_313[1];
						return /*Throw*/[11,this.nodeToExpression(value_581)];
					}
				} break;
				
				case 10: {
					{
						const a_582 = temp_313[1];
						const op_583 = temp_313[2];
						const b_584 = temp_313[3];
						return /*Assignop*/[13,this.nodeToExpression(a_582),op_583,this.nodeToExpression(b_584)];
					}
				} break;
				
				case 9: {
					{
						const a_585 = temp_313[1];
						const op_586 = temp_313[2];
						const b_587 = temp_313[3];
						{
							const temp_588 = op_586;
							switch (temp_588) {
							case 91: {
								return /*Assign*/[12,this.nodeToExpression(a_585),this.nodeToExpression(b_587),null]
							} break;
							
							default: 
							{
								const sa_589 = this.nodeToStatement(a_585);
								const sb_590 = this.nodeToStatement(b_587);
								if ((sa_589 == null) && (sb_590 == null)) { return null };
								if ((sa_589 == null) || (sb_590 == null)) { return (() => {
									const result_591 = sa_589;
									if (result_591 != null) { return result_591 };
									return sb_590;
								})() };
								return /*Statements*/[0,[sa_589, sb_590]];
							}
							};
						};
					}
				} break;
				
				case 18: {
					return /*Continue*/[20]
				} break;
				
				case 17: {
					return /*Break*/[21]
				} break;
				
				case 20: {
					{
						const econd_592 = temp_313[1];
						const e_593 = temp_313[2];
						const pre = temp_313[3];
						return /*While*/[16,this.nodeToExpression(econd_592),this.nodeToStatement(e_593),pre];
					}
				} break;
				
				case 19: {
					{
						const op_594 = temp_313[1];
						const postfix_595 = temp_313[2];
						const e_596 = temp_313[3];
						{
							const temp_597 = op_594;
							switch (temp_597) {
							case 87: {
								return /*Increment*/[17,this.nodeToExpression(e_596)]
							} break;
							
							case 86: {
								return /*Decrement*/[18,this.nodeToExpression(e_596)]
							} break;
							
							default: 
							{
							}
							};
						};
					}
				} break;
				
				case 14: {
					{
						const inner_598 = temp_313[1];
						{
							const unwrapNestedParens_599 = (inner_600) => {
								const temp_601 = inner_600;
								switch (temp_601&&temp_601[0]) {
								case 14: {
									{
										const i_602 = temp_601[1];
										return unwrapNestedParens_599(i_602);
									}
								} break;
								
								default: 
								return inner_600
								};
							};
							return this.nodeToStatement(unwrapNestedParens_599(inner_598));
						};
					}
				} break;
				
				case 34: {
					{
						const exprs_603 = temp_313[1];
						const conds_604 = temp_313[2];
						const guards_605 = temp_313[3];
						const cases_606 = temp_313[4];
						{
							if (exprs_603.length > 1) { console.error('Multiple switch values not yet supported:', e_312, Project.data.get(e_312)) };
							const s_607 = [];
							const c = [];
							if (this.nativeEnums) {
								const index_608 = this.nodeToExpression(exprs_603[0]);
								{
									let i_609 = 0;
									let it_610 = 0;
									let at_611 = cases_606.length;
									while (it_610 < at_611) {
										i_609 = it_610;
										it_610++;
										{
											const toCase = (co) => {
												const temp_612 = co;
												switch (temp_612&&temp_612[0]) {
												case 7: {
													return /*Null*/[6]
												} break;
												
												case 42: {
													return /*Underscore*/[29]
												} break;
												
												case 0: {
													{
														const v_613 = temp_612[1];
														return /*String*/[0,v_613];
													}
												} break;
												
												case 5: {
													{
														const v_614 = temp_612[1];
														return /*Int*/[1,v_614];
													}
												} break;
												
												case 6: {
													{
														const v_615 = temp_612[1];
														return /*Float*/[2,v_615];
													}
												} break;
												
												case 2: {
													{
														const v_616 = temp_612[1];
														{
															if (v_616) { return /*True*/[3] };
															return /*False*/[4];
														};
													}
												} break;
												
												case 28: {
													{
														const expr_617 = temp_612[1];
														const name_618 = temp_612[2];
														return /*Dot*/[8,this.nodeToExpression(expr_617),name_618,null];
													}
												} break;
												
												case 29: {
													{
														const expr_619 = temp_612[1];
														const name_620 = temp_612[2];
														return /*Dot*/[8,this.nodeToExpression(expr_619),name_620,null];
													}
												} break;
												
												case 9: {
													{
														const a_621 = temp_612[1];
														const op_622 = temp_612[2];
														const b_623 = temp_612[3];
														{
															const temp_624 = op_622;
															switch (temp_624) {
															case 104: {
																return /*Binop*/[11,toCase(a_621),104,toCase(b_623),null]
															} break;
															
															default: 
															console.error('(internal warning) Unknown native case binop kind:', e_312, this.typer.parents.get(e_312))
															};
														};
													}
												} break;
												
												case 12: {
													{
														const e_625 = temp_612[1];
														const args_626 = temp_612[2];
														const argNames_627 = temp_612[3];
														{
															const temp_628 = e_625;
															switch (temp_628&&temp_628[0]) {
															case 29: {
																{
																	const expr_629 = temp_628[1];
																	const name_630 = temp_628[2];
																	{
																		const a_631 = [];
																		{
																			let arg = 0;
																			let it_632 = 0;
																			let at_633 = args_626.length;
																			while (it_632 < at_633) {
																				arg = it_632;
																				it_632++;
																				{
																					const temp_634 = args_626[arg];
																					switch (temp_634&&temp_634[0]) {
																					case 1: {
																						{
																							const name_635 = temp_634[1];
																							a_631.push(/*Ident*/[5,this.unique(name_635, args_626[arg]),null]);
																						}
																					} break;
																					
																					case 42: {
																						a_631.push(/*Underscore*/[29])
																					} break;
																					
																					default: 
																					console.log('(internal warning) Unknown native case extract value kind:', args_626[arg])
																					};
																				};
																			};
																		};
																		return /*Call*/[9,this.nodeToExpression(e_625),a_631,null,11];
																	};
																}
															} break;
															
															default: 
															console.error('(internal warning) Unknown case extract kind:', e_625, this.typer.parents.get(e_625))
															};
														};
													}
												} break;
												
												default: 
												console.error('(internal warning) Unknown native enum case kind:', co, Project.data.get(co))
												};
											};
											c.push([toCase(conds_604[i_609])]);
											s_607.push(this.nodeToStatement(cases_606[i_609]));
										};
									};
								};
								return /*Switch*/[19,index_608,c,s_607];
							};
							const temp_636 = this.unique('temp');
							const value_637 = this.nodeToExpression(exprs_603[0]);
							let index_638 = /*Ident*/[5,temp_636,null];
							let promoted = false;
							{
								const temp_639 = this.typer.types.get(exprs_603[0]);
								switch (temp_639&&temp_639[0]) {
								case 6: {
									{
										const type_640 = temp_639[1];
										if (type_640.fieldsTypeSimple == null) {
											index_638 = /*EnumTag*/[26,index_638];
											promoted = true;
										};
									}
								} break;
								
								case 7: {
									{
										const type_641 = temp_639[1];
										if (type_641.fieldsTypeSimple == null) {
											index_638 = /*EnumTag*/[26,index_638];
											promoted = true;
										};
									}
								} break;
								};
							};
							let i_642 = 0;
							for (const ec of $toIterator(cases_606)) {
								const block_643 = [];
								const co_644 = conds_604[i_642];
								const cx = [];
								const addTag = (co_645) => {
									const temp_646 = co_645;
									switch (temp_646&&temp_646[0]) {
									case 7: {
										cx.push(/*Null*/[6])
									} break;
									
									case 42: {
										{
										}
									} break;
									
									case 0: {
										{
											const v_647 = temp_646[1];
											cx.push(/*String*/[0,v_647]);
										}
									} break;
									
									case 5: {
										{
											const v_648 = temp_646[1];
											cx.push(/*Int*/[1,v_648]);
										}
									} break;
									
									case 6: {
										{
											const v_649 = temp_646[1];
											cx.push(/*Float*/[2,v_649]);
										}
									} break;
									
									case 2: {
										{
											const v_650 = temp_646[1];
											if (v_650) { cx.push(/*True*/[3]) } else cx.push(/*False*/[4]);
										}
									} break;
									
									case 12: {
										{
											const e_651 = temp_646[1];
											const args_652 = temp_646[2];
											const argNames_653 = temp_646[3];
											{
												const temp_654 = e_651;
												switch (temp_654&&temp_654[0]) {
												case 29: {
													{
														const expr_655 = temp_654[1];
														const name_656 = temp_654[2];
														{
															const parent_657 = this.typer.parents.get(expr_655);
															const tag_658 = this.getTag(parent_657, name_656);
															cx.push(tag_658);
															if ((!promoted)) { index_638 = /*EnumTag*/[26,index_638] };
															promoted = true;
															{
																let arg_659 = 0;
																let it_660 = 0;
																let at_661 = args_652.length;
																while (it_660 < at_661) {
																	arg_659 = it_660;
																	it_660++;
																	{
																		const temp_662 = args_652[arg_659];
																		switch (temp_662&&temp_662[0]) {
																		case 1: {
																			{
																				const name_663 = temp_662[1];
																				block_643.push(/*Const*/[6,this.unique(name_663, args_652[arg_659]),/*EnumParameter*/[28,/*Ident*/[5,temp_636,this.typer.types.get(args_652[arg_659])],arg_659],this.typer.types.get(args_652[arg_659])]);
																			}
																		} break;
																		
																		case 42: {
																			{
																			}
																		} break;
																		
																		default: 
																		console.log('(internal warning) Unknown case extract value kind:', arg_659)
																		};
																	};
																};
															};
														};
													}
												} break;
												
												default: 
												console.error('(internal warning) Unknown case extract kind:', e_651, this.typer.parents.get(e_651))
												};
											};
										}
									} break;
									
									case 29: {
										{
											const expr_664 = temp_646[1];
											const name_665 = temp_646[2];
											cx.push(this.getTag(this.typer.parents.get(expr_664), name_665));
										}
									} break;
									
									case 9: {
										{
											const a_666 = temp_646[1];
											const op_667 = temp_646[2];
											const b_668 = temp_646[3];
											{
												const temp_669 = op_667;
												switch (temp_669) {
												case 104: {
													{
														addTag(a_666);
														addTag(b_668);
													}
												} break;
												
												default: 
												console.error('(internal warning) Unknown case binop kind:', e_312, this.typer.parents.get(e_312))
												};
											};
										}
									} break;
									
									default: 
									console.error('(internal warning) Unknown case kind:', co_645, Project.data.get(co_645))
									};
								};
								addTag(co_644);
								c.push(cx);
								block_643.push(this.unwrapNestingBlocks(this.nodeToStatement(ec)));
								s_607.push(this.unwrapNestingBlocks(/*Block*/[1,block_643]));
								i_642++;
							};
							return /*Block*/[1,[/*Const*/[6,temp_636,value_637,this.typer.types.get(exprs_603[0])], /*Switch*/[19,index_638,c,s_607]]];
						};
					}
				} break;
				
				case 24: {
					{
						const vars_670 = temp_313[1];
						{
							const s_671 = [];
							for (const v of $toIterator(vars_670)) {
								let step_672 = 0;
								const st = this.nodeToStatement(v);
								if (step_672 == 0 && st != null) { step_672 = 1 };
								if (step_672 == 1) { s_671.push(st) };
							};
							return /*Statements*/[0,s_671];
						};
					}
				} break;
				
				case 33: {
					{
						const v_673 = temp_313[1];
						const index_674 = temp_313[2];
						{
							Project.hints.push(new Hint(10, ('Unused value of index `' + (Node.stringify(e_312)) + '`'), Project.data.get(e_312)));
							{
								const temp_675 = index_674;
								switch (temp_675&&temp_675[0]) {
								case 0: {
									return this.nodeToStatement(v_673)
								} break;
								
								case 5: {
									return this.nodeToStatement(v_673)
								} break;
								
								case 2: {
									return this.nodeToStatement(v_673)
								} break;
								
								case 6: {
									return this.nodeToStatement(v_673)
								} break;
								};
							};
							return /*Statements*/[0,[this.nodeToStatement(v_673), this.nodeToStatement(index_674)]];
						};
					}
				} break;
				
				case 1: {
					{
						const name_676 = temp_313[1];
						Project.hints.push(new Hint(10, ('Unused value `' + (name_676) + '`'), Project.data.get(e_312)));
					}
				} break;
				
				case 22: {
					{
					}
				} break;
				
				case 0: {
					{
						const v_677 = temp_313[1];
						Project.hints.push(new Hint(10, ('Unused string `\"' + (v_677) + '\"`'), Project.data.get(e_312)));
					}
				} break;
				
				case 2: {
					{
						const v_678 = temp_313[1];
						Project.hints.push(new Hint(10, ('Unused boolean `' + (v_678) + '`'), Project.data.get(e_312)));
					}
				} break;
				
				case 5: {
					{
						const v_679 = temp_313[1];
						Project.hints.push(new Hint(10, ('Unused number `' + (v_679) + '`'), Project.data.get(e_312)));
					}
				} break;
				
				case 6: {
					{
						const v_680 = temp_313[1];
						Project.hints.push(new Hint(10, ('Unused float `' + (v_680) + '`'), Project.data.get(e_312)));
					}
				} break;
				
				case 7: {
					Project.hints.push(new Hint(10, 'Unused `null`', Project.data.get(e_312)))
				} break;
				
				default: 
				return /*UnusedExpression*/[4,this.nodeToExpression(e_312)]
				};
			};
			return null;
		};
		getTag(enumNode, name_681) {
			const temp_682 = enumNode;
			switch (temp_682&&temp_682[0]) {
			case 37: {
				{
					const t_683 = temp_682[1];
					const fields_684 = temp_682[2];
					const valuesType_685 = temp_682[3];
					{
						let typed = (null);
						{
							const temp_686 = this.typer.types.get(enumNode);
							switch (temp_686&&temp_686[0]) {
							case 6: {
								{
									const type_687 = temp_686[1];
									typed = type_687;
								}
							} break;
							};
						};
						let i_688 = 0;
						for (const f of $toIterator(fields_684)) {
							{
								const temp_689 = f;
								switch (temp_689&&temp_689[0]) {
								case 48: {
									{
										const t_690 = temp_689[1];
										{
											const temp_691 = t_690;
											switch (temp_691&&temp_691[0]) {
											case 1: {
												{
													const n = temp_691[1];
													{
														if (n == name_681) { if (typed.fieldsTypeSimple == this.typer.typeString) { return /*String*/[0,n] } };
														if (n == name_681) { return /*Int*/[1,i_688] };
													};
												}
											} break;
											};
										};
									}
								} break;
								
								case 12: {
									{
										const e_692 = temp_689[1];
										{
											const temp_693 = e_692;
											switch (temp_693&&temp_693[0]) {
											case 48: {
												{
													const t_694 = temp_693[1];
													{
														const temp_695 = t_694;
														switch (temp_695&&temp_695[0]) {
														case 1: {
															{
																const n_696 = temp_695[1];
																if (n_696 == name_681) { return /*Int*/[1,i_688] };
															}
														} break;
														};
													};
												}
											} break;
											};
										};
									}
								} break;
								
								case 9: {
									{
										const a_697 = temp_689[1];
										const op_698 = temp_689[2];
										const b_699 = temp_689[3];
										{
											const temp_700 = a_697;
											switch (temp_700&&temp_700[0]) {
											case 48: {
												{
													const t_701 = temp_700[1];
													{
														const temp_702 = t_701;
														switch (temp_702&&temp_702[0]) {
														case 1: {
															{
																const n_703 = temp_702[1];
																if (n_703 == name_681) { return this.nodeToExpression(b_699) };
															}
														} break;
														};
													};
												}
											} break;
											};
										};
									}
								} break;
								
								case 43: {
									return null
								} break;
								
								default: 
								console.error('(internal warning) Unknown enum tag kind:', f)
								};
							};
							i_688++;
						};
						throw ('Enum has no tag or field `' + (name_681) + '` ') + t_683;
					};
				}
			} break;
			};
		};
		pushScope() { this.scopes.push((new Map())) };
		popScope() { this.scopes.pop() };
		hasInScope(name_705) {
			for (const scope of $toIterator(this.scopes)) {
				if (scope.get(name_705) != null) { return true };
			};
			return false;
		};
		addToScope(name_706) { this.scopes[this.scopes.length - 1].set(name_706, true) };
		unique(name_707, node) {
			let uname_708 = name_707;
			while (this.hasInScope(uname_708) || (this.keywords.indexOf(uname_708) != (-1)) || (this.globals.indexOf(uname_708) != (-1))) uname_708 = name_707 + '_' + ((++this.id));
			this.addToScope(uname_708);
			if (node != null) { this.parentNames.set(node, uname_708) };
			return uname_708;
		};
		uniqueNative(name_709, node_710) {
			this.addToScope(name_709);
			this.parentNames.set(node_710, name_709);
		};
		fillStatement(e_711) { return this.nodeToStatement(e_711) };
		renameClassFields(fields_712) {
			this.pushScope();
			for (const f of $toIterator(fields_712)) {
				const temp_713 = f;
				switch (temp_713&&temp_713[0]) {
				case 23: {
					{
						const name_714 = temp_713[1];
						const t_715 = temp_713[2];
						const expr_716 = temp_713[3];
						const const_717 = temp_713[4];
						{
							const atts_718 = Project.mapAttributes.get(f);
							const native_719 = Normalizer.getAtt(atts_718, 'native');
							if (native_719 != null) {
								const temp_720 = native_719.values[0];
								switch (temp_720&&temp_720[0]) {
								case 0: {
									{
										const s_721 = temp_720[1];
										if (this.parentNames.get(f) == null) { this.unique(s_721, f) };
									}
								} break;
								
								default: 
								throw '@native takes string as argument'
								};
							} else if (this.parentNames.get(f) == null) { this.unique(name_714, f) };
						};
					}
				} break;
				
				case 21: {
					{
						const name_722 = temp_713[1];
						const expr_723 = temp_713[2];
						const vars_724 = temp_713[3];
						const rettype_725 = temp_713[4];
						if (name_722 == 'new') { this.parentNames.set(f, 'new') } else {
							const atts_726 = Project.mapAttributes.get(f);
							const native_727 = Normalizer.getAtt(atts_726, 'native');
							if (native_727 != null) {
								const temp_728 = native_727.values[0];
								switch (temp_728&&temp_728[0]) {
								case 0: {
									{
										const s_729 = temp_728[1];
										if (this.parentNames.get(f) == null) { this.unique(s_729, f) };
									}
								} break;
								
								default: 
								throw '@native takes string as argument'
								};
							} else if (this.parentNames.get(f) == null) { this.unique(name_722, f) };
						};
					}
				} break;
				
				case 43: {
					{
						const field_730 = temp_713[1];
						{
							const temp_731 = field_730;
							switch (temp_731&&temp_731[0]) {
							case 23: {
								{
									const name_732 = temp_731[1];
									const t_733 = temp_731[2];
									const expr_734 = temp_731[3];
									const const_735 = temp_731[4];
									if (this.parentNames.get(field_730) == null) { this.unique(name_732, field_730) };
								}
							} break;
							
							case 21: {
								{
									const name_736 = temp_731[1];
									const expr_737 = temp_731[2];
									const vars_738 = temp_731[3];
									const rettype_739 = temp_731[4];
									{
										const atts_740 = Project.mapAttributes.get(f);
										const native_741 = Normalizer.getAtt(atts_740, 'native');
										if (native_741 != null) {
											const temp_742 = native_741.values[0];
											switch (temp_742&&temp_742[0]) {
											case 0: {
												{
													const s_743 = temp_742[1];
													if (this.parentNames.get(field_730) == null) { this.unique(s_743, field_730) };
												}
											} break;
											
											default: 
											throw '@native takes string as argument'
											};
										} else if (this.parentNames.get(field_730) == null) { this.unique(name_736, field_730) };
									};
								}
							} break;
							};
						};
					}
				} break;
				};
			};
			this.popScope();
		};
		getClassDotField(expr_744, name_745) {
			{
				const temp_746 = expr_744;
				switch (temp_746&&temp_746[0]) {
				case 25: {
					{
						const t_747 = temp_746[1];
						const ext_748 = temp_746[2];
						const impl_749 = temp_746[3];
						const fields_750 = temp_746[4];
						const external_751 = temp_746[5];
						for (const f of $toIterator(fields_750)) {
							const temp_752 = f;
							switch (temp_752&&temp_752[0]) {
							case 43: {
								{
									const sf = temp_752[1];
									if (DataHelper.nameOf(sf) == name_745) { return (() => {
										const result_753 = this.parentNames.get(sf);
										if (result_753 != null) { return result_753 };
										return name_745;
									})() };
								}
							} break;
							
							case 23: {
								{
									const n_754 = temp_752[1];
									if (n_754 == name_745) { return (() => {
										const result_755 = this.parentNames.get(f);
										if (result_755 != null) { return result_755 };
										return name_745;
									})() };
								}
							} break;
							};
						};
					}
				} break;
				
				case 37: {
					{
						const t_756 = temp_746[1];
						const fields_757 = temp_746[2];
						const valuesType_758 = temp_746[3];
						for (const f of $toIterator(fields_757)) {
							const temp_759 = f;
							switch (temp_759&&temp_759[0]) {
							case 43: {
								{
									const sf_760 = temp_759[1];
									if (DataHelper.nameOf(sf_760) == name_745) { return (() => {
										const result_761 = this.parentNames.get(sf_760);
										if (result_761 != null) { return result_761 };
										return name_745;
									})() };
								}
							} break;
							};
						};
					}
				} break;
				};
			};
			return null;
		};
		unwrapNestingBlocks(block_762) {
			const temp_763 = block_762;
			switch (temp_763&&temp_763[0]) {
			case 1: {
				{
					const el_764 = temp_763[1];
					{
						if (el_764.length == 1) { return this.unwrapNestingBlocks(el_764[0]) };
						return block_762;
					};
				}
			} break;
			
			default: 
			return block_762
			};
		};
		saveInlineIfViable(e_765, value_766) {
			const temp_767 = value_766;
			switch (temp_767&&temp_767[0]) {
			case 1: {
				this.inline.set(e_765, value_766)
			} break;
			
			case 0: {
				this.inline.set(e_765, value_766)
			} break;
			
			case 2: {
				this.inline.set(e_765, value_766)
			} break;
			
			case 3: {
				this.inline.set(e_765, value_766)
			} break;
			
			case 4: {
				this.inline.set(e_765, value_766)
			} break;
			
			case 6: {
				this.inline.set(e_765, value_766)
			} break;
			};
		};
	}
	Normalizer.getAtt = (atts_704, atname) => {
			if (atts_704 != null && atts_704.length > 0) { for (const att of $toIterator(atts_704)) {
				if (att.name == atname) { return att };
			} };
			return null;
		};
	var Typer = class {
		constructor() { 
			this.scopes = [new Map()]
			this.parents = new Map()
			this.types = new Map()
			this.typeString = null
			this.typeInt = null
			this.typeFloat = null
			this.typeBool = null
			this.typeArray = null
			this.typeMap = (null)
			this.typeAny = null
			this.typeVoid = null
			this.namespaces = new Map()
			this.functionAllowedToThrow = false
			this.functionThrows = false
			this.insideTry = false
			this.insideFunction = false
			this.allowBreakAndContinue = false
			this.functionReturnsAType = null
			this.functionActuallyReturns = false
			this.insideClassMethod = false
			this.allowSuper = false
			this.thisType = (null)
		{
		} };
		fillFiles(collected) {
			const fillModuleNamespace = (m) => {
				let el_768 = (null);
				let root = null;
				{
					const temp_769 = m;
					switch (temp_769&&temp_769[0]) {
					case 35: {
						{
							const path_770 = temp_769[1];
							const els_771 = temp_769[2];
							{
								el_768 = els_771;
								root = path_770.join('.');
							};
						}
					} break;
					
					default: 
					throw 'Unreachable #2'
					};
				};
				if (this.namespaces.get(root) == null) { this.namespaces.set(root, m) } else {
					let els_772 = (null);
					{
						const temp_773 = this.namespaces.get(root);
						switch (temp_773&&temp_773[0]) {
						case 35: {
							{
								const el_774 = temp_773[2];
								els_772 = el_774;
							}
						} break;
						
						default: 
						throw 'Unreachable #1'
						};
					};
					while (el_768.length > 0) els_772.push(el_768.pop());
				};
				{
					let els_775 = (null);
					{
						const temp_776 = this.namespaces.get(root);
						switch (temp_776&&temp_776[0]) {
						case 35: {
							{
								const el_777 = temp_776[2];
								els_775 = el_777;
							}
						} break;
						
						default: 
						throw 'Unreachable #4'
						};
					};
					for (const e of $toIterator(els_775)) {
						let name_778 = this.nameOfModuleItem(e);
						let found = false;
						for (const el of $toIterator(els_775)) {
							if (this.nameOfModuleItem(el) == name_778) {
								if (found) { Typer.fail(('The `' + (name_778) + '` already exists in module\n') + Typer.positionOf(el) + ('`' + (name_778) + '` is defined here'), e) };
								if ((!found)) { found = true };
							};
						};
					};
				};
			};
			for (const file of $toIterator(collected)) {
				let didInit = false;
				let lastOne = file[0];
				for (const e of $toIterator(file)) {
					const temp_779 = e;
					switch (temp_779&&temp_779[0]) {
					case 35: {
						{
							const path_780 = temp_779[1];
							const el_781 = temp_779[2];
							{
								if (didInit) { Typer.fail('Modules should follow before expressions\n' + Typer.positionOf(lastOne) + 'Expression is here', e) };
								fillModuleNamespace(e);
							};
						}
					} break;
					
					default: 
					{
						lastOne = e;
						didInit = true;
					}
					};
				};
			};
			let intermediate = [];
			{
				let intermediateSubs = [];
				for (const ns of $toIterator(this.namespaces.keys())) {
					let path_782 = ns.split('.');
					let namespace = path_782.shift();
					const check = (namespace_783) => { if (this.namespaces.get(namespace_783) == null && intermediate.indexOf(namespace_783) == (-1)) { intermediate.push(namespace_783) } };
					check(namespace);
					while (path_782.length > 0) {
						namespace += '.' + path_782.shift();
						check(namespace);
					};
				};
				for (const path of $toIterator(intermediate)) {
					let m_784 = /*TModule*/[35,path.split('.'),[]];
					this.namespaces.set(path, m_784);
				};
			};
			const findBasicType = (name_785, callback_786) => {
				const subj = this.findInNamespaceRoots(name_785);
				if (subj == null) { Typer.fail(('Cannot find basic type `' + (name_785) + '`. This type should be a part of standard library of the compilation target.')) };
				return this.registerClassType(subj, callback_786);
			};
			findBasicType('Int', (type_787) => { this.typeInt = type_787.instantiate() });
			findBasicType('Bool', (type_788) => { this.typeBool = type_788.instantiate() });
			findBasicType('Float', (type_789) => { this.typeFloat = type_789.instantiate() });
			findBasicType('String', (type_790) => { this.typeString = type_790.instantiate() });
			findBasicType('Array', (type_791) => { this.typeArray = type_791 });
			findBasicType('Map', (type_792) => { this.typeMap = type_792 });
			findBasicType('Any', (type_793) => { this.typeAny = type_793.instantiate() });
			findBasicType('Void', (type_794) => { this.typeVoid = type_794.instantiate() });
			this.pushScope();
			for (const file of $toIterator(collected)) for (const e of $toIterator(file)) {
				const temp_795 = e;
				switch (temp_795&&temp_795[0]) {
				case 35: {
					{
						const path_796 = temp_795[1];
						const el_797 = temp_795[2];
						{
							for (const node of $toIterator(el_797)) {
								const temp_798 = node;
								switch (temp_798&&temp_798[0]) {
								case 25: {
									{
										this.parents.set(node, e);
										this.fill(node);
									}
								} break;
								
								case 37: {
									{
										this.parents.set(node, e);
										this.fill(node);
									}
								} break;
								
								default: 
								{
								}
								};
							};
							for (const node of $toIterator(el_797)) {
								const temp_799 = node;
								switch (temp_799&&temp_799[0]) {
								case 25: {
									{
									}
								} break;
								
								case 37: {
									{
									}
								} break;
								
								default: 
								{
									this.parents.set(node, e);
									this.fill(node);
								}
								};
							};
						};
					}
				} break;
				
				default: 
				{
				}
				};
			};
			this.popScope();
			for (const file of $toIterator(collected)) {
				this.pushScope();
				for (const e of $toIterator(file)) {
					const temp_800 = e;
					switch (temp_800&&temp_800[0]) {
					case 35: {
						{
							const path_801 = temp_800[1];
							const el_802 = temp_800[2];
							{
							};
						}
					} break;
					
					default: 
					this.fill(e)
					};
				};
				this.popScope();
			};
		};
		find(name_803) {
			let subj_804 = null;
			{
				let i_805 = 0;
				let it_806 = 0;
				let at_807 = this.scopes.length;
				while (it_806 < at_807) {
					i_805 = it_806;
					it_806++;
					{
						subj_804 = this.scopes[this.scopes.length - i_805 - 1].get(name_803);
						if (subj_804 != null) { break };
					};
				};
			};
			if (subj_804 == null) { subj_804 = this.findInNamespaceRoots(name_803) };
			return subj_804;
		};
		proposeSimilar(names_808, subject, what) {
			const available = ('Available ' + (what) + ' are: ') + names_808.join(', ');
			const subject_809 = subject.toLowerCase();
			const charSubj = subject_809.split('');
			let bestValue = 0;
			let bestName = '';
			for (const name of $toIterator(names_808)) {
				const named = name.toLowerCase();
				if (named.startsWith(subject_809) || subject_809.startsWith(named)) { return ('Did you mean `' + (name) + '`?\n\n') + available };
				let index_810 = 0;
				let thisValue = 0;
				for (const char of $toIterator(named.split(''))) {
					if (char == charSubj[index_810]) { thisValue++ };
					index_810++;
				};
				if (thisValue > bestValue) {
					bestValue = thisValue;
					bestName = name;
				};
			};
			if (bestValue > 2) { return ('Did you mean `' + (bestName) + '`?\n\n') + available };
			return available;
		};
		registerClassType(node_811, callback_812) {
			let step_813 = 0;
			const type_814 = this.types.get(node_811);
			if (step_813 == 0 && type_814 != null) { step_813 = 1 };
			if (step_813 == 1) {
				const temp_815 = type_814;
				switch (temp_815&&temp_815[0]) {
				case 3: {
					{
						const t_816 = temp_815[1];
						{
							{
								let step_817 = 0;
								const setup = callback_812;
								if (step_817 == 0 && setup != null) { step_817 = 1 };
								if (step_817 == 1) { setup(t_816) };
							};
							return t_816;
						};
					}
				} break;
				};
			} else {
				const type_818 = new ClassType();
				const _thisType = this.thisType;
				this.thisType = type_818;
				type_818.parent = node_811;
				type_818.name = DataHelper.nameOf(node_811);
				this.types.set(node_811, /*Class*/[3,type_818]);
				{
					let step_819 = 0;
					const setup_820 = callback_812;
					if (step_819 == 0 && setup_820 != null) { step_819 = 1 };
					if (step_819 == 1) { setup_820(type_818) };
				};
				{
					const temp_821 = type_818.name;
					switch (temp_821) {
					case 'Int': {
						this.typeInt = type_818.instantiate()
					} break;
					
					case 'Bool': {
						this.typeBool = type_818.instantiate()
					} break;
					
					case 'Float': {
						this.typeFloat = type_818.instantiate()
					} break;
					
					case 'String': {
						this.typeString = type_818.instantiate()
					} break;
					
					case 'Array': {
						this.typeArray = type_818
					} break;
					
					case 'Map': {
						this.typeMap = type_818
					} break;
					
					case 'Any': {
						this.typeAny = type_818.instantiate()
					} break;
					
					case 'Void': {
						this.typeVoid = type_818.instantiate()
					} break;
					};
				};
				const getRename = (f_822) => {
					const atts_823 = Project.mapAttributes.get(f_822);
					{
						let step_824 = 0;
						const native_825 = DataHelper.getAttribute(atts_823, 'native');
						if (step_824 == 0 && native_825 != null) { step_824 = 1 };
						if (step_824 == 1) {
							if (native_825.values.length != 1) { throw '@native takes one string argument' };
							if (native_825 != null) {
								const temp_826 = native_825.values[0];
								switch (temp_826&&temp_826[0]) {
								case 0: {
									{
										const s_827 = temp_826[1];
										return s_827;
									}
								} break;
								
								default: 
								throw '@native takes string as argument'
								};
							};
						};
					};
					return null;
				};
				{
					const temp_828 = node_811;
					switch (temp_828&&temp_828[0]) {
					case 25: {
						{
							const t_829 = temp_828[1];
							const extend = temp_828[2];
							const implement = temp_828[3];
							const f_830 = temp_828[4];
							const external_831 = temp_828[5];
							{
								{
									const temp_832 = t_829;
									switch (temp_832&&temp_832[0]) {
									case 2: {
										{
											const name_833 = temp_832[1];
											const params_834 = temp_832[2];
											{
												const names_835 = [DataHelper.extractTypeName(params_834[0])];
												{
													let i_836 = 0;
													let it_837 = 1;
													let at_838 = params_834.length;
													while (it_837 < at_838) {
														i_836 = it_837;
														it_837++;
														{
															const name_839 = DataHelper.extractTypeName(params_834[i_836]);
															if (names_835.includes(name_839)) { Typer.fail(('Parametric type `' + (name_839) + '` already exists in `<T, ...>`'), node_811) };
															names_835.push(name_839);
														};
													};
												};
											};
										}
									} break;
									};
								};
								{
									let step_840 = 0;
									const ext_841 = extend;
									if (step_840 == 0 && ext_841 != null) { step_840 = 1 };
									if (step_840 == 1) { this.toType(ext_841, node_811) };
								};
								for (const impl of $toIterator(implement)) this.toType(impl, node_811);
								this.pushScope();
								for (const field of $toIterator(f_830)) {
									{
										const temp_842 = field;
										switch (temp_842&&temp_842[0]) {
										case 21: {
											{
												const name_843 = temp_842[1];
												{
													if (type_818.fieldNames.includes(name_843)) { Typer.fail(('Field `' + (name_843) + '` already exists'), field) };
													type_818.fieldNames.push(name_843);
													if (name_843 == 'new') { type_818.constructor = type_818.fieldNames.length - 1 } else type_818.fieldRenames[type_818.fieldNames.length - 1] = getRename(field);
													this.addScope(name_843, field);
												};
											}
										} break;
										
										case 23: {
											{
												const name_844 = temp_842[1];
												const t_845 = temp_842[2];
												const e_846 = temp_842[3];
												{
													if (type_818.fieldNames.includes(name_844)) { Typer.fail(('Field `' + (name_844) + '` already exists'), field) };
													type_818.fieldNames.push(name_844);
													type_818.fieldInitialized[type_818.fieldNames.length - 1] = false;
													type_818.fieldRenames[type_818.fieldNames.length - 1] = getRename(field);
													this.addScope(name_844, field);
												};
											}
										} break;
										
										case 26: {
											{
												const field_847 = temp_842[1];
												{
													const temp_848 = field_847;
													switch (temp_848&&temp_848[0]) {
													case 23: {
														{
															const name_849 = temp_848[1];
															{
																if (type_818.fieldNames.includes(name_849)) { Typer.fail(('Field `' + (name_849) + '` already exists'), field_847) };
																type_818.fieldNames.push(name_849);
																this.addScope(name_849, field_847);
															};
														}
													} break;
													};
												};
											}
										} break;
										
										case 43: {
											{
												const f_850 = temp_842[1];
												{
													const temp_851 = f_850;
													switch (temp_851&&temp_851[0]) {
													case 21: {
														{
															const name_852 = temp_851[1];
															{
																if (type_818.fieldNames.includes(name_852)) { Typer.fail(('Field `' + (name_852) + '` already exists'), field) };
																type_818.fieldNames.push(name_852);
																type_818.fieldStatic[type_818.fieldNames.length - 1] = true;
																this.addScope(name_852, field);
															};
														}
													} break;
													
													case 23: {
														{
															const name_853 = temp_851[1];
															{
																if (type_818.fieldNames.includes(name_853)) { Typer.fail(('Field `' + (name_853) + '` already exists'), field) };
																type_818.fieldNames.push(name_853);
																type_818.fieldStatic[type_818.fieldNames.length - 1] = true;
																this.addScope(name_853, field);
															};
														}
													} break;
													};
												};
											}
										} break;
										
										default: 
										Typer.fail('Wrong class field format', field)
										};
									};
									this.parents.set(field, node_811);
								};
								for (const field of $toIterator(f_830)) {
									const temp_854 = field;
									switch (temp_854&&temp_854[0]) {
									case 23: {
										{
											const name_855 = temp_854[1];
											const t_856 = temp_854[2];
											const e_857 = temp_854[3];
											const const_858 = temp_854[4];
											{
												let step_859 = 0;
												const t_860 = t_856;
												if (step_859 == 0 && t_860 != null) { step_859 = 1 };
												if (step_859 == 1) { this.types.set(field, this.toType(t_860, field)) };
											};
										}
									} break;
									
									case 21: {
										{
											const name_861 = temp_854[1];
											const expr_862 = temp_854[2];
											const vars_863 = temp_854[3];
											const rettype_864 = temp_854[4];
											{
												let step_865 = 0;
												const rettype_866 = rettype_864;
												let temp_867 = null;
												if (step_865 == 0 && rettype_866 != null) {
													temp_867 = vars_863.length == 0;
													step_865 = 1;
												};
												if (step_865 == 1 && temp_867 != false) { step_865 = 2 };
												if (step_865 == 2) { this.types.set(field, /*Function*/[10,[],this.toType(rettype_866, field)]) };
											};
										}
									} break;
									};
								};
								for (const field of $toIterator(f_830)) {
									const temp_868 = field;
									switch (temp_868&&temp_868[0]) {
									case 21: {
										{
											const name_869 = temp_868[1];
											const expr_870 = temp_868[2];
											const vars_871 = temp_868[3];
											const rettype_872 = temp_868[4];
											{
												if (name_869 == 'new') { type_818.constructor = type_818.fieldNames.length - 1 };
												if ((external_831) && (expr_870 != null)) { if (name_869 == 'new') { Typer.fail('External class constructor `new()` cannot have a body `{}`', field) } else Typer.fail(('External class method `function ' + (name_869) + '` cannot have a body `{}`'), field) };
												const _insideClassMethod = this.insideClassMethod;
												const _allowSuper = this.allowSuper;
												this.insideClassMethod = true;
												this.allowSuper = (extend != null);
												if ((!external_831)) { this.fillFunction(field, expr_870, vars_871, rettype_872) };
												if ((external_831) && (this.types.get(field) == null)) { this.types.set(field, /*Function*/[10,[],rettype_872 != (null)? (this.toType(rettype_872, field)) : this.typeVoid]) };
												this.insideClassMethod = _insideClassMethod;
												this.allowSuper = _allowSuper;
											};
										}
									} break;
									
									case 23: {
										{
											const name_873 = temp_868[1];
											const t_874 = temp_868[2];
											const e_875 = temp_868[3];
											const const_876 = temp_868[4];
											{
												if ((external_831) && (e_875 != null)) { Typer.fail(('External class field `var ' + (name_873) + '` cannot have `= value`'), field) };
												const _insideClassMethod_877 = this.insideClassMethod;
												this.insideClassMethod = true;
												if (e_875 != null) { this.fillExpression(e_875) };
												this.insideClassMethod = _insideClassMethod_877;
												this.mixVarTypes(t_874, e_875, field);
												type_818.fieldInitialized[type_818.fieldNames.indexOf(name_873)] = true;
												if (this.types.get(field) == null) { Typer.fail(('Field `var ' + (name_873) + '` initialized, but got no type ') + e_875, field) };
											};
										}
									} break;
									
									case 26: {
										{
											const f_878 = temp_868[1];
											{
												const temp_879 = f_878;
												switch (temp_879&&temp_879[0]) {
												case 23: {
													{
														const name_880 = temp_879[1];
														const t_881 = temp_879[2];
														const e_882 = temp_879[3];
														const const_883 = temp_879[4];
														{
															if ((external_831) && (e_882 != null)) { Typer.fail(('External class field `var ' + (name_880) + '` cannot have expression'), field) };
															const _insideClassMethod_884 = this.insideClassMethod;
															this.insideClassMethod = true;
															if (e_882 != null) { this.fillExpression(e_882) };
															this.insideClassMethod = _insideClassMethod_884;
															this.mixVarTypes(t_881, e_882, f_878);
															type_818.fieldInitialized[type_818.fieldNames.indexOf(name_880)] = true;
															if (this.types.get(f_878) == null) { Typer.fail(('Property `' + (name_880) + '` initialized, but got no type ') + e_882, field) };
															this.types.set(field, this.types.get(f_878));
														};
													}
												} break;
												};
											};
										}
									} break;
									
									case 43: {
										{
											const f_885 = temp_868[1];
											{
												const temp_886 = f_885;
												switch (temp_886&&temp_886[0]) {
												case 21: {
													{
														const name_887 = temp_886[1];
														const expr_888 = temp_886[2];
														const vars_889 = temp_886[3];
														const rettype_890 = temp_886[4];
														{
															if ((external_831) && (expr_888 != null)) { Typer.fail(('External class field `static function ' + (name_887) + '` cannot have a body'), field) };
															const _insideClassMethod_891 = this.insideClassMethod;
															this.insideClassMethod = false;
															if ((!external_831)) { this.fillFunction(f_885, expr_888, vars_889, rettype_890) };
															if (external_831) { this.types.set(f_885, /*Function*/[10,[],rettype_890 != (null)? (this.toType(rettype_890, f_885)) : this.typeVoid]) };
															this.insideClassMethod = _insideClassMethod_891;
															if (this.types.get(f_885) == null) { Typer.fail('Function get no type: class ' + DataHelper.nameOf(node_811) + ' static ' + name_887, f_885) };
															this.types.set(field, this.types.get(f_885));
														};
													}
												} break;
												
												case 23: {
													{
														const name_892 = temp_886[1];
														const t_893 = temp_886[2];
														const e_894 = temp_886[3];
														const const_895 = temp_886[4];
														{
															if ((external_831) && (e_894 != null)) { Typer.fail(('External class field `static var ' + (name_892) + '` cannot have expression'), field) };
															if (e_894 != null) { this.fillExpression(e_894) };
															this.mixVarTypes(t_893, e_894, f_885);
															this.types.set(field, this.types.get(f_885));
														};
													}
												} break;
												};
											};
										}
									} break;
									
									default: 
									Typer.fail('Wrong class field format', node_811)
									};
								};
								this.popScope();
							};
						}
					} break;
					
					default: 
					Typer.fail('ClassType expects (declare) class node, but got ' + node_811, node_811)
					};
				};
				this.thisType = _thisType;
				return type_818;
			};
		};
		registerEnumType(node_896) {
			let step_897 = 0;
			const type_898 = this.types.get(node_896);
			if (step_897 == 0 && type_898 != null) { step_897 = 1 };
			if (step_897 == 1) {
				const temp_899 = type_898;
				switch (temp_899&&temp_899[0]) {
				case 6: {
					{
						const t_900 = temp_899[1];
						return t_900;
					}
				} break;
				};
			} else {
				const type_901 = new EnumType();
				type_901.parent = node_896;
				type_901.name = DataHelper.nameOf(node_896);
				this.types.set(node_896, /*Enum*/[6,type_901]);
				{
					const temp_902 = node_896;
					switch (temp_902&&temp_902[0]) {
					case 37: {
						{
							const t_903 = temp_902[1];
							const f_904 = temp_902[2];
							const valuesType_905 = temp_902[3];
							const extend_906 = temp_902[4];
							{
								this.pushScope();
								{
									let step_907 = 0;
									const valuesType_908 = valuesType_905;
									if (step_907 == 0 && valuesType_908 != null) { step_907 = 1 };
									if (step_907 == 1) { type_901.fieldsTypeSimple = this.toType(valuesType_908, node_896) };
								};
								if ((type_901.fieldsTypeSimple != null) && (type_901.fieldsTypeSimple != this.typeInt) && (type_901.fieldsTypeSimple != this.typeString)) { Typer.fail('Simple enums may be only of types `Int` and `String`', node_896) };
								if ((f_904.length == 0) && (extend_906 == null)) { Typer.fail(('Enum `' + (type_901.name) + '` must have at least one value `enum ' + (type_901.name) + ' { Value }`'), node_896) };
								for (const field of $toIterator(f_904)) {
									{
										const temp_909 = field;
										switch (temp_909&&temp_909[0]) {
										case 48: {
											{
												const t_910 = temp_909[1];
												{
													const temp_911 = t_910;
													switch (temp_911&&temp_911[0]) {
													case 1: {
														{
															const name_912 = temp_911[1];
															{
																if (type_901.fieldNames.includes(name_912)) { throw Typer.fail(('Field `' + (name_912) + '` already exists'), node_896) };
																type_901.fieldNames.push(name_912);
																type_901.fieldEnumConstructor[type_901.fieldNames.length - 1] = true;
																type_901.tagBindVars[type_901.fieldNames.length - 1] = [];
																type_901.tagBindVarsNames[type_901.fieldNames.length - 1] = [];
																type_901.fieldType[type_901.fieldNames.length - 1] = /*EnumInstance*/[7,type_901,type_901.fieldNames.length - 1];
															};
														}
													} break;
													
													default: 
													Typer.fail('Wrong enum constructor format, should be `Name`', node_896)
													};
												};
											}
										} break;
										
										case 12: {
											{
												const e_913 = temp_909[1];
												const args_914 = temp_909[2];
												const argNames_915 = temp_909[3];
												{
													if (valuesType_905 != null) { throw Typer.fail('Cannot use `Value(args)` format for simple enum', node_896) };
													{
														const temp_916 = e_913;
														switch (temp_916&&temp_916[0]) {
														case 48: {
															{
																const t_917 = temp_916[1];
																{
																	const temp_918 = t_917;
																	switch (temp_918&&temp_918[0]) {
																	case 1: {
																		{
																			const name_919 = temp_918[1];
																			{
																				if (type_901.fieldNames.includes(name_919)) { throw Typer.fail(('Field `' + (name_919) + '` already exists'), node_896) };
																				type_901.fieldNames.push(name_919);
																				type_901.fieldEnumConstructor[type_901.fieldNames.length - 1] = true;
																				type_901.fieldType[type_901.fieldNames.length - 1] = /*EnumConstructor*/[8,type_901,type_901.fieldNames.length - 1];
																				const tagBindVars = [];
																				const tagBindVarsNames = [];
																				type_901.tagBindVars[type_901.fieldNames.length - 1] = tagBindVars;
																				type_901.tagBindVarsNames[type_901.fieldNames.length - 1] = tagBindVarsNames;
																				if (args_914.length == 0) { Typer.fail('Enum constructor expects more than zero arguments `(value: Type)`', e_913) };
																				{
																					let i_920 = 0;
																					let it_921 = 0;
																					let at_922 = args_914.length;
																					while (it_921 < at_922) {
																						i_920 = it_921;
																						it_921++;
																						{
																							if (argNames_915[i_920] == null) { Typer.fail('Enum constructor arguments should have names `E(name1: T, name2: T)', args_914[i_920]) };
																							tagBindVars[i_920] = Typer.nodeToNodeType(args_914[i_920]);
																							tagBindVarsNames[i_920] = argNames_915[i_920];
																						};
																					};
																				};
																			};
																		}
																	} break;
																	
																	default: 
																	Typer.fail('Wrong enum constructor format, should be `Name(value: T)`', e_913)
																	};
																};
															}
														} break;
														};
													};
												};
											}
										} break;
										
										case 9: {
											{
												const a_923 = temp_909[1];
												const op_924 = temp_909[2];
												const b_925 = temp_909[3];
												{
													if (op_924 != 91) { Typer.fail(('Should use `Value = value` not `Value ' + (Token.stringify(op_924)) + ' value` format for enum tag value'), node_896) };
													if (valuesType_905 == null) { Typer.fail('Cannot use `Value = value` format for complex enum', node_896) };
													{
														const temp_926 = a_923;
														switch (temp_926&&temp_926[0]) {
														case 48: {
															{
																const t_927 = temp_926[1];
																{
																	const temp_928 = t_927;
																	switch (temp_928&&temp_928[0]) {
																	case 1: {
																		{
																			const name_929 = temp_928[1];
																			{
																				if (type_901.fieldNames.includes(name_929)) { Typer.fail(('Field `' + (name_929) + '` already exists'), node_896) };
																				type_901.fieldNames.push(name_929);
																				type_901.fieldEnumConstructor[type_901.fieldNames.length - 1] = true;
																				{
																					const temp_930 = b_925;
																					switch (temp_930&&temp_930[0]) {
																					case 5: {
																						if (type_901.fieldsTypeSimple != this.typeInt) { Typer.fail(('`' + (name_929) + ' = value` expects constant value of type `' + (Type.stringify(type_901.fieldsTypeSimple)) + '`'), b_925) }
																					} break;
																					
																					case 0: {
																						if (type_901.fieldsTypeSimple != this.typeString) { Typer.fail(('`' + (name_929) + ' = value` expects constant value of type `' + (Type.stringify(type_901.fieldsTypeSimple)) + '`'), b_925) }
																					} break;
																					};
																				};
																				this.fillExpression(b_925);
																				type_901.fieldType[type_901.fieldNames.length - 1] = this.types.get(b_925);
																			};
																		}
																	} break;
																	};
																};
															}
														} break;
														};
													};
												};
											}
										} break;
										
										case 1: {
											{
												const name_931 = temp_909[1];
												Typer.fail(('Cannot use lowercase `' + (name_931) + '` format for enum values'), node_896);
											}
										} break;
										
										case 43: {
											{
												const f_932 = temp_909[1];
												{
													const temp_933 = f_932;
													switch (temp_933&&temp_933[0]) {
													case 21: {
														{
															const name_934 = temp_933[1];
															{
																if (type_901.fieldNames.includes(name_934)) { Typer.fail(('Field `' + (name_934) + '` already exists'), node_896) };
																type_901.fieldNames.push(name_934);
																type_901.fieldStatic[type_901.fieldNames.length - 1] = true;
																this.addScope(name_934, field);
															};
														}
													} break;
													
													case 23: {
														{
															const name_935 = temp_933[1];
															{
																if (type_901.fieldNames.includes(name_935)) { Typer.fail(('Field `' + (name_935) + '` already exists'), node_896) };
																type_901.fieldNames.push(name_935);
																type_901.fieldStatic[type_901.fieldNames.length - 1] = true;
																this.addScope(name_935, field);
															};
														}
													} break;
													};
												};
											}
										} break;
										
										default: 
										Typer.fail('Wrong enum field format', field)
										};
									};
									this.parents.set(field, node_896);
								};
								for (const field of $toIterator(f_904)) {
									const temp_936 = field;
									switch (temp_936&&temp_936[0]) {
									case 21: {
										{
											const name_937 = temp_936[1];
											const expr_938 = temp_936[2];
											const vars_939 = temp_936[3];
											const rettype_940 = temp_936[4];
											this.fillFunction(field, expr_938, vars_939, rettype_940);
										}
									} break;
									
									case 23: {
										{
											const name_941 = temp_936[1];
											{
											};
										}
									} break;
									
									case 43: {
										{
											const f_942 = temp_936[1];
											{
												const temp_943 = f_942;
												switch (temp_943&&temp_943[0]) {
												case 21: {
													{
														const name_944 = temp_943[1];
														const expr_945 = temp_943[2];
														const vars_946 = temp_943[3];
														const rettype_947 = temp_943[4];
														{
															const _insideClassMethod_948 = this.insideClassMethod;
															this.insideClassMethod = false;
															if (rettype_947 != null) { this.types.set(f_942, /*Function*/[10,[],this.toType(rettype_947, f_942)]) } else this.types.set(f_942, /*Function*/[10,[],this.typeVoid]);
															this.types.set(field, this.types.get(f_942));
															this.fillFunction(f_942, expr_945, vars_946, rettype_947);
															this.insideClassMethod = _insideClassMethod_948;
															if (this.types.get(f_942) == null) { Typer.fail('Function get no type: enum ' + DataHelper.nameOf(node_896) + ' static ' + name_944, f_942) };
															this.types.set(field, this.types.get(f_942));
														};
													}
												} break;
												
												case 23: {
													{
														const name_949 = temp_943[1];
														const t_950 = temp_943[2];
														const e_951 = temp_943[3];
														const const_952 = temp_943[4];
														{
															if (e_951 != null) { this.fillExpression(e_951) };
															this.mixVarTypes(t_950, e_951, f_942);
															this.types.set(field, this.types.get(f_942));
														};
													}
												} break;
												};
											};
										}
									} break;
									
									case 48: {
										{
										}
									} break;
									
									case 12: {
										{
										}
									} break;
									
									case 9: {
										{
										}
									} break;
									
									default: 
									Typer.fail('Unknown enum field format', field)
									};
								};
								this.popScope();
							};
						}
					} break;
					
					default: 
					Typer.fail('EnumType expects (declare) enum node, but got ' + node_896, node_896)
					};
				};
				return type_901;
			};
		};
		nameOfModuleItem(node_966) {
			const temp_967 = node_966;
			switch (temp_967&&temp_967[0]) {
			case 23: {
				{
					const name_968 = temp_967[1];
					return name_968;
				}
			} break;
			
			case 21: {
				{
					const name_969 = temp_967[1];
					{
						let step_970 = 0;
						const named_971 = name_969;
						if (step_970 == 0 && named_971 != null) { step_970 = 1 };
						if (step_970 == 1) { return named_971 } else throw 'Module function should have a name';
					};
				}
			} break;
			
			case 44: {
				{
					const node_972 = temp_967[1];
					{
						const temp_973 = node_972;
						switch (temp_973&&temp_973[0]) {
						case 25: {
							{
								const t_974 = temp_973[1];
								{
									const temp_975 = t_974;
									switch (temp_975&&temp_975[0]) {
									case 1: {
										{
											const name_976 = temp_975[1];
											return name_976;
										}
									} break;
									
									case 2: {
										{
											const name_977 = temp_975[1];
											return name_977;
										}
									} break;
									};
								};
							}
						} break;
						};
					};
				}
			} break;
			
			case 25: {
				{
					const t_978 = temp_967[1];
					{
						const temp_979 = t_978;
						switch (temp_979&&temp_979[0]) {
						case 1: {
							{
								const name_980 = temp_979[1];
								return name_980;
							}
						} break;
						
						case 2: {
							{
								const name_981 = temp_979[1];
								return name_981;
							}
						} break;
						};
					};
				}
			} break;
			
			case 37: {
				{
					const t_982 = temp_967[1];
					{
						const temp_983 = t_982;
						switch (temp_983&&temp_983[0]) {
						case 1: {
							{
								const name_984 = temp_983[1];
								return name_984;
							}
						} break;
						
						case 2: {
							{
								const name_985 = temp_983[1];
								return name_985;
							}
						} break;
						};
					};
				}
			} break;
			
			case 8: {
				{
					const t_986 = temp_967[1];
					{
						const temp_987 = t_986;
						switch (temp_987&&temp_987[0]) {
						case 1: {
							{
								const name_988 = temp_987[1];
								return name_988;
							}
						} break;
						
						case 2: {
							{
								const name_989 = temp_987[1];
								return name_989;
							}
						} break;
						};
					};
				}
			} break;
			
			default: 
			Typer.fail('Improper module item format, wrap expressions as `{ expressions }`', node_966)
			};
		};
		findInNamespaceRoots(name_990) {
			if (this.namespaces.get(name_990) != null) { return this.namespaces.get(name_990) };
			let m_991 = this.namespaces.get('');
			let el_992 = (null);
			{
				const temp_993 = m_991;
				switch (temp_993&&temp_993[0]) {
				case 35: {
					{
						const els_994 = temp_993[2];
						el_992 = els_994;
					}
				} break;
				
				default: 
				return null
				};
			};
			for (const e of $toIterator(el_992)) if (name_990 == this.nameOfModuleItem(e)) { return e };
			return null;
		};
		pushScope() { this.scopes.push((new Map())) };
		popScope() { this.scopes.pop() };
		addScope(name_995, node_996) { this.scopes[this.scopes.length - 1].set(name_995, node_996) };
		unify(to, fromValue, node_997) {
			if (to == fromValue) { return to };
			if (to == this.typeAny) { return to };
			if (fromValue == this.typeVoid) { Typer.fail(('Incompatible types `' + (Type.stringify(to)) + '` and non-value type `Void`'), node_997) };
			if ((to == this.typeFloat) && (fromValue == this.typeInt)) { return this.typeFloat };
			const isNullable = (t_998) => {
				{
					const temp_999 = t_998;
					switch (temp_999&&temp_999[0]) {
					case 1: {
						return true
					} break;
					
					case 2: {
						return true
					} break;
					};
				};
				return false;
			};
			const unwrapNullable = (t_1000) => {
				{
					const temp_1001 = t_1000;
					switch (temp_1001&&temp_1001[0]) {
					case 1: {
						{
							const handle = temp_1001[1];
							return handle.value;
						}
					} break;
					
					case 2: {
						{
							const t_1002 = temp_1001[1];
							return t_1002;
						}
					} break;
					};
				};
				return t_1000;
			};
			const instanceOfClass = (t_1003) => {
				{
					const temp_1004 = unwrapNullable(t_1003);
					switch (temp_1004&&temp_1004[0]) {
					case 4: {
						{
							const t_1005 = temp_1004[1];
							return t_1005;
						}
					} break;
					
					case 3: {
						{
							const t_1006 = temp_1004[1];
							Typer.fail(('Cannot take classes `class ' + (t_1006.name) + '` as values'), node_997);
						}
					} break;
					};
				};
				return null;
			};
			let toNullable = isNullable(to);
			let fromNullable = isNullable(fromValue);
			let toInstance = instanceOfClass(to);
			let fromInstance = instanceOfClass(fromValue);
			if (toInstance == null || fromInstance == null) { return (() => {
				const result_1007 = to;
				if (result_1007 != null) { return result_1007 };
				return fromValue;
			})() };
			if ((toInstance != fromInstance) && (to != this.typeAny) && (fromValue != this.typeAny)) { Typer.fail(('Incompatible types `' + (Type.stringify(to)) + '` and value of `' + (Type.stringify(fromValue)) + '`'), node_997) };
			return (() => {
				const result_1008 = to;
				if (result_1008 != null) { return result_1008 };
				return fromValue;
			})();
		};
		findType(name_1009) {
			{
				let i_1010 = 0;
				let it_1011 = 0;
				let at_1012 = this.scopes.length;
				while (it_1011 < at_1012) {
					i_1010 = it_1011;
					it_1011++;
					{
						let step_1013 = 0;
						const subj_1014 = this.scopes[this.scopes.length - i_1010 - 1].get(name_1009);
						if (step_1013 == 0 && subj_1014 != null) { step_1013 = 1 };
						if (step_1013 == 1) { return subj_1014 };
					};
				};
			};
			return this.findInNamespaceRoots(name_1009);
		};
		toType(t_1015, node_1016) {
			const temp_1017 = t_1015;
			switch (temp_1017&&temp_1017[0]) {
			case 1: {
				{
					const name_1018 = temp_1017[1];
					{
						const nodeType = this.findType(name_1018);
						if (this.types.get(nodeType) == null) {
							const temp_1019 = nodeType;
							switch (temp_1019&&temp_1019[0]) {
							case 25: {
								this.registerClassType(nodeType)
							} break;
							
							case 37: {
								this.registerEnumType(nodeType)
							} break;
							};
						};
						{
							const temp_1020 = this.types.get(nodeType);
							switch (temp_1020&&temp_1020[0]) {
							case 3: {
								{
									const type_1021 = temp_1020[1];
									return type_1021.instantiate();
								}
							} break;
							
							case 6: {
								{
									const type_1022 = temp_1020[1];
									return this.types.get(nodeType);
								}
							} break;
							
							case null: case undefined: {
								{
									if (name_1018 == 'T') { return this.typeAny };
									if (name_1018 == 'V') { return this.typeAny };
									if (name_1018 == 'K') { return this.typeAny };
									Typer.fail(('Cannot find type `' + (name_1018) + '`'), node_1016);
								}
							} break;
							
							default: 
							Typer.fail(('Unsupported type `' + (name_1018) + '`'), node_1016)
							};
						};
					};
				}
			} break;
			
			case 2: {
				{
					const name_1023 = temp_1017[1];
					const params_1024 = temp_1017[2];
					{
						const nodeType_1025 = this.findType(name_1023);
						if (this.types.get(nodeType_1025) == null) {
							const temp_1026 = nodeType_1025;
							switch (temp_1026&&temp_1026[0]) {
							case 25: {
								this.registerClassType(nodeType_1025)
							} break;
							
							case 37: {
								this.registerEnumType(nodeType_1025)
							} break;
							};
						};
						{
							const temp_1027 = this.types.get(nodeType_1025);
							switch (temp_1027&&temp_1027[0]) {
							case 3: {
								{
									const type_1028 = temp_1027[1];
									return type_1028.instantiateGeneric((() => {
										const result_1029 = [];
										const value_1030 = params_1024;
										for (const p of $toIterator(value_1030)) result_1029.push(this.toType(p, node_1016));
										return result_1029;
									})());
								}
							} break;
							
							case null: case undefined: {
								Typer.fail(('Cannot find type `' + (name_1023) + '`'), node_1016)
							} break;
							
							default: 
							Typer.fail(('Unsupported type `' + (name_1023) + '`'), node_1016)
							};
						};
					};
				}
			} break;
			
			case 0: {
				{
					const t_1031 = temp_1017[1];
					return /*Nullable*/[2,this.toType(t_1031, node_1016)];
				}
			} break;
			
			case 3: {
				{
					const args_1032 = temp_1017[1];
					const ret = temp_1017[2];
					return /*Function*/[10,(() => {
						const result_1033 = [];
						const value_1034 = args_1032;
						for (const arg of $toIterator(value_1034)) result_1033.push(this.toType(arg, node_1016));
						return result_1033;
					})(),this.toType(ret, node_1016)];
				}
			} break;
			
			case 5: {
				{
					const names_1035 = temp_1017[1];
					const el_1036 = temp_1017[2];
					{
						const els_1037 = (() => {
							const result_1038 = [];
							const value_1039 = el_1036;
							for (const e of $toIterator(value_1039)) result_1038.push(this.toType(e, node_1016));
							return result_1038;
						})();
						return /*Struct*/[11,names_1035,els_1037];
					};
				}
			} break;
			
			default: 
			Typer.fail('Unsupported node type ' + t_1015 + '. This should never happen. Probably incomplete feature was used. Ping a compiler developer with a code sample.', node_1016)
			};
		};
		mixVarTypes(t_1040, e_1041, node_1042) {
			if ((t_1040 != null) && (e_1041 != null)) { this.types.set(node_1042, this.unify(this.toType(t_1040, node_1042), this.types.get(e_1041), e_1041)) };
			if ((t_1040 == null) && (e_1041 != null)) { this.types.set(node_1042, this.types.get(e_1041)) };
			if ((t_1040 == null) && (e_1041 == null)) { this.types.set(node_1042, /*UnknownNullable*/[1,{value:null}]) };
			if ((t_1040 != null) && (e_1041 == null)) { this.types.set(node_1042, this.toType(t_1040, node_1042)) };
		};
		fillFunction(node_1043, expr_1044, vars_1045, rettype_1046, arrow) {
			this.pushScope();
			const _insideFunction = this.insideFunction;
			const _functionAllowedToThrow = this.functionAllowedToThrow;
			const _functionThrows = this.functionThrows;
			const _functionReturnsAType = this.functionReturnsAType;
			const _functionActuallyReturns = this.functionActuallyReturns;
			const _insideTry = this.insideTry;
			{
				let i_1047 = 0;
				let it_1048 = 0;
				let at_1049 = vars_1045.length;
				while (it_1048 < at_1049) {
					i_1047 = it_1048;
					it_1048++;
					{
						const v_1050 = vars_1045[i_1047];
						{
							const temp_1051 = v_1050;
							switch (temp_1051&&temp_1051[0]) {
							case 23: {
								{
									const vname_1052 = temp_1051[1];
									const t_1053 = temp_1051[2];
									const e_1054 = temp_1051[3];
									const const_1055 = temp_1051[4];
									{
										if ((t_1053 != null) && (this.toType(t_1053, v_1050) == this.typeVoid)) { Typer.fail('Argument cannot be of type `Void`', v_1050) };
										if (e_1054 != null) { this.fillExpression(e_1054) };
										if (t_1053 != null) { this.types.set(v_1050, this.toType(t_1053, v_1050)) };
										this.addScope(vname_1052, v_1050);
									};
								}
							} break;
							};
						};
					};
				};
			};
			let ret_1056 = null;
			{
				let step_1057 = 0;
				const rt = rettype_1046;
				if (step_1057 == 0 && rt != null) { step_1057 = 1 };
				if (step_1057 == 1) { ret_1056 = this.toType(rt, node_1043) };
			};
			this.functionReturnsAType = ret_1056;
			this.functionActuallyReturns = false;
			const atts_1058 = Project.mapAttributes.get(node_1043);
			{
				let step_1059 = 0;
				const noThrow = DataHelper.getAttribute(atts_1058, 'noThrow');
				if (step_1059 == 0 && noThrow != null) { step_1059 = 1 };
				if (step_1059 == 1) {
					if (noThrow.values.length > 0) { Typer.fail('Attribute `@noThrow` should have no parameters', node_1043) };
					this.functionAllowedToThrow = false;
				} else this.functionAllowedToThrow = true;
			};
			{
				let step_1060 = 0;
				const throws = DataHelper.getAttribute(atts_1058, 'throws');
				if (step_1060 == 0 && throws != null) { step_1060 = 1 };
				if (step_1060 == 1) {
					if (this.functionAllowedToThrow == false) { Typer.fail('Attribute `@noThrow` cannot be used with `@throws`', node_1043) };
					this.functionThrows = true;
				} else this.functionThrows = false;
			};
			this.insideFunction = true;
			this.insideTry = false;
			if ((arrow) && (expr_1044 != null)) { this.fillExpression(expr_1044) };
			if (((!arrow)) && (expr_1044 != null)) { this.fill(expr_1044) };
			this.popScope();
			ret_1056 = this.functionReturnsAType;
			if (ret_1056 == null) { ret_1056 = this.typeVoid };
			if ((ret_1056 != this.typeVoid) && (expr_1044 != null) && (this.functionActuallyReturns == false)) { Typer.fail(('Function expects result of `' + (Type.stringify(ret_1056)) + '` but never does `return value`'), node_1043) };
			this.insideFunction = _insideFunction;
			this.functionReturnsAType = _functionReturnsAType;
			this.functionActuallyReturns = _functionActuallyReturns;
			this.types.set(node_1043, /*Function*/[10,(() => {
				const result_1061 = [];
				const value_1062 = vars_1045;
				for (const v of $toIterator(value_1062)) result_1061.push(this.types.get(v));
				return result_1061;
			})(),ret_1056]);
		};
		fill(node_1063) {
			const temp_1064 = node_1063;
			switch (temp_1064&&temp_1064[0]) {
			case 25: {
				{
					const t_1065 = temp_1064[1];
					const extend_1066 = temp_1064[2];
					const implement_1067 = temp_1064[3];
					const f_1068 = temp_1064[4];
					const external_1069 = temp_1064[5];
					{
						this.addScope(DataHelper.extractTypeName(t_1065), node_1063);
						this.registerClassType(node_1063);
					};
				}
			} break;
			
			case 37: {
				{
					const t_1070 = temp_1064[1];
					const f_1071 = temp_1064[2];
					const valuesType_1072 = temp_1064[3];
					{
						this.addScope(DataHelper.extractTypeName(t_1070), node_1063);
						this.registerEnumType(node_1063);
					};
				}
			} break;
			
			case 8: {
				{
					const alias = temp_1064[1];
					const value_1073 = temp_1064[2];
					{
						this.types.set(node_1063, /*Alias*/[9,null]);
						this.addScope(this.nameOfModuleItem(node_1063), node_1063);
					};
				}
			} break;
			
			case 24: {
				{
					const e_1074 = temp_1064[1];
					for (const ee of $toIterator(e_1074)) this.fill(ee);
				}
			} break;
			
			case 11: {
				{
					const el_1075 = temp_1064[1];
					{
						this.pushScope();
						for (const e of $toIterator(el_1075)) this.fill(e);
						this.popScope();
					};
				}
			} break;
			
			case 23: {
				{
					const name_1076 = temp_1064[1];
					const t_1077 = temp_1064[2];
					const e_1078 = temp_1064[3];
					const const_1079 = temp_1064[4];
					const external_1080 = temp_1064[5];
					{
						if ((e_1078 == null) && (const_1079) && ((!external_1080))) { Typer.fail(('Constant should have a value `let ' + (name_1076) + ' = value`'), node_1063) };
						if ((e_1078 != null) && (external_1080)) { Typer.fail(('External variable should not have a value `declare let ' + (name_1076) + '`'), node_1063) };
						if ((t_1077 == null) && (external_1080)) { Typer.fail(('External variable should have a type `declare let ' + (name_1076) + ': T`'), node_1063) };
						if (e_1078 != null) {
							this.pushScope();
							this.fillExpression(e_1078);
							this.popScope();
						};
						this.mixVarTypes(t_1077, e_1078, node_1063);
						this.addScope(name_1076, node_1063);
					};
				}
			} break;
			
			case 9: {
				{
					const a_1081 = temp_1064[1];
					const op_1082 = temp_1064[2];
					const b_1083 = temp_1064[3];
					{
						this.fillExpression(a_1081);
						this.fillExpression(b_1083);
						let parent_1084 = this.parents.get(a_1081);
						if (op_1082 == 91) {
							const temp_1085 = parent_1084;
							switch (temp_1085&&temp_1085[0]) {
							case null: case undefined: {
								{
								}
							} break;
							
							case 23: {
								{
									const name_1086 = temp_1085[1];
									const const_1087 = temp_1085[4];
									{
										if (const_1087) { Typer.fail(('Cannot reassign a constant `let ' + (name_1086) + '`, redefine it as `var ' + (name_1086) + '` to allow reassignment\n') + Typer.positionOf(parent_1084) + ('`let ' + (name_1086) + '` is defined here'), node_1063) };
										this.types.set(node_1063, this.unify(this.types.get(a_1081), this.types.get(b_1083), b_1083));
									};
								}
							} break;
							
							case 1: {
								{
									const name_1088 = temp_1085[1];
									Typer.fail(('Cannot reassign case parameter `' + (name_1088) + '`'), node_1063);
								}
							} break;
							
							case 21: {
								{
									const name_1089 = temp_1085[1];
									Typer.fail(('Cannot reassign a function `' + (name_1089) + '`'), node_1063);
								}
							} break;
							
							case 25: {
								Typer.fail('Cannot reassign class', node_1063)
							} break;
							
							case 37: {
								Typer.fail('Cannot reassign enum', node_1063)
							} break;
							
							case 46: {
								{
									const name_1090 = temp_1085[1];
									Typer.fail(('Cannot reassign iterator value `' + (name_1090) + '` of for loop\n') + Typer.positionOf(parent_1084) + ('`for (' + (name_1090) + ' in ...)` is defined here'), node_1063);
								}
							} break;
							
							case 43: {
								{
								}
							} break;
							
							case 4: {
								Typer.fail('Cannot reassign `super`', node_1063)
							} break;
							
							default: 
							Typer.fail('`=` not implemented for: ' + parent_1084, node_1063)
							};
						};
					};
				}
			} break;
			
			case 17: {
				if ((!this.allowBreakAndContinue)) { Typer.fail('Cannot use `break` outside of loop', node_1063) }
			} break;
			
			case 46: {
				{
					const name_1091 = temp_1064[1];
					const over_1092 = temp_1064[2];
					const by_1093 = temp_1064[3];
					const range_1094 = temp_1064[4];
					{
						this.pushScope();
						this.fillExpression(over_1092);
						{
							const temp_1095 = this.types.get(over_1092);
							switch (temp_1095&&temp_1095[0]) {
							case 4: {
								{
									const type_1096 = temp_1095[1];
									const generic_1097 = temp_1095[2];
									if ((generic_1097 != null) && (generic_1097.length == 1)) { this.types.set(node_1063, generic_1097[0]) } else if (generic_1097 == null) { this.types.set(node_1063, this.types.get(over_1092)) } else {
										Typer.fail('Type of iterable is neither Int nor Array ' + Type.stringify(this.types.get(over_1092)), over_1092);
									};
								}
							} break;
							
							case 1: {
								{
								}
							} break;
							
							case null: case undefined: {
								{
								}
							} break;
							
							default: 
							Typer.fail('Type of iterable is neiter Int nor Array', over_1092)
							};
						};
						{
							let step_1098 = 0;
							const range_1099 = range_1094;
							if (step_1098 == 0 && range_1099 != null) { step_1098 = 1 };
							if (step_1098 == 1) {
								this.fillExpression(range_1099);
								this.types.set(node_1063, this.toType(/*Type*/[1,'Int'], node_1063));
							};
						};
						this.addScope(name_1091, node_1063);
						const _allowBreakAndContinue = this.allowBreakAndContinue;
						this.allowBreakAndContinue = true;
						this.fill(by_1093);
						this.allowBreakAndContinue = _allowBreakAndContinue;
						this.popScope();
					};
				}
			} break;
			
			case 21: {
				{
					const name_1100 = temp_1064[1];
					const expr_1101 = temp_1064[2];
					const vars_1102 = temp_1064[3];
					const rettype_1103 = temp_1064[4];
					const external_1104 = temp_1064[5];
					{
						if (((!external_1104)) && (expr_1101 == null)) { Typer.fail(('Non-external function `' + (name_1100) + '` should have a body'), node_1063) };
						if ((external_1104) && (rettype_1103 == null)) { Typer.fail(('External function `' + (name_1100) + '` should have a returning type'), node_1063) };
						this.addScope(name_1100, node_1063);
						this.fillFunction(node_1063, expr_1101, vars_1102, rettype_1103);
						if (false) {
							const _insideFunction_1105 = this.insideFunction;
							this.insideFunction = true;
							this.pushScope();
							if (expr_1101 != null) { this.fill(expr_1101) };
							this.popScope();
							this.insideFunction = _insideFunction_1105;
						};
					};
				}
			} break;
			
			case 13: {
				{
					const econd_1106 = temp_1064[1];
					const eif_1107 = temp_1064[2];
					const eelse_1108 = temp_1064[3];
					{
						let depth = 0;
						for (const e of $toIterator(econd_1106)) {
							const temp_1109 = e;
							switch (temp_1109&&temp_1109[0]) {
							case 23: {
								{
									const name_1110 = temp_1109[1];
									const t_1111 = temp_1109[2];
									const expr_1112 = temp_1109[3];
									const const_1113 = temp_1109[4];
									{
										if ((!const_1113)) { Typer.fail('Only if-let bindings supported, not if-var', node_1063) };
										if (t_1111 != null) { Typer.fail('Do not specify a type `: T` in if-let bindings', node_1063) };
										if (expr_1112 == null) { Typer.fail(('if-let binding should have a value `' + (name_1110) + ' = value'), node_1063) };
										depth++;
										this.pushScope();
										this.pushScope();
										this.fillExpression(expr_1112);
										this.popScope();
										{
											const temp_1114 = this.types.get(expr_1112);
											switch (temp_1114&&temp_1114[0]) {
											case 2: {
												{
													const t_1115 = temp_1114[1];
													this.types.set(e, t_1115);
												}
											} break;
											
											default: 
											this.types.set(e, this.types.get(expr_1112))
											};
										};
										this.addScope(name_1110, e);
									};
								}
							} break;
							
							default: 
							{
								this.fillExpression(e);
								const type_1116 = this.types.get(e);
								if ((type_1116 != this.typeBool) && (type_1116 != this.typeAny) && (type_1116 != null)) { Typer.fail('`if (value)` expects `value` only of type `Bool`, but got `' + Type.stringify(this.types.get(e)) + '`', e) };
							}
							};
						};
						this.fill(eif_1107);
						while (depth > 0) {
							depth--;
							this.popScope();
						};
						if (eelse_1108 != null) { this.fill(eelse_1108) };
					};
				}
			} break;
			
			case 34: {
				{
					const exprs_1117 = temp_1064[1];
					const conds_1118 = temp_1064[2];
					const guards_1119 = temp_1064[3];
					const cases_1120 = temp_1064[4];
					this.fillSwitch(node_1063, false);
				}
			} break;
			
			case 27: {
				{
					const e_1121 = temp_1064[1];
					const t_1122 = temp_1064[2];
					const v_1123 = temp_1064[3];
					const ca = temp_1064[4];
					{
						const _insideTry_1124 = this.insideTry;
						this.insideTry = true;
						this.fill(e_1121);
						this.insideTry = _insideTry_1124;
						{
							let i_1125 = 0;
							let it_1126 = 0;
							let at_1127 = ca.length;
							while (it_1126 < at_1127) {
								i_1125 = it_1126;
								it_1126++;
								{
									const type_1128 = this.toType(t_1122[i_1125], ca[i_1125]);
									{
										const temp_1129 = type_1128;
										switch (temp_1129&&temp_1129[0]) {
										case 11: {
											Typer.fail('Catch type must be a specific class, not `{}`', ca[i_1125])
										} break;
										
										case 10: {
											Typer.fail('Catch type must be a specific class, not function', ca[i_1125])
										} break;
										};
									};
									this.types.set(t_1122[i_1125], type_1128);
									this.pushScope();
									this.scopes[this.scopes.length - 1].set(DataHelper.varName(v_1123[i_1125]), v_1123[i_1125]);
									this.fill(ca[i_1125]);
									this.popScope();
								};
							};
						};
					};
				}
			} break;
			
			case 20: {
				{
					const econd_1130 = temp_1064[1];
					const e_1131 = temp_1064[2];
					const pre_1132 = temp_1064[3];
					{
						if (pre_1132 == true) { this.fillExpression(econd_1130) };
						const _allowBreakAndContinue_1133 = this.allowBreakAndContinue;
						this.allowBreakAndContinue = true;
						this.fill(e_1131);
						this.allowBreakAndContinue = _allowBreakAndContinue_1133;
						if (pre_1132 == false) { this.fillExpression(econd_1130) };
						this.types.set(node_1063, this.typeVoid);
					};
				}
			} break;
			
			case 18: {
				{
					this.types.set(node_1063, this.typeVoid);
					if ((!this.allowBreakAndContinue)) { Typer.fail('Cannot use `continue` outside of loop', node_1063) };
				}
			} break;
			
			default: 
			this.fillExpression(node_1063)
			};
		};
		fillExpression(node_1134) {
			const temp_1135 = node_1134;
			switch (temp_1135&&temp_1135[0]) {
			case 1: {
				{
					const name_1136 = temp_1135[1];
					{
						let subj_1137 = null;
						{
							let i_1138 = 0;
							let it_1139 = 0;
							let at_1140 = this.scopes.length;
							while (it_1139 < at_1140) {
								i_1138 = it_1139;
								it_1139++;
								{
									subj_1137 = this.scopes[this.scopes.length - i_1138 - 1].get(name_1136);
									if (subj_1137 != null) { break };
								};
							};
						};
						if (subj_1137 == null) { subj_1137 = this.findInNamespaceRoots(name_1136) };
						if ((subj_1137 == null) && (name_1136 == 'const')) { Typer.fail('No variable named `const` found. Are you trying to use `const` as a keyword? Use `let varname` syntax instead.', node_1134) };
						if (subj_1137 == null) { Typer.fail(('Cannot find variable with name `' + (name_1136) + '`'), node_1134) };
						if ((this.parents.get(node_1134) != null) && (this.parents.get(node_1134) != subj_1137)) { Typer.fail(('Parent overwitten from ' + (this.parents.get(node_1134)) + ' to ' + (subj_1137) + ' for node ' + (node_1134) + '') + '. This should never happen. Probably incomplete feature was used. Ping a compiler developer with a code sample.', node_1134) };
						this.parents.set(node_1134, subj_1137);
						{
							let step_1141 = 0;
							const type_1142 = this.types.get(subj_1137);
							if (step_1141 == 0 && type_1142 != null) { step_1141 = 1 };
							if (step_1141 == 1) { this.types.set(node_1134, type_1142) };
						};
					};
				}
			} break;
			
			case 22: {
				{
					const expr_1143 = temp_1135[1];
					const vars_1144 = temp_1135[2];
					const rettype_1145 = temp_1135[3];
					{
						this.fillFunction(node_1134, expr_1143, vars_1144, rettype_1145, true);
						if (false) {
							this.pushScope();
							const _insideFunction_1146 = this.insideFunction;
							this.insideFunction = true;
							this.fillExpression(expr_1143);
							this.popScope();
							this.insideFunction = _insideFunction_1146;
						};
					};
				}
			} break;
			
			case 21: {
				{
					const name_1147 = temp_1135[1];
					const expr_1148 = temp_1135[2];
					const vars_1149 = temp_1135[3];
					const rettype_1150 = temp_1135[4];
					const external_1151 = temp_1135[5];
					{
						if (external_1151) { Typer.fail(('External function `declare function ' + (name_1147) + '` cannot be taken as a value'), node_1134) };
						this.fillFunction(node_1134, expr_1148, vars_1149, rettype_1150);
						if (false) {
							this.pushScope();
							this.addScope(name_1147, node_1134);
							const _insideFunction_1152 = this.insideFunction;
							this.insideFunction = true;
							if (expr_1148 != null) { this.fill(expr_1148) };
							this.popScope();
							this.insideFunction = _insideFunction_1152;
						};
					};
				}
			} break;
			
			case 31: {
				{
					const el_1153 = temp_1135[1];
					{
						const temp_1154 = el_1153[0];
						switch (temp_1154&&temp_1154[0]) {
						case 46: {
							{
								const name_1155 = temp_1154[1];
								const over_1156 = temp_1154[2];
								const by_1157 = temp_1154[3];
								const range_1158 = temp_1154[4];
								{
									if (el_1153.length > 1) { Typer.fail('Cannot use loop `for` within array of more than one element `[for(), ...]`', el_1153[1]) };
									if (range_1158 != null) { Typer.fail('Ranges `...range` are not supported here yet', range_1158) };
									this.pushScope();
									this.fillExpression(over_1156);
									this.types.set(el_1153[0], this.types.get(over_1156));
									this.addScope(name_1155, el_1153[0]);
									const _allowBreakAndContinue_1159 = this.allowBreakAndContinue;
									this.allowBreakAndContinue = false;
									this.fillExpression(by_1157);
									this.allowBreakAndContinue = _allowBreakAndContinue_1159;
									this.popScope();
									this.types.set(node_1134, this.typeArray.instantiateGeneric([this.types.get(by_1157)]));
								};
							}
						} break;
						
						default: 
						{
							for (const e of $toIterator(el_1153)) this.fillExpression(e);
							this.types.set(node_1134, this.typeArray.instantiateGeneric([this.types.get(el_1153[0])]));
						}
						};
					};
				}
			} break;
			
			case 32: {
				{
					const keys_1160 = temp_1135[1];
					const values_1161 = temp_1135[2];
					{
						if (keys_1160.length == 0) {
							this.types.set(node_1134, this.typeMap.instantiateGeneric([/*Unknown*/[0,{value:null}], /*Unknown*/[0,{value:null}]]));
							return;
						};
						{
							let i_1162 = 0;
							let it_1163 = 0;
							let at_1164 = keys_1160.length;
							while (it_1163 < at_1164) {
								i_1162 = it_1163;
								it_1163++;
								{
									this.fillExpression(keys_1160[i_1162]);
									this.fillExpression(values_1161[i_1162]);
								};
							};
						};
						this.types.set(node_1134, this.typeMap.instantiateGeneric([this.types.get(keys_1160[0]), this.types.get(values_1161[0])]));
					};
				}
			} break;
			
			case 41: {
				{
					const e_1165 = temp_1135[1];
					const kind_1166 = temp_1135[2];
					const t_1167 = temp_1135[3];
					{
						const type_1168 = this.toType(t_1167, node_1134);
						if (type_1168 == this.typeVoid) { Typer.fail('Conversion `as Void` makes no sense', e_1165) };
						this.fillExpression(e_1165);
						if (this.types.get(e_1165) == this.typeVoid) { Typer.fail(('Conversion of `value as ' + (Type.stringify(t_1167)) + '` where `value` is of type `Void` makes no sense'), e_1165) };
						this.types.set(t_1167, type_1168);
						this.types.set(node_1134, type_1168);
					};
				}
			} break;
			
			case 40: {
				{
					const e_1169 = temp_1135[1];
					const t_1170 = temp_1135[2];
					{
						const type_1171 = this.toType(t_1170, node_1134);
						if (type_1171 == this.typeAny) { Typer.fail('Comparing `is Any` makes no sense, always true', e_1169) };
						if (type_1171 == this.typeVoid) { Typer.fail('Comparing `is Void` makes no sense', e_1169) };
						this.fillExpression(e_1169);
						this.types.set(t_1170, type_1171);
						this.types.set(node_1134, this.typeBool);
					};
				}
			} break;
			
			case 11: {
				{
					const el_1172 = temp_1135[1];
					if (el_1172.length == 0) { this.types.set(node_1134, /*Struct*/[11,[],[]]) } else {
						this.pushScope();
						{
							let i_1173 = 0;
							let it_1174 = 0;
							let at_1175 = el_1172.length;
							while (it_1174 < at_1175) {
								i_1173 = it_1174;
								it_1174++;
								if (i_1173 < el_1172.length - 1) { this.fill(el_1172[i_1173]) };
							};
						};
						const latest = el_1172[el_1172.length - 1];
						this.fillExpression(latest);
						this.types.set(node_1134, this.types.get(latest));
						this.popScope();
					};
				}
			} break;
			
			case 28: {
				{
					const e_1176 = temp_1135[1];
					const n_1177 = temp_1135[2];
					{
						{
							const temp_1178 = e_1176;
							switch (temp_1178&&temp_1178[0]) {
							case 4: {
								if ((!this.allowSuper)) { Typer.fail('Cannot access `super` here', node_1134) }
							} break;
							
							default: 
							this.fillExpression(e_1176)
							};
						};
						{
							let step_1179 = 0;
							const etype = this.types.get(e_1176);
							if (step_1179 == 0 && etype != null) { step_1179 = 1 };
							if (step_1179 == 1) {
								const temp_1180 = etype;
								switch (temp_1180&&temp_1180[0]) {
								case 4: {
									{
										const type_1181 = temp_1180[1];
										{
											type_1181.useless = false;
											if (etype == this.typeAny) {
												this.types.set(node_1134, this.typeAny);
												return;
											};
											const index_1182 = type_1181.fieldNames.indexOf(n_1177);
											if (index_1182 < 0) { Typer.fail(('Class `' + (this.nameOfModuleItem(type_1181.parent)) + '` has no field `.' + (n_1177) + '`\nAvailable fields are: ') + type_1181.fieldNames.join(', '), (() => {
												const result_1183 = e_1176;
												if (result_1183 != null) { return result_1183 };
												return node_1134;
											})()) };
											if (type_1181.fieldStatic[index_1182] == true) { Typer.fail(('Class `' + (this.nameOfModuleItem(type_1181.parent)) + '` field `.' + (n_1177) + '` is static'), node_1134) };
											{
												const temp_1184 = type_1181.parent;
												switch (temp_1184&&temp_1184[0]) {
												case 25: {
													{
														const t_1185 = temp_1184[1];
														const extend_1186 = temp_1184[2];
														const implement_1187 = temp_1184[3];
														const fields_1188 = temp_1184[4];
														const external_1189 = temp_1184[5];
														{
															this.registerClassType(type_1181.parent);
															for (const field of $toIterator(fields_1188)) if (DataHelper.nameOf(field) == n_1177) {
																this.types.set(node_1134, this.types.get(field));
																this.parents.set(node_1134, field);
																if (this.types.get(field) == null) {
																	console.log(Typer.positionOf(node_1134) + ('Note: field fieldInitialized[' + (n_1177) + '] ='), type_1181.fieldInitialized[type_1181.fieldNames.indexOf(n_1177)]);
																	Typer.fail('Type for this field is null: ' + n_1177, field);
																};
															};
														};
													}
												} break;
												
												default: 
												Typer.fail(type_1181.parent, type_1181.parent)
												};
											};
										};
									}
								} break;
								
								case 3: {
									{
										const type_1190 = temp_1180[1];
										{
											type_1190.useless = false;
											const index_1191 = type_1190.fieldNames.indexOf(n_1177);
											if (index_1191 < 0) { Typer.fail(('Class `' + (this.nameOfModuleItem(type_1190.parent)) + '` has no static field `.' + (n_1177) + '`\nAvailable fields are: ') + type_1190.fieldNames.join(', '), node_1134) };
											if (type_1190.fieldStatic[index_1191] != true) { Typer.fail(('Class `' + (this.nameOfModuleItem(type_1190.parent)) + '` field `.' + (n_1177) + '` is not static'), node_1134) };
											{
												const temp_1192 = type_1190.parent;
												switch (temp_1192&&temp_1192[0]) {
												case 25: {
													{
														const t_1193 = temp_1192[1];
														const extend_1194 = temp_1192[2];
														const implement_1195 = temp_1192[3];
														const fields_1196 = temp_1192[4];
														const external_1197 = temp_1192[5];
														for (const field of $toIterator(fields_1196)) if (DataHelper.nameOf(field) == n_1177) {
															this.types.set(node_1134, this.types.get(field));
															this.parents.set(node_1134, field);
														};
													}
												} break;
												
												default: 
												Typer.fail(type_1190.parent, type_1190.parent)
												};
											};
										};
									}
								} break;
								
								case 6: {
									{
										const type_1198 = temp_1180[1];
										{
											const index_1199 = type_1198.fieldNames.indexOf(n_1177);
											if (index_1199 < 0) { Typer.fail(('Enum `' + (type_1198.name) + '` has no field `.' + (n_1177) + '`'), node_1134) };
											if (type_1198.fieldStatic[index_1199] != true) { Typer.fail(('Enum field `.' + (n_1177) + '` is not static'), node_1134) };
											{
												const temp_1200 = type_1198.parent;
												switch (temp_1200&&temp_1200[0]) {
												case 37: {
													{
														const t_1201 = temp_1200[1];
														const fields_1202 = temp_1200[2];
														const valuesType_1203 = temp_1200[3];
														for (const field of $toIterator(fields_1202)) {
															const temp_1204 = field;
															switch (temp_1204&&temp_1204[0]) {
															case 12: {
																{
																}
															} break;
															
															case 48: {
																{
																}
															} break;
															
															case 9: {
																{
																}
															} break;
															
															default: 
															if (DataHelper.nameOf(field) == n_1177) {
																this.types.set(node_1134, this.types.get(field));
																this.parents.set(node_1134, field);
															}
															};
														};
													}
												} break;
												
												default: 
												Typer.fail(type_1198.parent, type_1198.parent)
												};
											};
										};
									}
								} break;
								
								case 11: {
									{
										const names_1205 = temp_1180[1];
										const els_1206 = temp_1180[2];
										{
											const index_1207 = names_1205.indexOf(n_1177);
											if (index_1207 < 0) {
												let object_1208 = '';
												{
													const temp_1209 = e_1176;
													switch (temp_1209&&temp_1209[0]) {
													case 1: {
														{
															const name_1210 = temp_1209[1];
															object_1208 = (' `' + (name_1210) + '`');
														}
													} break;
													
													default: 
													{
													}
													};
												};
												if (names_1205.length == 0) { Typer.fail(('Object' + (object_1208) + ' is empty `{}` and has no fields. Create object with all fields defined upfront, like this: `obj = { ' + (n_1177) + ': value }`'), node_1134) };
												if (names_1205.length != 0) { Typer.fail(('Object' + (object_1208) + ' has no field `.' + (n_1177) + '`\nAvailable fields are: ') + names_1205.join(', '), node_1134) };
											};
											this.types.set(node_1134, els_1206[index_1207]);
										};
									}
								} break;
								
								case null: case undefined: {
									{
									}
								} break;
								
								default: 
								{
								}
								};
							};
						};
					};
				}
			} break;
			
			case 29: {
				{
					const e_1211 = temp_1135[1];
					const n_1212 = temp_1135[2];
					{
						{
							const temp_1213 = e_1211;
							switch (temp_1213&&temp_1213[0]) {
							case 4: {
								Typer.fail('Cannot access `super` here', node_1134)
							} break;
							};
						};
						this.fillExpression(e_1211);
						{
							const temp_1214 = this.types.get(e_1211);
							switch (temp_1214&&temp_1214[0]) {
							case 3: {
								{
									const type_1215 = temp_1214[1];
									{
										const index_1216 = type_1215.fieldNames.indexOf(n_1212);
										if (index_1216 < 0) { Typer.fail(('Class has no field `.' + (n_1212) + '`'), node_1134) };
										if (type_1215.fieldStatic[index_1216] != true) { Typer.fail(('Class field `.' + (n_1212) + '` is not static'), node_1134) };
									};
								}
							} break;
							
							case 6: {
								{
									const type_1217 = temp_1214[1];
									{
										const index_1218 = type_1217.fieldNames.indexOf(n_1212);
										if (index_1218 < 0) { Typer.fail(('Enum has no value constructor `.' + (n_1212) + '`\n') + this.proposeSimilar(type_1217.fieldNames.filter((element, index_1219) => (type_1217.fieldEnumConstructor[index_1219])), n_1212, 'constructors'), node_1134) };
										if (type_1217.fieldEnumConstructor[index_1218] != true) { Typer.fail(('Enum field `.' + (n_1212) + '` is not a value constructor'), node_1134) };
										{
											let step_1220 = 0;
											const fieldType = type_1217.fieldType[index_1218];
											if (step_1220 == 0 && fieldType != null) { step_1220 = 1 };
											if (step_1220 == 1) { this.types.set(node_1134, fieldType) } else Typer.fail(('Enum field type is null for `' + (Node.stringify(node_1134)) + '`'), node_1134);
										};
									};
								}
							} break;
							
							case null: case undefined: {
								Typer.fail(('Doing .Upper `' + (Node.stringify(node_1134)) + '` over `' + (Node.stringify(e_1211)) + '` (' + (e_1211) + ') of type null'), node_1134)
							} break;
							
							default: 
							{
							}
							};
						};
					};
				}
			} break;
			
			case 48: {
				{
					const t_1221 = temp_1135[1];
					{
						const temp_1222 = t_1221;
						switch (temp_1222&&temp_1222[0]) {
						case 1: {
							{
								const name_1223 = temp_1222[1];
								{
									const subj_1224 = this.find(name_1223);
									if (subj_1224 == null) { Typer.fail(('Cannot find type with name `' + (name_1223) + '`'), node_1134) };
									if ((this.parents.get(node_1134) != null) && (this.parents.get(node_1134) != subj_1224)) { Typer.fail(('Parent overwitten from ' + (this.parents.get(node_1134)) + ' to ' + (subj_1224) + ' for node ' + (node_1134) + '') + '. This should never happen. Probably incomplete feature was used. Ping a compiler developer with a code sample.', node_1134) };
									this.parents.set(node_1134, subj_1224);
									{
										let step_1225 = 0;
										const type_1226 = this.types.get(subj_1224);
										if (step_1225 == 0 && type_1226 != null) { step_1225 = 1 };
										if (step_1225 == 1) { this.types.set(node_1134, type_1226) } else {
											{
												const temp_1227 = subj_1224;
												switch (temp_1227&&temp_1227[0]) {
												case 25: {
													this.registerClassType(subj_1224)
												} break;
												
												case 37: {
													this.registerEnumType(subj_1224)
												} break;
												};
											};
											{
												let step_1228 = 0;
												const type_1229 = this.types.get(subj_1224);
												if (step_1228 == 0 && type_1229 != null) { step_1228 = 1 };
												if (step_1228 == 1) { this.types.set(node_1134, type_1229) } else {
													console.log(Typer.positionOf(subj_1224) + ('' + (name_1223) + ' is here'));
													Typer.fail(('Cannot find type for `' + (name_1223) + '` even after late build') + '. This should never happen. Probably incomplete feature was used. Ping a compiler developer with a code sample.', node_1134);
												};
											};
										};
									};
								};
							}
						} break;
						
						case 2: {
							{
								const name_1230 = temp_1222[1];
								Typer.fail(('Cannot use generic type `' + (name_1230) + '` as a value'), node_1134);
							}
						} break;
						
						default: 
						Typer.fail('Cannot use this type as a value', node_1134)
						};
					};
				}
			} break;
			
			case 30: {
				{
					const path_1231 = temp_1135[1];
					const t_1232 = temp_1135[2];
					const el_1233 = temp_1135[3];
					const names_1234 = temp_1135[4];
					const values_1235 = temp_1135[5];
					{
						const type_1236 = this.toType(t_1232, node_1134);
						const subj_1237 = this.find(DataHelper.extractTypeName(t_1232));
						this.parents.set(node_1134, subj_1237);
						for (const e of $toIterator(el_1233)) this.fillExpression(e);
						{
							const temp_1238 = type_1236;
							switch (temp_1238&&temp_1238[0]) {
							case 4: {
								{
									const type_1239 = temp_1238[1];
									{
										if (type_1239.constructor == (-1)) { Typer.fail('Cannot construct class without `new () {}` constructor', node_1134) };
										type_1239.useless = false;
									};
								}
							} break;
							
							default: 
							Typer.fail('Constructor `new` may instantiate only classes', node_1134)
							};
						};
						this.types.set(node_1134, type_1236);
					};
				}
			} break;
			
			case 36: {
				{
					const names_1240 = temp_1135[1];
					const el_1241 = temp_1135[2];
					{
						{
							let name_1242 = 0;
							let it_1243 = 0;
							let at_1244 = names_1240.length;
							while (it_1243 < at_1244) {
								name_1242 = it_1243;
								it_1243++;
								if (names_1240.indexOf(names_1240[name_1242]) != name_1242) { Typer.fail(('Field `' + (names_1240[name_1242]) + '` already exists'), node_1134) };
							};
						};
						for (const e of $toIterator(el_1241)) this.fillExpression(e);
						const els_1245 = (() => {
							const result_1246 = [];
							const value_1247 = el_1241;
							for (const e of $toIterator(value_1247)) result_1246.push(this.types.get(e));
							return result_1246;
						})();
						this.types.set(node_1134, /*Struct*/[11,names_1240,els_1245]);
					};
				}
			} break;
			
			case 27: {
				{
					const e_1248 = temp_1135[1];
					const t_1249 = temp_1135[2];
					const v_1250 = temp_1135[3];
					const ca_1251 = temp_1135[4];
					{
						const _insideTry_1252 = this.insideTry;
						this.insideTry = true;
						this.fillExpression(e_1248);
						this.insideTry = _insideTry_1252;
						{
							let i_1253 = 0;
							let it_1254 = 0;
							let at_1255 = ca_1251.length;
							while (it_1254 < at_1255) {
								i_1253 = it_1254;
								it_1254++;
								{
									this.pushScope();
									this.scopes[this.scopes.length - 1].set(DataHelper.varName(v_1250[i_1253]), v_1250[i_1253]);
									this.fill(ca_1251[i_1253]);
									this.popScope();
								};
							};
						};
						this.types.set(node_1134, this.types.get(e_1248));
					};
				}
			} break;
			
			case 13: {
				{
					const econd_1256 = temp_1135[1];
					const eif_1257 = temp_1135[2];
					const eelse_1258 = temp_1135[3];
					{
						if (econd_1256.length > 1) { Typer.fail('More than one condition is not yet supported', econd_1256[1]) };
						{
							const temp_1259 = econd_1256[0];
							switch (temp_1259&&temp_1259[0]) {
							case 23: {
								Typer.fail('Variable bindings in ternary conditions are not yet supported', econd_1256[0])
							} break;
							};
						};
						if (eelse_1258 == null) { Typer.fail('Expression `if` should have an `else` clause', eif_1257) };
						this.fillExpression(econd_1256[0]);
						this.fillExpression(eif_1257);
						this.fillExpression(eelse_1258);
						this.types.set(node_1134, this.unify(this.types.get(eif_1257), this.types.get(eelse_1258), eelse_1258));
					};
				}
			} break;
			
			case 7: {
				this.types.set(node_1134, /*UnknownNullable*/[1,{value:null}])
			} break;
			
			case 0: {
				this.types.set(node_1134, this.typeString)
			} break;
			
			case 2: {
				this.types.set(node_1134, this.typeBool)
			} break;
			
			case 5: {
				this.types.set(node_1134, this.typeInt)
			} break;
			
			case 6: {
				this.types.set(node_1134, this.typeFloat)
			} break;
			
			case 14: {
				{
					const e_1260 = temp_1135[1];
					{
						this.fillExpression(e_1260);
						this.types.set(node_1134, this.types.get(e_1260));
					};
				}
			} break;
			
			case 47: {
				{
					const a_1261 = temp_1135[1];
					const b_1262 = temp_1135[2];
					{
						this.fillExpression(a_1261);
						this.fillExpression(b_1262);
						this.unify(this.types.get(a_1261), this.types.get(b_1262), b_1262);
						this.types.set(node_1134, this.types.get(b_1262));
					};
				}
			} break;
			
			case 12: {
				{
					const e_1263 = temp_1135[1];
					const el_1264 = temp_1135[2];
					const elNames = temp_1135[3];
					{
						{
							const temp_1265 = e_1263;
							switch (temp_1265&&temp_1265[0]) {
							case 4: {
								if ((!this.allowSuper)) { Typer.fail('Cannot access `super` here', node_1134) }
							} break;
							
							default: 
							this.fillExpression(e_1263)
							};
						};
						for (const e of $toIterator(el_1264)) this.fillExpression(e);
						{
							const temp_1266 = this.types.get(e_1263);
							switch (temp_1266&&temp_1266[0]) {
							case 10: {
								{
									const args_1267 = temp_1266[1];
									const returns = temp_1266[2];
									{
										{
											let i_1268 = 0;
											let it_1269 = 0;
											let at_1270 = el_1264.length;
											while (it_1269 < at_1270) {
												i_1268 = it_1269;
												it_1269++;
												{
													let step_1271 = 0;
													const arg_1272 = args_1267[i_1268];
													if (step_1271 == 0 && arg_1272 != null) { step_1271 = 1 };
													if (step_1271 == 1) { this.unify(arg_1272, this.types.get(el_1264[i_1268]), el_1264[i_1268]) };
												};
											};
										};
										this.types.set(node_1134, returns);
									};
								}
							} break;
							
							case 8: {
								{
									const type_1273 = temp_1266[1];
									const tag_1274 = temp_1266[2];
									{
										const name_1275 = type_1273.fieldNames[tag_1274];
										if (el_1264.length < type_1273.tagBindVars[tag_1274].length) { Typer.fail(('Not enough enum parameters, required `' + (name_1275) + '` parameters are: ') + type_1273.tagBindVarsNames[tag_1274].join(', '), node_1134) };
										if (el_1264.length > type_1273.tagBindVars[tag_1274].length) { Typer.fail(('Too many enum parameters, required `' + (name_1275) + '` parameters are: ') + type_1273.tagBindVarsNames[tag_1274].join(', '), node_1134) };
										if (el_1264.length == 0) { Typer.fail('Use syntax without empty `()`', node_1134) };
										this.types.set(node_1134, /*EnumInstance*/[7,type_1273,tag_1274]);
									};
								}
							} break;
							
							case null: case undefined: {
								{
								}
							} break;
							
							default: 
							if (this.types.get(e_1263) == this.typeAny) { this.types.set(node_1134, this.typeAny) } else Typer.fail('Calling *not* a function, type is `' + Type.stringify(this.types.get(e_1263)) + '`', e_1263)
							};
						};
					};
				}
			} break;
			
			case 9: {
				{
					const a_1276 = temp_1135[1];
					const op_1277 = temp_1135[2];
					const b_1278 = temp_1135[3];
					{
						this.fill(a_1276);
						this.fillExpression(b_1278);
						if ((op_1277 == 111) && (this.types.get(a_1276) == this.typeString)) { this.types.set(node_1134, this.types.get(a_1276)) } else if (op_1277 == 97 || op_1277 == 96 || op_1277 == 100 || op_1277 == 99 || op_1277 == 92 || op_1277 == 93 || op_1277 == 95 || op_1277 == 103) { this.types.set(node_1134, this.typeBool) } else this.types.set(node_1134, (() => {
							const result_1279 = this.types.get(b_1278);
							if (result_1279 != null) { return result_1279 };
							return this.types.get(a_1276);
						})());
					};
				}
			} break;
			
			case 19: {
				{
					const op_1280 = temp_1135[1];
					const postfix_1281 = temp_1135[2];
					const e_1282 = temp_1135[3];
					{
						this.fillExpression(e_1282);
						if ((op_1280 == 89) && ((!postfix_1281))) {
							const type_1283 = this.types.get(e_1282);
							if ((type_1283 != this.typeBool) && (type_1283 != this.typeAny) && (type_1283 != null)) { Typer.fail(('Operator `!value` takes `value` of type `Bool` only, but got `' + (Type.stringify(this.types.get(e_1282))) + '`'), e_1282) };
							this.types.set(node_1134, this.toType(/*Type*/[1,'Bool'], node_1134));
							return;
						};
						this.types.set(node_1134, this.types.get(e_1282));
						const mutates = op_1280 == 87 || op_1280 == 86;
						if ((!mutates)) { return };
						let parent_1284 = this.parents.get(e_1282);
						{
							const temp_1285 = parent_1284;
							switch (temp_1285&&temp_1285[0]) {
							case 23: {
								{
									const name_1286 = temp_1285[1];
									const const_1287 = temp_1285[4];
									if (const_1287) { Typer.fail(('Cannot change a constant `let ' + (name_1286) + '`, redefine it as `var ' + (name_1286) + '` to allow value changes\n') + Typer.positionOf(parent_1284) + ('`let ' + (name_1286) + '` is defined here'), node_1134) };
								}
							} break;
							
							case 21: {
								{
									const name_1288 = temp_1285[1];
									Typer.fail(('Cannot `' + (Token.stringify(op_1280)) + '` a function `' + (name_1288) + '`'), node_1134);
								}
							} break;
							
							case 46: {
								{
									const name_1289 = temp_1285[1];
									Typer.fail(('Cannot change iterator value `' + (name_1289) + '` of for loop\n') + Typer.positionOf(parent_1284) + ('`for (' + (name_1289) + ' in ...)` is defined here'), node_1134);
								}
							} break;
							
							case 43: {
								{
									const f_1290 = temp_1285[1];
									{
										const temp_1291 = f_1290;
										switch (temp_1291&&temp_1291[0]) {
										case 21: {
											{
												const name_1292 = temp_1291[1];
												Typer.fail(('Cannot `' + (Token.stringify(op_1280)) + '` a static function `' + (name_1292) + '`'), node_1134);
											}
										} break;
										
										case 23: {
											{
												const name_1293 = temp_1291[1];
												const const_1294 = temp_1291[4];
												if (const_1294) { Typer.fail(('Cannot change a constant `static let ' + (name_1293) + '`, redefine it as `static var ' + (name_1293) + '` to allow value changes\n') + Typer.positionOf(parent_1284) + ('`static let ' + (name_1293) + '` is defined here'), node_1134) };
											}
										} break;
										};
									};
								}
							} break;
							
							default: 
							{
								const temp_1295 = e_1282;
								switch (temp_1295&&temp_1295[0]) {
								case 33: {
									{
									}
								} break;
								
								default: 
								{
									const ops = (87)? ('increment `++`') : 'decrement `--`';
									Typer.fail(('You can ' + (ops) + ' only a variable, .field or array element'), node_1134);
								}
								};
							}
							};
						};
					};
				}
			} break;
			
			case 33: {
				{
					const e_1296 = temp_1135[1];
					const i_1297 = temp_1135[2];
					{
						this.fillExpression(e_1296);
						this.fillExpression(i_1297);
						let indexableIsAny = false;
						{
							const temp_1298 = this.types.get(e_1296);
							switch (temp_1298&&temp_1298[0]) {
							case 4: {
								{
									const type_1299 = temp_1298[1];
									const generic_1300 = temp_1298[2];
									if (type_1299.name == 'Any') { indexableIsAny = true };
								}
							} break;
							};
						};
						if ((!indexableIsAny)) {
							const temp_1301 = this.types.get(i_1297);
							switch (temp_1301&&temp_1301[0]) {
							case 4: {
								{
									const type_1302 = temp_1301[1];
									if ((type_1302.name != 'Int') && (type_1302.name != 'Any')) { Typer.fail('`value[i]` expects `i` only of type `Int`, but got `' + Type.stringify(this.types.get(i_1297)) + '`', e_1296) };
								}
							} break;
							
							case null: case undefined: {
								{
								}
							} break;
							
							default: 
							Typer.fail('`value[i]`????? expects `i` only of type `Int`, but got `' + Type.stringify(this.types.get(i_1297)) + '`', e_1296)
							};
						};
						{
							const temp_1303 = this.types.get(e_1296);
							switch (temp_1303&&temp_1303[0]) {
							case 4: {
								{
									const type_1304 = temp_1303[1];
									const generic_1305 = temp_1303[2];
									if ((generic_1305 != null) && (generic_1305.length == 1)) { this.types.set(node_1134, generic_1305[0]) } else if (['Array', 'Buffer', 'Uint8Array', 'Uint32Array'].includes(type_1304.name)) { this.types.set(node_1134, this.toType(/*Type*/[1,'Int'], node_1134)) } else if (['Any'].includes(type_1304.name)) { this.types.set(node_1134, this.toType(/*Type*/[1,'Any'], node_1134)) } else Typer.fail('value[i] generic is null or >1', e_1296);
								}
							} break;
							
							case null: case undefined: {
								{
								}
							} break;
							
							default: 
							{
							}
							};
						};
					};
				}
			} break;
			
			case 10: {
				{
					const a_1306 = temp_1135[1];
					const op_1307 = temp_1135[2];
					const b_1308 = temp_1135[3];
					{
						if (op_1307 == 95) { Typer.fail('`===` not supported, use `strictEqual`', node_1134) };
						if (op_1307 == 95) { Typer.fail('`!==` not supported, use `strictNotEqual`', node_1134) };
						this.fillExpression(a_1306);
						let parent_1309 = this.parents.get(a_1306);
						{
							const temp_1310 = parent_1309;
							switch (temp_1310&&temp_1310[0]) {
							case 23: {
								{
									const name_1311 = temp_1310[1];
									const const_1312 = temp_1310[4];
									if (const_1312) { Typer.fail(('Cannot change a constant `let ' + (name_1311) + '`, redefine it as `var ' + (name_1311) + '` to allow value changes\n') + Typer.positionOf(parent_1309) + ('`let ' + (name_1311) + '` is defined here'), node_1134) };
								}
							} break;
							
							case 21: {
								{
									const name_1313 = temp_1310[1];
									Typer.fail(('Cannot reassign a function `' + (name_1313) + '`'), node_1134);
								}
							} break;
							
							case 46: {
								{
									const name_1314 = temp_1310[1];
									Typer.fail(('Cannot change iterator value `' + (name_1314) + '` of for loop\n') + Typer.positionOf(parent_1309) + ('`for (' + (name_1314) + ' in ...)` is defined here'), node_1134);
								}
							} break;
							
							default: 
							{
							}
							};
						};
						this.fillExpression(b_1308);
						this.types.set(node_1134, this.unify(this.types.get(a_1306), this.types.get(b_1308), b_1308));
					};
				}
			} break;
			
			case 16: {
				{
					const e_1315 = temp_1135[1];
					{
						if ((!this.insideFunction) && (!this.insideTry)) { Typer.fail('Cannot throw outside of `function` or `try`', node_1134) };
						if (this.insideFunction && (!this.functionAllowedToThrow)) { Typer.fail('Cannot throw in a @noThrow function', node_1134) };
						if (this.insideFunction) { this.functionThrows = true };
						this.fillExpression(e_1315);
					};
				}
			} break;
			
			case 3: {
				{
					if ((!this.insideClassMethod)) { Typer.fail('Cannot access `this` outside of class method', node_1134) };
					this.types.set(node_1134, this.thisType);
				}
			} break;
			
			case 4: {
				Typer.fail('Cannot use `super` as value', node_1134)
			} break;
			
			case 15: {
				{
					const e_1316 = temp_1135[1];
					{
						{
							const temp_1317 = e_1316;
							switch (temp_1317&&temp_1317[0]) {
							case 23: {
								{
									const name_1318 = temp_1317[1];
									const const_1319 = temp_1317[4];
									{
										const prefix = (const_1319)? ('let') : 'var';
										Typer.fail(('This `return` tries to return a variable `' + (prefix) + ' ' + (name_1318) + '`. Try to wrap it into braces like this `{ return } ' + (prefix) + ' ' + (name_1318) + '`'), node_1134);
									};
								}
							} break;
							
							case 15: {
								Typer.fail('Cannot return another return. Try to wrap first `{ return } return 2` into braces', node_1134)
							} break;
							};
						};
						if ((!this.insideFunction)) { Typer.fail('Cannot use `return` outside of function', node_1134) };
						if (e_1316 != null) {
							if (this.functionReturnsAType == this.typeVoid) { Typer.fail('Function returns `Void`, cannot return a value here', e_1316) };
							this.fillExpression(e_1316);
							const ret_1320 = this.types.get(e_1316);
							if (ret_1320 == this.typeVoid) { Typer.fail('Cannot `return` a `Void` non-value', node_1134) };
							this.functionReturnsAType = this.unify(this.functionReturnsAType, ret_1320, e_1316);
							this.functionActuallyReturns = true;
						} else {
							let step_1321 = 0;
							const ret_1322 = this.functionReturnsAType;
							if (step_1321 == 0 && ret_1322 != null) { step_1321 = 1 };
							if (step_1321 == 1) { if (ret_1322 != this.typeVoid) { Typer.fail(('Expected `return value` of type `' + (Type.stringify(ret_1322)) + '`'), node_1134) } } else this.functionReturnsAType = this.typeVoid;
						};
					};
				}
			} break;
			
			case 42: {
				Typer.fail('Cannot use underscore `_` outside of case pattern', node_1134)
			} break;
			
			case 45: {
				Typer.fail('Cannot use `export` here: only applicable to module declarations', node_1134)
			} break;
			
			case 43: {
				Typer.fail('Cannot use `static` here: only applicable to class fields', node_1134)
			} break;
			
			case 44: {
				Typer.fail('Cannot use `private` here: only applicable to class fields and module declarations', node_1134)
			} break;
			
			case 35: {
				Typer.fail('Modules should be at a file\' upper scope', node_1134)
			} break;
			
			case 17: {
				Typer.fail('Cannot use `break` as a value', node_1134)
			} break;
			
			case 18: {
				Typer.fail('Cannot use `continue` as a value', node_1134)
			} break;
			
			case 25: {
				Typer.fail('Cannot use `class` as a value', node_1134)
			} break;
			
			case 37: {
				Typer.fail('Cannot use `enum` as a value', node_1134)
			} break;
			
			case 8: {
				Typer.fail('Cannot use `declare` as a value', node_1134)
			} break;
			
			case 23: {
				{
					const name_1323 = temp_1135[1];
					const const_1324 = temp_1135[4];
					{
						const prefix_1325 = (const_1324)? ('let') : 'var';
						Typer.fail(('Cannot use `' + (prefix_1325) + ' ' + (name_1323) + '` as a value'), node_1134);
					};
				}
			} break;
			
			case 34: {
				this.fillSwitch(node_1134, true)
			} break;
			
			case 20: {
				Typer.fail('Cannot use `while` as a value', node_1134)
			} break;
			
			case 46: {
				Typer.fail('Cannot use `for` as a value. To build array from loop, surround with `[for()]` brackets.', node_1134)
			} break;
			
			case null: case undefined: {
				Typer.fail('Got null node. This should never happen. Probably incomplete feature was used. Ping a compiler developer with a code sample.', node_1134)
			} break;
			
			default: 
			Typer.fail('Unknown node expression kind to type ' + node_1134 + '. This should never happen. Probably incomplete feature was used. Ping a compiler developer with a code sample.', node_1134)
			};
		};
		fillSwitch(node_1326, value_1327) {
			const temp_1328 = node_1326;
			switch (temp_1328&&temp_1328[0]) {
			case 34: {
				{
					const exprs_1329 = temp_1328[1];
					const conds_1330 = temp_1328[2];
					const guards_1331 = temp_1328[3];
					const cases_1332 = temp_1328[4];
					{
						for (const e of $toIterator(exprs_1329)) {
							this.pushScope();
							this.fillExpression(e);
							this.popScope();
						};
						{
							let step_1333 = 0;
							const expr_1334 = exprs_1329[1];
							if (step_1333 == 0 && expr_1334 != null) { step_1333 = 1 };
							if (step_1333 == 1) { Typer.fail('Multiple switch values are not yet supported', expr_1334) };
						};
						let i_1335 = 0;
						while (i_1335 < cases_1332.length) {
							this.pushScope();
							let e_1336 = conds_1330[i_1335];
							let currentType = null;
							let currentTag = null;
							let currentTagBind = 0;
							const follow = (e_1337) => {
								const temp_1338 = e_1337;
								switch (temp_1338&&temp_1338[0]) {
								case 29: {
									{
										const ex = temp_1338[1];
										const name_1339 = temp_1338[2];
										{
											this.fillExpression(e_1337);
											{
												const temp_1340 = this.types.get(ex);
												switch (temp_1340&&temp_1340[0]) {
												case 6: {
													{
														const type_1341 = temp_1340[1];
														{
															currentType = type_1341;
															currentTag = name_1339;
														};
													}
												} break;
												};
											};
										};
									}
								} break;
								
								case 14: {
									{
										const e_1342 = temp_1338[1];
										this.fill(e_1342);
									}
								} break;
								
								case 42: {
									{
									}
								} break;
								
								case 7: {
									{
									}
								} break;
								
								case 2: {
									{
									}
								} break;
								
								case 5: {
									{
									}
								} break;
								
								case 0: {
									{
									}
								} break;
								
								case 12: {
									{
										const ex_1343 = temp_1338[1];
										const args_1344 = temp_1338[2];
										const argNames_1345 = temp_1338[3];
										{
											follow(ex_1343);
											currentTagBind = 0;
											for (const ee of $toIterator(args_1344)) {
												const temp_1346 = ee;
												switch (temp_1346&&temp_1346[0]) {
												case 1: {
													{
														const name_1347 = temp_1346[1];
														{
															follow(ee);
															currentTagBind++;
														};
													}
												} break;
												
												case 42: {
													currentTagBind++
												} break;
												
												default: 
												Typer.fail('This case pattern is not supported', e_1337)
												};
											};
										};
									}
								} break;
								
								case 1: {
									{
										const name_1348 = temp_1338[1];
										if (name_1348.charAt(0) == name_1348.charAt(0).toUpperCase()) { this.fill(e_1337) } else {
											this.addScope(name_1348, e_1337);
											{
												let step_1349 = 0;
												const currentType_1350 = currentType;
												if (step_1349 == 0 && currentType_1350 != null) { step_1349 = 1 };
												if (step_1349 == 1) {
													const indexOf = currentType_1350.fieldNames.indexOf(currentTag);
													if (indexOf == (-1)) { Typer.fail('currentType.fieldNames.indexOf == -1', e_1337) };
													const type_1351 = currentType_1350.tagBindVars[indexOf][currentTagBind];
													const name_1352 = currentType_1350.tagBindVarsNames[indexOf][currentTagBind];
													if (name_1352 == null) {
														const available_1353 = currentType_1350.tagBindVarsNames[indexOf].join(', ');
														if (available_1353.length == 0) { Typer.fail('No bindings available for `.' + currentTag + '`', e_1337) };
														Typer.fail(('Too many bindings requested for `.' + (currentTag) + '`, available are: ') + available_1353, e_1337);
													};
													if (type_1351 != null) { this.types.set(e_1337, this.toType(type_1351, e_1337)) } else Typer.fail('tagBindVars no type for ' + name_1352, e_1337);
												} else {
													Typer.fail('No currentType for ' + name_1348, e_1337);
												};
											};
										};
									}
								} break;
								
								case 9: {
									{
										const a_1354 = temp_1338[1];
										const op_1355 = temp_1338[2];
										const b_1356 = temp_1338[3];
										if (op_1355 == 104) {
											follow(a_1354);
											follow(b_1356);
										} else Typer.fail('This case pattern is not supported', e_1337);
									}
								} break;
								
								case 13: {
									{
										const econd_1357 = temp_1338[1];
										{
											this.pushScope();
											this.fill(econd_1357[0]);
											this.popScope();
										};
									}
								} break;
								
								default: 
								Typer.fail('This case pattern is not supported', e_1337)
								};
							};
							follow(e_1336);
							let e_1358 = cases_1332[i_1335];
							this.pushScope();
							if (value_1327 == false) { this.fill(e_1358) };
							if (value_1327 == true) {
								this.fillExpression(e_1358);
								if (this.types.get(node_1326) == null) { this.types.set(node_1326, this.types.get(e_1358)) } else this.types.set(node_1326, this.unify(this.types.get(node_1326), this.types.get(e_1358), e_1358));
							};
							this.popScope();
							this.popScope();
							i_1335++;
						};
					};
				}
			} break;
			};
		};
	}
	Typer.never = '. This should never happen. Probably incomplete feature was used. Ping a compiler developer with a code sample.'
	Typer.fail = (msg, node_953 = null) => {
			const data_954 = Project.data.get(node_953);
			if (data_954 == null) { throw new CompilerError(/*TyperError*/[3], msg, 0, 0, '') };
			throw new CompilerError(/*TyperError*/[3], msg, data_954.line, data_954.column, data_954.fileName);
		};
	Typer.positionOf = (node_955) => {
			const data_956 = Project.data.get(node_955);
			if (data_956 == null) { return '[Unknown]: ' };
			return '[' + data_956.fileName + ':' + data_956.line + ':' + data_956.column + ']: ';
		};
	Typer.nodeToNodeType = (node_957) => {
			const temp_958 = node_957;
			switch (temp_958&&temp_958[0]) {
			case 31: {
				{
					const el_959 = temp_958[1];
					{
						if (el_959.length > 1) { Typer.fail('Array type `[T]` cannot have more than 1 parameter `T`', el_959[1]) };
						return /*ParametricType*/[2,'Array',[Typer.nodeToNodeType(el_959[0])]];
					};
				}
			} break;
			
			case 48: {
				{
					const t_960 = temp_958[1];
					return t_960;
				}
			} break;
			
			case 36: {
				{
					const names_961 = temp_958[1];
					const el_962 = temp_958[2];
					{
						const types_963 = (() => {
							const result_964 = [];
							const value_965 = el_962;
							for (const e of $toIterator(value_965)) result_964.push(Typer.nodeToNodeType(e));
							return result_964;
						})();
						return /*Object*/[5,names_961,types_963];
					};
				}
			} break;
			
			default: 
			Typer.fail('Cannot nodeToNodeType of ' + Node.stringify(node_957), node_957)
			};
		};
	var Lexer = class {
	}
	Lexer.isident
	Lexer.isUpper
	Lexer.isLower
	Lexer.ops8a
	Lexer.op16token
	Lexer.kwd
	Lexer.tokenize = (bytes, fileName) => {
			let position_1359 = 0;
			const len_1360 = bytes.length;
			let to_1361 = 0;
			let s_1362 = '';
			let p = 0;
			let line = 1;
			let columnBase = 0;
			const params_1363 = [];
			const tokens = Buffer.alloc(len_1360 + 1);
			let lines = [];
			let columns = [];
			const add = (t_1364) => {
				tokens[(to_1361++)] = t_1364;
				lines.push(line);
				columns.push(position_1359 - columnBase - 1);
			};
			const addn = (t_1365, p_1366) => {
				params_1363[to_1361] = p_1366;
				add(t_1365);
			};
			const curPos = () => { return position_1359 - columnBase - 1 };
			const get_8 = (pos_1367) => { return bytes[pos_1367] };
			const not_eof = () => { return (position_1359 < len_1360) };
			const new_line = () => {
				line++;
				columnBase = position_1359;
			};
			const fail = (message_1368, erline = null, column = null, filename = null) => {
				let erline_1369 = erline != (null)? (erline) : line;
				let column_1370 = column != (null)? (column) : curPos();
				let filename_1371 = filename != (null)? (filename) : fileName;
				return new CompilerError(/*LexerError*/[2], message_1368, erline_1369, column_1370, filename_1371);
			};
			if ((len_1360 > 2) && (get_8(0) == 239) && (get_8(1) == 187) && (get_8(2) == 191)) { position_1359 += 3 };
			if ((len_1360 > 2) && (get_8(0) == 35) && (get_8(1) == 33)) { while (position_1359 < len_1360 && get_8(position_1359) != 10) {
				position_1359++;
			} };
			while (position_1359 < len_1360) {
				let _8 = 0;
				do {{
					_8 = get_8(position_1359);
					if (_8 == 10) { new_line() };
				}} while (_8 <= 32 && ((++position_1359) < len_1360));
				if ((!not_eof())) { break };
				let _16 = (len_1360 - position_1359) > (1)? (_8 | (get_8(position_1359 + 1) << 8)) : _8;
				if (_8 == 47) {
					if (_16 == 0x2f2f) {
						let pos_1372 = position_1359 + 2;
						while (get_8(position_1359) != 10 && not_eof()) {
							position_1359++;
						};
						continue;
					};
					if (_16 == 10799 && get_8(position_1359 + 2) == 42) {
						position_1359 += 3;
						p = position_1359;
						while (not_eof()) {
							let _32 = (len_1360 - position_1359) > (3)? (bytes.readUInt32LE(position_1359)) : get_8(position_1359);
							if ((_32 & 0xFF) == 10) { new_line() } else if ((_32 & 0xFFFFFF) == 3090986) { break };
							position_1359++;
						};
						if ((!not_eof())) { throw fail('Unclosed doc-comment') };
						addn(65, bytes.toString('utf8', p, position_1359));
						position_1359 += 3;
						continue;
					};
					if (_16 == 10799) {
						let pos_1373 = position_1359 + 2;
						p = 0;
						position_1359 += 2;
						while (not_eof()) {
							_16 = (len_1360 - position_1359) > (1)? (bytes.readUInt16LE(position_1359)) : get_8(position_1359);
							if ((_16 & 0xFF) == 10) { new_line() } else if (_16 == 12074 && p > 0) { p-- } else if (_16 == 10799) { p++ } else if (_16 == 12074 && p == 0) { break };
							position_1359++;
						};
						position_1359 += 2;
						continue;
					};
				};
				if (((_8 & 95) >= 65 && (_8 & 95) <= 90) || (_8 == 95)) {
					const titlechar = _8;
					p = position_1359 + 1;
					_8 = get_8(p);
					while (p < len_1360 && Lexer.isident[_8] != 0) _8 = get_8((++p));
					s_1362 = bytes.toString('ascii', position_1359, p);
					const t_1374 = (((_16 & 0xFF) <= 90))? (null) : Lexer.kwd.get(s_1362);
					{
						let step_1375 = 0;
						const t_1376 = t_1374;
						if (step_1375 == 0 && t_1376 != null) { step_1375 = 1 };
						if (step_1375 == 1) { add(t_1376) } else {
							if (titlechar >= 65 && titlechar <= 90) { addn(61, s_1362) } else {
								addn(62, s_1362);
							};
						};
					};
					position_1359 = p;
					continue;
				};
				if (_8 == 96) {
					position_1359++;
					const pos_1377 = position_1359;
					while (not_eof()) {
						if ((get_8(position_1359) == 96) && (get_8(position_1359 + 1) == 96)) {
							position_1359++;
							position_1359++;
							continue;
						};
						if (get_8(position_1359) == 96) { break };
						if (get_8(position_1359) == 10) { new_line() };
						position_1359++;
					};
					let result_1378 = bytes.toString('utf8', pos_1377, position_1359);
					if (result_1378.indexOf('``') != (-1)) { result_1378 = result_1378.split('``').join('') };
					addn(66, result_1378);
					position_1359++;
					continue;
				};
				if (_16 == 11822 && (get_8(position_1359 + 2) == 46)) {
					add(98);
					position_1359 += 3;
					continue;
				};
				if (_16 == 15934 && (get_8(position_1359 + 2) == 62)) {
					add(108);
					position_1359 += 3;
					continue;
				};
				const hash = Lexer.simplehash(_16);
				if (_16 == Lexer.op16token.readUInt16LE(hash * 2)) {
					add(Lexer.op16token[hash + 512]);
					position_1359 += 2;
					continue;
				};
				const found_1379 = Lexer.ops8a[_8];
				if (found_1379 != 0) {
					add(found_1379);
					position_1359++;
					continue;
				};
				if (_8 < 40) {
					p = _8;
					position_1359++;
					const pos_1380 = position_1359;
					while (get_8(position_1359) != p && not_eof()) {
						if (get_8(position_1359) == 10) { new_line() };
						if (get_8(position_1359) == '\\'.charCodeAt(0)) {
							position_1359 += 2;
							continue;
						};
						_16 = (len_1360 - position_1359) > (1)? (bytes.readUInt16LE(position_1359)) : get_8(position_1359);
						position_1359++;
					};
					let result_1381 = bytes.toString('utf8', pos_1380, position_1359);
					if (result_1381.indexOf('\r\n') != (-1)) { result_1381 = result_1381.split('\r\n').join('\n') };
					addn(64, result_1381);
					position_1359++;
					continue;
				};
				if (_16 == 30768) {
					p = position_1359;
					p += 2;
					_8 = get_8(position_1359);
					while ((_8 >= 65 && _8 <= 70) || (_8 >= 48 && _8 <= 57) || (_8 >= 97 && _8 <= 102)) {
						_8 = get_8((++p));
					};
					if (p - position_1359 == 2) { throw fail('Integer `0x` not allowed!') };
					addn(63, bytes.toString('ascii', position_1359, p));
					position_1359 = p;
					continue;
				};
				if (_8 < 58) {
					p = position_1359;
					_8 = get_8(p);
					let found_1382 = 63;
					while (_8 >= 48 && _8 <= 57) {
						_8 = get_8((++p));
					};
					if (_8 == 46 && get_8(p + 1) != 46) {
						_8 = get_8((++p));
						while (_8 >= 48 && _8 <= 57) {
							_8 = get_8((++p));
						};
						found_1382 = 60;
					};
					if (_8 == 101 || _8 == 69) {
						_8 = get_8((++p));
						if (_8 == 43 || _8 == 45) { _8 = get_8((++p)) };
						while (_8 >= 48 && _8 <= 57) {
							_8 = get_8((++p));
						};
						found_1382 = 60;
					};
					addn(found_1382, bytes.toString('ascii', position_1359, p));
					position_1359 = p;
					continue;
				};
				if (position_1359 >= len_1360) { break };
				throw fail('Unexpected character ' + String.fromCharCode(_8));
				break;
			};
			return new Tokens(tokens, to_1361, params_1363, lines, columns, fileName);
		};
	Lexer.init = () => {
			Lexer.isident = Buffer.alloc(256);
			{
				let _8_1383 = 0;
				let it_1384 = 0;
				while (it_1384 < 256) {
					_8_1383 = it_1384;
					it_1384++;
					Lexer.isident[_8_1383] = (((_8_1383 >= 65 && _8_1383 <= 90) || (_8_1383 >= 48 && _8_1383 <= 57) || (_8_1383 >= 97 && _8_1383 <= 122) || _8_1383 == 95))? (128) : 0;
				};
			};
			Lexer.isUpper = Buffer.alloc(256);
			{
				let _8_1385 = 0;
				let it_1386 = 0;
				while (it_1386 < 256) {
					_8_1385 = it_1386;
					it_1386++;
					Lexer.isident[_8_1385] = (((_8_1385 >= 65 && _8_1385 <= 90) || (_8_1385 >= 48 && _8_1385 <= 57) || (_8_1385 >= 97 && _8_1385 <= 122) || _8_1385 == 95))? (128) : 0;
				};
			};
			Lexer.kwd = new Map([['_', 1], ['as', 58], ['break', 3], ['case', 4], ['catch', 6], ['class', 7], ['continue', 8], ['do', 9], ['else', 10], ['enum', 11], ['extends', 12], ['export', 19], ['declare', 13], ['false', 14], ['for', 15], ['function', 16], ['from', 5], ['if', 17], ['implements', 18], ['import', 2], ['in', 20], ['interface', 22], ['let', 23], ['new', 25], ['null', 26], ['module', 28], ['private', 29], ['return', 31], ['static', 32], ['super', 59], ['switch', 33], ['this', 34], ['throw', 35], ['true', 36], ['try', 37], ['using', 39], ['var', 40], ['while', 41], ['is', 57]]);
			const ops8 = new Map([[64, 70], [36, 83], [35, 78], [33, 89], [37, 101], [38, 112], [40, 80], [41, 79], [42, 102], [43, 111], [44, 75], [45, 107], [46, 77], [47, 94], [58, 76], [59, 82], [60, 99], [61, 91], [62, 96], [63, 81], [91, 72], ['\\'.charCodeAt(0), 110], [93, 71], [94, 109], [123, 74], [124, 104], [125, 73], [126, 88]]);
			Lexer.ops8a = Buffer.alloc(256);
			for (const key of $toIterator(ops8.keys())) Lexer.ops8a[key] = ops8.get(key);
			const ops16 = new Map([[11051, 87], [11565, 86], [15420, 105], [15649, 103], [15676, 100], [15677, 95], [15678, 97], [15934, 106], [31868, 93], [9766, 92], [15933, 90], [11839, 113]]);
			for (const key1 of $toIterator(ops16.keys())) {
				for (const key2 of $toIterator(ops16.keys())) {
					if (key1 != key2 && Lexer.simplehash(key1) == Lexer.simplehash(key2)) { throw new CompilerError(/*LexerError*/[2], '2-byte op hash collision: ' + key1 + ' ' + key2, 0, 0, 'INTERNAL') };
				};
			};
			Lexer.op16token = Buffer.alloc(768);
			for (const key of $toIterator(ops16.keys())) {
				const hash_1387 = Lexer.simplehash(key);
				Lexer.op16token.writeUInt16LE(key, hash_1387 * 2);
				Lexer.op16token[hash_1387 + 512] = ops16.get(key);
			};
			return;
		};
	Lexer.simplehash = (val) => { return ((val & 0xff) + (((val >> (8 * 1)) & 0xff) << 3)) & 0xEF };
	var Tokens = class {
		constructor(tokens_1388, length_1389, values_1390, lines_1391, columns_1392, fileName_1393) { 
		{
			this.token = tokens_1388;
			this.length = length_1389;
			this.value = values_1390;
			this.line = lines_1391;
			this.column = columns_1392;
			this.fileName = fileName_1393;
		} };
	}
	var Parser = class {
		constructor(lexe_1394) { 
			this.i = 0
			this.endif = 0
			this.lasttok = (-1)
			this.lasttokchecks = 10
			this.classExternal = false
			this.parametricTypeNesting = 0
			this.parametricTypeNestingToken = 0
		{
			this.lex = lexe_1394;
			this.nodes = [];
			while (this.i < this.lex.length && this.tok() != 0) {
				this.nodes.push(this.parseExpr());
			};
		} };
		parseFields() {
			let fields_1395 = [];
			while (this.tok() != 73) {
				let atts_1396 = [];
				while (this.tok() == 70) {
					atts_1396.push(this.parseAttribute());
				};
				const pos_1397 = {line:this.lex.line[this.i], column:this.lex.column[this.i]};
				const pos_1398 = new NodeData(pos_1397.line, pos_1397.column, this.lex.fileName);
				let _static = false;
				if (this.tok() == 32) {
					_static = true;
					this.i++;
				};
				{
					const temp_1399 = this.tok();
					switch (temp_1399) {
					case 29: {
						this.i++
					} break;
					
					case 40: {
						{
							let f_1400 = this.parseExpr();
							Project.data.set(f_1400, pos_1398);
							if (_static) {
								f_1400 = /*TStatic*/[43,f_1400];
								Project.data.set(f_1400, pos_1398);
							};
							Project.mapAttributes.set(f_1400, atts_1396);
							fields_1395.push(f_1400);
						}
					} break;
					
					case 16: {
						{
							let f_1401 = this.parseExpr();
							Project.data.set(f_1401, pos_1398);
							if (_static) {
								f_1401 = /*TStatic*/[43,f_1401];
								Project.data.set(f_1401, pos_1398);
							};
							Project.mapAttributes.set(f_1401, atts_1396);
							fields_1395.push(f_1401);
						}
					} break;
					
					case 23: {
						{
							let f_1402 = this.parseExpr();
							Project.data.set(f_1402, pos_1398);
							if (_static) {
								f_1402 = /*TStatic*/[43,f_1402];
								Project.data.set(f_1402, pos_1398);
							};
							Project.mapAttributes.set(f_1402, atts_1396);
							fields_1395.push(f_1402);
						}
					} break;
					
					case 25: {
						{
							this.i++;
							let expr_1403 = null;
							let vars_1404 = [];
							let types_1405 = [];
							let values_1406 = [];
							this.step(80);
							if (this.tok() != 79) { while (true) {
								vars_1404.push(this.getgo(62));
								let expr_1407 = null;
								let t_1408 = null;
								if (this.tok() == 76) {
									this.i++;
									t_1408 = this.parseType();
								};
								if (this.tok() == 91) {
									this.i++;
									expr_1407 = this.parseExpr();
								};
								types_1405.push(t_1408);
								values_1406.push(expr_1407);
								if (this.tok() == 75) { this.i++ } else break;
							} };
							this.step(79);
							let tmp = this.i;
							while (this.tok() == 70) this.parseAttribute();
							if (this.tok() != 73 && this.tok() != 16) {
								this.i = tmp;
								expr_1403 = this.parseExpr();
							} else this.i = tmp;
							let v_1409 = [];
							{
								let i_1410 = 0;
								let it_1411 = 0;
								let at_1412 = vars_1404.length;
								while (it_1411 < at_1412) {
									i_1410 = it_1411;
									it_1411++;
									{
										v_1409.push(/*TVar*/[23,vars_1404[i_1410],types_1405[i_1410],values_1406[i_1410],true,false]);
									};
								};
							};
							const field_1413 = /*TFunction*/[21,'new',expr_1403,v_1409,null,false];
							Project.data.set(field_1413, pos_1398);
							fields_1395.push(field_1413);
						}
					} break;
					
					case 62: {
						{
							const name_1414 = this.getgo(62);
							if ((name_1414 == 'get') && (this.tok() == 62)) {
								const field_1415 = this.getgo(62);
								this.fail(('Use property `var ' + (field_1415) + ' { get { return value } }` instead of `get ' + (field_1415) + '()`'));
							};
							if ((name_1414 == 'set') && (this.tok() == 62)) {
								const field_1416 = this.getgo(62);
								this.step(80);
								const value_1417 = this.getgo(62);
								this.fail(('Use property `var ' + (field_1416) + ' { set(' + (value_1417) + ') { ... } }` instead of `set ' + (field_1416) + '(' + (value_1417) + ')`'));
							};
							if (this.tok() == 80) {
								if (name_1414 == 'constructor') { this.fail('Use `new()` syntax instead of `constructor()`') };
								if (_static) { this.fail('Use `static function ' + name_1414 + '()` syntax for static methods') } else this.fail('Use `function ' + name_1414 + '()` syntax for methods');
							};
							this.fail('Fields should start with `var ' + name_1414 + '` or `let ' + name_1414 + '`');
						}
					} break;
					
					case 61: {
						this.fail('Fields cannot start with uppercase character `' + this.print() + '` -> `' + this.print().toLowerCase() + '`')
					} break;
					
					case 74: {
						{
							const pos_1418 = {line:this.lex.line[this.i], column:this.lex.column[this.i]};
							const field_1419 = fields_1395.pop();
							let v_1420 = null;
							let t_1421 = null;
							let n_1422 = null;
							let onlyGet = false;
							{
								const temp_1423 = field_1419;
								switch (temp_1423&&temp_1423[0]) {
								case 23: {
									{
										const name_1424 = temp_1423[1];
										const type_1425 = temp_1423[2];
										const expr_1426 = temp_1423[3];
										const const_1427 = temp_1423[4];
										{
											if (expr_1426 != null) { this.fail('Property should not have a `= value`') };
											v_1420 = field_1419;
											t_1421 = type_1425;
											n_1422 = name_1424;
											onlyGet = const_1427;
										};
									}
								} break;
								
								default: 
								this.fail('Only `var` and `let` fields may have a getter `let v: T { get() ... }`')
								};
							};
							this.i++;
							if (this.print() == 'set') { this.fail('Expected `get` before `set`') };
							if (this.print() != 'get') { this.fail('Expected `get`') };
							const kind_1428 = this.print();
							let getterExpr = null;
							if (kind_1428 == 'get') {
								this.i++;
								getterExpr = this.parseExpr();
							};
							const kind_1429 = this.print();
							let setterExpr = null;
							let setterVar = null;
							if ((kind_1429 == 'set') && (onlyGet)) { this.fail('Constants `let` may have only getter `get`') };
							if (kind_1429 == 'set') {
								this.i++;
								this.step(80);
								setterVar = this.getgo(62);
								this.step(79);
								setterExpr = this.parseExpr();
							};
							if ((setterExpr == null) && ((!onlyGet))) { this.fail('Variables `var` should have both getter `get` and setter `set`') };
							this.step(73);
							const getter = ((getterExpr == null))? (null) : /*TFunction*/[21,'get_' + n_1422,getterExpr,[],t_1421,false];
							const setter = ((setterExpr == null))? (null) : /*TFunction*/[21,'set_' + n_1422,setterExpr,[/*TVar*/[23,setterVar,t_1421,null,true,false]],null,false];
							const property = /*Property*/[26,field_1419,getter,setter];
							Project.data.set(property, new NodeData(pos_1418.line, pos_1418.column, this.lex.fileName));
							Project.data.set(getter, new NodeData(pos_1418.line, pos_1418.column, this.lex.fileName));
							Project.data.set(setter, new NodeData(pos_1418.line, pos_1418.column, this.lex.fileName));
							fields_1395.push(property);
							{
								let step_1430 = 0;
								const getter_1431 = getter;
								if (step_1430 == 0 && getter_1431 != null) { step_1430 = 1 };
								if (step_1430 == 1) { fields_1395.push(getter_1431) };
							};
							{
								let step_1432 = 0;
								const setter_1433 = setter;
								if (step_1432 == 0 && setter_1433 != null) { step_1432 = 1 };
								if (step_1432 == 1) { fields_1395.push(setter_1433) };
							};
						}
					} break;
					
					default: 
					this.fail('Fields cannot start with `' + this.print() + '`')
					};
				};
			};
			return fields_1395;
		};
		tok() {
			if (this.i > this.lex.length) {
				console.log('Parser is out of token space!');
				console.log('This should NOT happen.');
				console.log('Please, issue a developer (with a sample code).');
				this.fail(this.lex.fileName + ': Parser internal error: out of token space');
			};
			let t_1434 = this.lex.token[this.i];
			if (this.lasttok != this.i) {
				this.lasttok = this.i;
				this.lasttokchecks = 1000;
			} else {
				this.lasttokchecks--;
				if (this.lasttokchecks < 0) { this.fail('Parser internal error: Same token parsed too many times: ' + ('`' + (this.print()) + '`')) };
			};
			if ((t_1434 == 78) && (this.lex.value[this.i + 1] == 'end')) { if (this.endif > 0) {
				this.i++;
				this.i++;
				this.endif--;
				this.tok();
			} else this.fail('Unexpected `#end`') };
			if ((t_1434 == 78) && (this.offset(1) == 17)) {
				this.i++;
				this.i++;
				const defName = this.getgo(62);
				const def = Project.defines[defName];
				if (def == null) { this.fail('`#if` looks for the `' + defName + '` parameter which is *not* defined in project file.' + (' Add `\"define\": { \"' + (defName) + '\": false }` to `hexa.json` or `--define ' + (defName) + '=false` to suppress this message.')) };
				if (def == true) { this.endif++ };
				if (def == false) {
					let endifs = 1;
					while (this.i < this.lex.length) {
						if ((this.offset(0) == 78) && (this.offset(1) == 17)) {
							this.i++;
							this.i++;
							endifs++;
							continue;
						};
						if ((this.offset(0) == 78) && (this.lex.value[this.i + 1] == 'end')) {
							this.i++;
							this.i++;
							endifs--;
							if (endifs == 0) { break };
							continue;
						};
						this.i++;
					};
				};
				this.tok();
			};
			return this.lex.token[this.i];
		};
		print() { return Token.stringify(this.lex.token[this.i], this.lex.value[this.i]) };
		expect(t_1435) { if (t_1435 != this.tok()) { this.expected(Token.stringify(t_1435)) } };
		fail(message_1436, line_1437, column_1438, filename_1439) {
			const line_1440 = line_1437 != (null)? (line_1437) : this.lex.line[this.i];
			const column_1441 = column_1438 != (null)? (column_1438) : this.lex.column[this.i];
			const filename_1442 = filename_1439 != (null)? (filename_1439) : this.lex.fileName;
			throw new CompilerError(/*ParserError*/[0], message_1436, line_1440, column_1441, filename_1442);
		};
		getgo(t_1443) {
			this.expect(t_1443);
			return this.lex.value[(this.i++)];
		};
		step(t_1444) {
			this.expect(t_1444);
			this.i++;
		};
		next() { this.i++ };
		offset(v_1445) { return this.lex.token[this.i + v_1445] };
		unexpected() {
			let token = Token.stringify(this.lex.token[this.i], this.lex.value[this.i]);
			let error = ('Unexpected `' + (token) + '`');
			if (this.tok() == 82) { error += ' semicolon. Note: Hexa has no semicolons!' };
			if (this.print() == 'public') { error += '. Note: Hexa has no `public` keyword!' };
			this.fail(error);
		};
		expected(str_1446) {
			let token_1447 = Token.stringify(this.lex.token[this.i], this.lex.value[this.i]);
			this.fail(('Expected `' + (str_1446) + '` before `' + (token_1447) + '`'));
		};
		parseExpr() {
			let atts_1448 = [];
			while (this.tok() == 70) atts_1448.push(this.parseAttribute());
			let node_1449 = this.tok();
			let nodePosition = {line:this.lex.line[this.i], column:this.lex.column[this.i]};
			let result_1450 = null;
			{
				const temp_1451 = node_1449;
				switch (temp_1451) {
				case 39: {
					{
						this.next();
						let names_1452 = [this.getgo(61)];
						while (this.tok() == 75) {
							this.step(75);
							names_1452.push(this.getgo(61));
						};
						result_1450 = /*TUsing*/[39,names_1452];
					}
				} break;
				
				case 13: {
					{
						this.i++;
						{
							const temp_1453 = this.tok();
							switch (temp_1453) {
							case 16: {
								result_1450 = this.parseFunction(false, true)
							} break;
							
							case 40: case 23: {
								{
									const parsed = this.parseVar(true);
									if (parsed.length > 1) { result_1450 = /*TVars*/[24,parsed] } else result_1450 = parsed[0];
								}
							} break;
							
							case 7: case 22: {
								result_1450 = this.parseClass(true)
							} break;
							
							case 61: {
								{
									const alias_1454 = this.parseType();
									this.step(91);
									const value_1455 = this.parseType();
									result_1450 = /*TTypeAlias*/[8,alias_1454,value_1455];
								}
							} break;
							
							default: 
							this.fail(('Wrong `declare` format, got `' + (Token.stringify(this.tok())) + '`'))
							};
						};
					}
				} break;
				
				case 74: {
					{
						this.i++;
						if (this.tok() == 73) {
							this.i++;
							result_1450 = /*TBlock*/[11,[]];
						} else if (this.tok() == 62 && this.lex.token[this.i + 1] == 76) {
							let names_1456 = [];
							let el_1457 = [];
							while (true) {
								names_1456.push(this.getgo(62));
								this.step(76);
								el_1457.push(this.parseExpr());
								if (this.tok() == 75) {
									this.i++;
									if (this.tok() == 73) { this.fail('Unexpected `}`, remove trailing `,` comma') };
									continue;
								} else break;
							};
							if (this.tok() != 73) { this.fail(('Expected `}` or `,` before `' + (this.print()) + '`')) };
							this.step(73);
							result_1450 = /*TObject*/[36,names_1456,el_1457];
						} else {
							let el_1458 = [];
							while (this.tok() != 73) {
								el_1458.push(this.parseExpr());
							};
							this.step(73);
							result_1450 = /*TBlock*/[11,el_1458];
						};
					}
				} break;
				
				case 17: {
					{
						this.i++;
						this.step(80);
						let econd_1459 = [this.parseExpr()];
						while (this.tok() == 75) {
							this.next();
							econd_1459.push(this.parseExpr());
						};
						this.step(79);
						let eif_1460 = null;
						if (this.tok() != 76) { eif_1460 = this.parseExpr() };
						let eelse_1461 = null;
						if (this.tok() == 10) {
							this.i++;
							eelse_1461 = this.parseExpr();
						};
						result_1450 = /*TIf*/[13,econd_1459,eif_1460,eelse_1461];
					}
				} break;
				
				case 41: {
					{
						this.i++;
						this.step(80);
						let econd_1462 = this.parseExpr();
						this.step(79);
						let e_1463 = this.parseExpr();
						result_1450 = /*TWhile*/[20,econd_1462,e_1463,true];
					}
				} break;
				
				case 9: {
					{
						this.i++;
						let e_1464 = this.parseExpr();
						this.step(41);
						this.step(80);
						let econd_1465 = this.parseExpr();
						this.step(79);
						result_1450 = /*TWhile*/[20,econd_1465,e_1464,false];
					}
				} break;
				
				case 80: {
					{
						this.next();
						if ((this.tok() == 79 && this.offset(1) == 90) || (this.tok() == 62 && this.offset(1) == 75) || (this.tok() == 62 && this.offset(1) == 76) || (this.tok() == 62 && this.offset(1) == 79 && this.offset(2) == 90)) {
							let vars_1466 = [];
							let types_1467 = [];
							let values_1468 = [];
							while (this.tok() != 79) {
								vars_1466.push(this.getgo(62));
								if (this.tok() == 76) {
									this.i++;
									types_1467.push(this.parseType());
								};
								if (this.tok() == 91) {
									this.i++;
									values_1468.push(this.parseExpr());
								};
								if (this.tok() == 75) { this.i++ };
							};
							this.step(79);
							this.step(90);
							let v_1469 = [];
							{
								let i_1470 = 0;
								let it_1471 = 0;
								let at_1472 = vars_1466.length;
								while (it_1471 < at_1472) {
									i_1470 = it_1471;
									it_1471++;
									{
										v_1469.push(/*TVar*/[23,vars_1466[i_1470],types_1467[i_1470],values_1468[i_1470],true,false]);
									};
								};
							};
							result_1450 = /*TArrow*/[22,this.parseExpr(),v_1469,null];
						} else {
							let expr_1473 = this.parseExpr();
							this.step(79);
							result_1450 = /*TParenthesis*/[14,expr_1473];
						};
					}
				} break;
				
				case 31: {
					{
						this.i++;
						{
							const temp_1474 = this.tok();
							switch (temp_1474) {
							case 73: {
								result_1450 = /*TReturn*/[15,null]
							} break;
							
							case 40: {
								result_1450 = /*TReturn*/[15,null]
							} break;
							
							case 23: {
								result_1450 = /*TReturn*/[15,null]
							} break;
							
							case 4: {
								result_1450 = /*TReturn*/[15,null]
							} break;
							
							case 3: {
								result_1450 = /*TReturn*/[15,null]
							} break;
							
							case 8: {
								result_1450 = /*TReturn*/[15,null]
							} break;
							
							case 31: {
								result_1450 = /*TReturn*/[15,null]
							} break;
							
							default: 
							result_1450 = /*TReturn*/[15,this.parseExpr()]
							};
						};
					}
				} break;
				
				case 35: {
					{
						this.i++;
						result_1450 = /*TThrow*/[16,this.parseExpr()];
					}
				} break;
				
				case 8: {
					{
						this.i++;
						result_1450 = /*TContinue*/[18];
					}
				} break;
				
				case 3: {
					{
						this.i++;
						result_1450 = /*TBreak*/[17];
					}
				} break;
				
				case 1: {
					{
						this.i++;
						result_1450 = /*TUnderscore*/[42];
					}
				} break;
				
				case 87: case 86: case 89: case 88: case 107: {
					{
						const id = this.lex.token[this.i];
						this.i++;
						const value_1475 = this.parseExpr();
						const fix = (value_1476) => {
							const temp_1477 = value_1476;
							switch (temp_1477&&temp_1477[0]) {
							case 9: {
								{
									const aa = temp_1477[1];
									const op_1478 = temp_1477[2];
									const bb = temp_1477[3];
									return /*TBinop*/[9,fix(aa),op_1478,bb];
								}
							} break;
							
							default: 
							return /*TUnop*/[19,id,false,value_1476]
							};
						};
						result_1450 = fix(value_1475);
					}
				} break;
				
				case 60: {
					result_1450 = /*TFloat*/[6,this.getgo(60)]
				} break;
				
				case 63: {
					result_1450 = /*TInt*/[5,this.getgo(63)]
				} break;
				
				case 61: {
					if (this.lex.token[this.i + 1] == 99) {
						let res = this.parseType();
						result_1450 = /*NodeTypeValue*/[48,res];
					} else if (this.lex.token[this.i + 1] == 81) {
						let name_1479 = this.getgo(61);
						this.i++;
						result_1450 = /*NodeTypeValue*/[48,/*Optional*/[0,/*Type*/[1,name_1479]]];
					} else {
						let name_1480 = this.getgo(61);
						result_1450 = /*NodeTypeValue*/[48,/*Type*/[1,name_1480]];
					}
				} break;
				
				case 62: {
					{
						let name_1481 = this.getgo(62);
						if (this.tok() == 90) {
							this.next();
							result_1450 = /*TArrow*/[22,this.parseExpr(),[/*TVar*/[23,name_1481,null,null,true,false]],null];
						} else result_1450 = /*TIdent*/[1,name_1481];
					}
				} break;
				
				case 66: {
					result_1450 = /*TString*/[0,this.getgo(66)]
				} break;
				
				case 64: {
					{
						let str_1482 = this.getgo(64);
						if (this.hasInterpolation(str_1482)) { result_1450 = /*TParenthesis*/[14,this.parseInterpolations(str_1482)] } else result_1450 = /*TString*/[0,str_1482];
					}
				} break;
				
				case 36: {
					{
						this.i++;
						result_1450 = /*TBool*/[2,true];
					}
				} break;
				
				case 14: {
					{
						this.i++;
						result_1450 = /*TBool*/[2,false];
					}
				} break;
				
				case 34: {
					{
						this.i++;
						result_1450 = /*TThis*/[3];
					}
				} break;
				
				case 26: {
					{
						this.i++;
						result_1450 = /*TNull*/[7];
					}
				} break;
				
				case 59: {
					{
						this.i++;
						result_1450 = /*TSuper*/[4];
					}
				} break;
				
				case 40: {
					{
						let parsed_1483 = this.parseVar();
						if (parsed_1483.length > 1) { result_1450 = /*TVars*/[24,parsed_1483] } else result_1450 = parsed_1483[0];
					}
				} break;
				
				case 23: {
					{
						let parsed_1484 = this.parseVar();
						if (parsed_1484.length > 1) { result_1450 = /*TVars*/[24,parsed_1484] } else result_1450 = parsed_1484[0];
					}
				} break;
				
				case 37: {
					{
						this.i++;
						let expr_1485 = this.parseExpr();
						let vars_1486 = [];
						let t_1487 = [];
						let v_1488 = [];
						let catches_1489 = [];
						while (this.tok() == 6) {
							this.step(6);
							this.step(80);
							let name_1490 = this.getgo(62);
							vars_1486.push(name_1490);
							this.step(76);
							let type_1491 = this.parseType();
							{
								t_1487.push(type_1491);
							};
							v_1488.push(/*TVar*/[23,name_1490,type_1491,null,true,false]);
							this.step(79);
							catches_1489.push(this.parseExpr());
						};
						result_1450 = /*TTry*/[27,expr_1485,t_1487,v_1488,catches_1489];
					}
				} break;
				
				case 28: {
					{
						this.i++;
						let path_1492 = [];
						if (this.tok() == 62) {
							path_1492.push(this.getgo(62));
							while (this.tok() == 77) {
								this.i++;
								path_1492.push(this.getgo(62));
							};
						};
						let el_1493 = [];
						while (this.tok() != 28 && this.tok() != 74 && this.tok() != 0) {
							el_1493.push(this.parseExpr());
						};
						result_1450 = /*TModule*/[35,path_1492,el_1493];
						Project.data.set(result_1450, new NodeData(nodePosition.line, nodePosition.column, this.lex.fileName));
						return result_1450;
					}
				} break;
				
				case 11: {
					{
						this.i++;
						let t_1494 = this.parseType();
						let valuesType_1495 = null;
						if (this.tok() == 76) {
							this.i++;
							valuesType_1495 = this.parseType();
						};
						let extend_1496 = null;
						if (this.tok() == 12) {
							this.i++;
							extend_1496 = this.parseType();
						};
						this.step(74);
						let names_1497 = [];
						while (this.tok() != 73) {
							while (this.tok() == 70) atts_1448.push(this.parseAttribute());
							atts_1448 = [];
							names_1497.push(this.parseExpr());
						};
						this.step(73);
						result_1450 = /*TEnum*/[37,t_1494,names_1497,valuesType_1495,extend_1496];
					}
				} break;
				
				case 7: case 22: {
					{
						let att = atts_1448;
						atts_1448 = [];
						const me = this.parseClass();
						Project.mapAttributes.set(me, att);
						result_1450 = me;
					}
				} break;
				
				case 16: {
					result_1450 = this.parseFunction()
				} break;
				
				case 72: {
					{
						this.i++;
						let el_1498 = [];
						let values_1499 = [];
						let isMap = false;
						if (this.tok() != 71) { while (true) {
							if (this.tok() == 76) {
								isMap = true;
								this.next();
								break;
							};
							el_1498.push(this.parseExpr());
							if (this.tok() == 76) {
								this.i++;
								values_1499.push(this.parseExpr());
								isMap = true;
							};
							if (this.tok() == 75) {
								this.i++;
								if (this.tok() == 71) { this.fail('Unexpected `]`, remove trailing comma `,` before `]` or add a value after `,` if required') };
							} else break;
						} };
						this.step(71);
						if (isMap) { result_1450 = /*TMap*/[32,el_1498,values_1499] } else result_1450 = /*TArray*/[31,el_1498];
					}
				} break;
				
				case 25: {
					{
						this.i++;
						let t_1500 = this.parseType();
						let names_1501 = [];
						let values_1502 = [];
						if (this.tok() == 74) {
							this.i++;
							if (this.tok() == 73) { this.step(73) } else if (this.tok() == 62 && this.lex.token[this.i + 1] == 76) {
								while (this.tok() != 73) {
									names_1501.push(this.getgo(62));
									this.step(76);
									values_1502.push(this.parseExpr());
									if (this.tok() == 75) { this.i++ };
								};
								this.step(73);
							};
						};
						this.step(80);
						let args_1503 = [];
						let argNames_1504 = [];
						if (this.tok() != 79) { while (true) {
							{
								const temp_1505 = this.tok();
								switch (temp_1505) {
								case 79: {
									this.fail('Unexpected `)`, remove trailing `,` comma')
								} break;
								
								case 61: {
									{
										argNames_1504.push(null);
										args_1503.push(this.parseExpr());
										if (this.tok() == 76) {
											this.step(76);
											this.parseType();
										};
									}
								} break;
								
								default: 
								{
									if (this.lex.token[this.i + 1] == 76) {
										argNames_1504.push(this.getgo(62));
										this.step(76);
									} else {
										argNames_1504.push(null);
									};
									args_1503.push(this.parseExpr());
								}
								};
							};
							if (this.tok() == 75) { this.i++ } else break;
						} };
						this.step(79);
						result_1450 = /*TNew*/[30,[],t_1500,args_1503,names_1501,values_1502,argNames_1504];
					}
				} break;
				
				case 33: {
					{
						this.i++;
						this.step(80);
						let exprs_1506 = [this.parseExpr()];
						while (this.tok() == 75) {
							this.i++;
							exprs_1506.push(this.parseExpr());
						};
						this.step(79);
						this.step(74);
						let cases_1507 = [];
						let conds_1508 = [];
						let guards_1509 = [];
						while (this.tok() != 73) {
							this.step(4);
							if (this.tok() == 1) {
								conds_1508.push(/*TUnderscore*/[42]);
								this.i++;
							} else conds_1508.push(this.parseExpr());
							guards_1509.push(null);
							this.step(76);
							let exs = [];
							while (this.tok() != 4 && this.tok() != 73) {
								exs.push(this.parseExpr());
							};
							cases_1507.push(/*TBlock*/[11,exs]);
						};
						this.step(73);
						result_1450 = /*TSwitch*/[34,exprs_1506,conds_1508,guards_1509,cases_1507];
					}
				} break;
				
				case 15: {
					{
						this.i++;
						this.step(80);
						if (this.tok() == 23 || this.tok() == 40) {
							this.i++;
							let name_1510 = this.getgo(62);
							{
								if (this.print() == 'of' || this.print() == 'in') {
									this.i++;
									let values_1511 = this.print();
									this.i++;
									while (this.tok() != 79 && this.tok() != 0) {
										if (this.tok() == 107 || this.tok() == 111) { values_1511 += ' ' + this.print() + ' ' } else values_1511 += this.print();
										this.i++;
									};
									this.fail(('This loop should be replaced to `for (' + (name_1510) + ' in ' + (values_1511) + ')`'));
								};
							};
							let classic = true;
							if (this.tok() == 91) { this.i++ } else classic = false;
							let specialCase = '';
							if ((this.tok() == 63) && (this.lex.value[this.i] == '0')) { this.i++ } else {
								while (this.tok() == 62 || this.tok() == 61 || this.tok() == 80 || this.tok() == 79 || this.tok() == 111 || this.tok() == 107 || this.tok() == 63 || this.tok() == 102 || this.tok() == 77) {
									if (this.tok() == 107 || this.tok() == 111) { specialCase += ' ' + this.print() + ' ' } else specialCase += this.print();
									this.i++;
								};
							};
							if (this.tok() == 82) { this.i++ } else classic = false;
							if ((this.tok() == 62) && (this.lex.value[this.i] == name_1510)) { this.i++ } else classic = false;
							let lesserOrEqual = false;
							if (this.tok() == 99) { this.i++ } else if (this.tok() == 100) {
								this.i++;
								lesserOrEqual = true;
							} else classic = false;
							let values_1512 = this.print();
							this.i++;
							while (this.tok() == 62 || this.tok() == 61 || this.tok() == 80 || this.tok() == 79 || this.tok() == 111 || this.tok() == 107 || this.tok() == 63 || this.tok() == 102 || this.tok() == 77) {
								if (this.tok() == 107 || this.tok() == 111) { values_1512 += ' ' + this.print() + ' ' } else values_1512 += this.print();
								this.i++;
							};
							if (lesserOrEqual) { values_1512 += ' + 1' };
							if (this.tok() == 82) { this.i++ } else classic = false;
							if ((this.tok() == 62) && (this.lex.value[this.i] == name_1510)) {
								this.i++;
								if (this.tok() == 87) { this.i++ } else classic = false;
							} else if (this.tok() == 87) {
								this.i++;
								if ((this.tok() == 62) && (this.lex.value[this.i] == name_1510)) { this.i++ } else classic = false;
							} else classic = false;
							if (this.tok() == 79) {} else classic = false;
							if ((classic) && (specialCase == '')) { this.fail(('This loop should be replaced to `for (' + (name_1510) + ' in ' + (values_1512) + ')`')) };
							if (classic) { this.fail(('This loop should be replaced to `for (' + (name_1510) + ' in ' + (specialCase) + ' ... ' + (values_1512) + ')`')) };
							this.fail(('Hexa has only `for (' + (name_1510) + ' in values)` syntax'));
						};
						let name_1513 = this.getgo(62);
						this.step(20);
						let values_1514 = this.parseExpr();
						let range_1515 = null;
						if (this.tok() == 98) {
							this.i++;
							range_1515 = this.parseExpr();
						};
						this.step(79);
						let expression = this.parseExpr();
						result_1450 = /*TFor*/[46,name_1513,values_1514,expression,range_1515];
					}
				} break;
				
				case 32: {
					{
						this.next();
						result_1450 = /*TStatic*/[43,this.parseExpr()];
					}
				} break;
				
				case 29: {
					{
						this.next();
						result_1450 = /*TPrivate*/[44,this.parseExpr()];
					}
				} break;
				
				default: 
				this.unexpected()
				};
			};
			if (result_1450 == null) {
				process_19.stdout.write('\n');
				this.fail('Expression is incomplete, current token is: ' + Token.stringify(this.tok()));
			};
			Project.data.set(result_1450, new NodeData(nodePosition.line, nodePosition.column, this.lex.fileName));
			if (atts_1448.length > 0) {
				Project.mapAttributes.set(result_1450, atts_1448);
				atts_1448 = [];
			};
			let done = this.i >= this.lex.length;
			while ((!done)) {
				Project.data.set(result_1450, new NodeData(this.lex.line[this.i], this.lex.column[this.i], this.lex.fileName));
				{
					const temp_1516 = this.tok();
					switch (temp_1516) {
					case 0: {
						done = true
					} break;
					
					case 72: {
						{
							this.i++;
							let index_1517 = this.parseExpr();
							if (this.tok() == 75) { this.fail('Expected `]` instead of `,` comma. Hexa supports only one `[index]` value.\n' + ('Note, you are indexing this expression: `' + (Node.stringify(result_1450)) + '[' + (Node.stringify(index_1517)) + ']`\n') + ('To create array here, wrap it with `{` as `{[' + (Node.stringify(index_1517)) + ', ...]}` so it doesn\'t index previous expression.')) };
							this.step(71);
							result_1450 = /*TIndex*/[33,result_1450,index_1517];
						}
					} break;
					
					case 57: {
						{
							this.i++;
							{
								const temp_1518 = this.tok();
								switch (temp_1518) {
								case 61: {
									result_1450 = /*TIs*/[40,result_1450,this.parseType()]
								} break;
								
								default: 
								this.fail('Cannot parse type `' + Token.stringify(this.tok()) + '`')
								};
							};
						}
					} break;
					
					case 58: {
						{
							this.i++;
							let kind_1519 = this.tok();
							if (this.tok() == 89) { this.i++ } else if (this.tok() == 81) { this.i++ } else kind_1519 = 123;
							result_1450 = /*TAs*/[41,result_1450,kind_1519,this.parseType()];
						}
					} break;
					
					case 80: {
						{
							let args_1520 = [];
							let argNames_1521 = [];
							this.i++;
							if (this.tok() != 79) { while (true) {
								{
									const temp_1522 = this.tok();
									switch (temp_1522) {
									case 79: {
										this.fail('Unexpected `)`, remove trailing `,` comma')
									} break;
									
									case 61: {
										{
											argNames_1521.push(null);
											args_1520.push(this.parseExpr());
											if (this.tok() == 76) {
												this.step(76);
												this.parseType();
											};
										}
									} break;
									
									default: 
									{
										if ((this.tok() == 62) && (this.lex.token[this.i + 1] == 76)) {
											argNames_1521.push(this.getgo(62));
											this.step(76);
										} else {
											argNames_1521.push(null);
										};
										args_1520.push(this.parseExpr());
									}
									};
								};
								if (this.tok() == 75) { this.i++ } else break;
							} };
							this.step(79);
							result_1450 = /*TCall*/[12,result_1450,args_1520,argNames_1521];
						}
					} break;
					
					case 90: {
						{
							this.next();
							result_1450 = /*TArrow*/[22,this.parseExpr(),[result_1450],null];
						}
					} break;
					
					case 87: {
						{
							{
								const temp_1523 = result_1450;
								switch (temp_1523&&temp_1523[0]) {
								case 19: {
									return result_1450
								} break;
								};
							};
							this.i++;
							result_1450 = /*TUnop*/[19,87,true,result_1450];
						}
					} break;
					
					case 86: {
						{
							{
								const temp_1524 = result_1450;
								switch (temp_1524&&temp_1524[0]) {
								case 19: {
									return result_1450
								} break;
								};
							};
							this.i++;
							result_1450 = /*TUnop*/[19,86,true,result_1450];
						}
					} break;
					
					case 77: {
						{
							this.i++;
							{
								const temp_1525 = this.tok();
								switch (temp_1525) {
								case 61: {
									result_1450 = /*TDotUpper*/[29,result_1450,this.getgo(61)]
								} break;
								
								default: 
								result_1450 = /*TDot*/[28,result_1450,this.getgo(62)]
								};
							};
						}
					} break;
					
					case 81: {
						{
							this.i++;
							if (this.tok() == 77) {
								let name_1526 = this.getgo(62);
								result_1450 = /*TDot*/[28,result_1450,name_1526];
							} else if (this.tok() == 81) {
								this.i++;
								result_1450 = /*Elvis*/[47,result_1450,this.parseExpr()];
							} else {
								let eif_1527 = this.parseExpr();
								this.step(76);
								let eelse_1528 = this.parseExpr();
								result_1450 = /*TIf*/[13,[result_1450],eif_1527,eelse_1528];
							};
						}
					} break;
					
					case 113: {
						{
							this.i++;
							result_1450 = this.parseExpr();
						}
					} break;
					
					default: 
					{
						const t_1529 = this.tok();
						if (Parser.isBinop(t_1529) && this.offset(1) == 91) {
							let op_1530 = this.tok();
							this.i++;
							this.i++;
							let b_1531 = this.parseExpr();
							result_1450 = /*TAssignop*/[10,result_1450,op_1530,b_1531];
						} else if (Parser.isBinop(t_1529)) {
							this.i++;
							let b_1532 = this.parseExpr();
							let a_1533 = result_1450;
							{
								const temp_1534 = b_1532;
								switch (temp_1534&&temp_1534[0]) {
								case 9: {
									{
										const aa_1535 = temp_1534[1];
										const op_1536 = temp_1534[2];
										const bb_1537 = temp_1534[3];
										{
											let tp = Parser.precedence(t_1529);
											let tLeft = tp > 99;
											tp = tp % 100;
											let bp = Parser.precedence(op_1536);
											let bLeft = bp > 99;
											bp = bp % 100;
											if (bp > tp) { result_1450 = /*TBinop*/[9,/*TBinop*/[9,result_1450,t_1529,aa_1535],op_1536,bb_1537] } else result_1450 = /*TBinop*/[9,result_1450,t_1529,b_1532];
										};
									}
								} break;
								
								default: 
								result_1450 = /*TBinop*/[9,result_1450,t_1529,b_1532]
								};
							};
						} else done = true;
					}
					};
				};
			};
			if (result_1450 == null) {
				process_19.stdout.write('\n');
				this.fail('Expression postfix is incomplete');
			};
			if (atts_1448.length > 0) {
				Project.mapAttributes.set(result_1450, atts_1448);
				atts_1448 = [];
			};
			Project.data.set(result_1450, new NodeData(nodePosition.line, nodePosition.column, this.lex.fileName));
			return result_1450;
		};
		parseVar(external_1538) {
			let const_1539 = this.tok() == 23;
			this.i++;
			let vars_1540 = [];
			if (this.tok() == 83) {
				this.i++;
				const name_1541 = (this.tok() == 62)? (this.print()) : 'name';
				const prefix_1542 = (const_1539)? ('let') : 'var';
				this.fail(('Hexa doesn\'t support PHP-style variables, replace it to `' + (prefix_1542) + ' ' + (name_1541) + '`'));
			};
			const parseSingleVar = () => {
				let varname = this.getgo(62);
				if (varname.endsWith('___')) { this.fail('Variables can\'t end with `___`, it is reserved.') };
				let type_1543 = null;
				if (this.tok() == 76) {
					this.i++;
					type_1543 = this.parseType();
				};
				let expr_1544 = null;
				if (this.tok() == 91) {
					this.i++;
					expr_1544 = this.parseExpr();
				};
				return /*TVar*/[23,varname,type_1543,expr_1544,const_1539,(() => {
					const result_1545 = external_1538;
					if (result_1545 != null) { return result_1545 };
					return false;
				})()];
			};
			const parseSingleBinding = () => {
				let path_1546 = [];
				while (this.tok() == 62 && this.offset(1) == 77) {
					path_1546.push(this.getgo(62));
					this.i++;
				};
				path_1546.push(this.getgo(61));
				this.step(77);
				path_1546.push(this.getgo(61));
				if (this.tok() == 80 && this.offset(1) == 79) { this.fail('Don\'t use empty parenthesis for `let ' + path_1546.join('.') + '()` bindings') };
				let bind = [];
				if (this.tok() == 80) {
					do {{
						this.i++;
						if (this.tok() == 1) {
							this.i++;
							bind.push(null);
						} else bind.push(/*TVar*/[23,this.getgo(62),null,null,const_1539,false]);
					}} while (this.tok() == 75);
					this.step(79);
				};
				this.step(91);
				let expr_1547 = this.parseExpr();
				return /*TEnumExtract*/[38,path_1546,bind,expr_1547];
			};
			while (true) {
				if (this.tok() == 61 || (this.tok() == 62 && this.offset(1) == 77)) { vars_1540.push(parseSingleBinding()) } else vars_1540.push(parseSingleVar());
				if (this.tok() == 75 && this.offset(1) == 62 && (this.offset(2) == 91 || this.offset(2) == 76)) { this.i++ } else break;
			};
			return vars_1540;
			let const_1548 = this.tok() == 23;
			this.i++;
			let vars_1549 = [];
			{
				const temp_1550 = this.tok();
				switch (temp_1550) {
				case 62: {
					while (true) {
						let varname_1551 = this.getgo(62);
						if (varname_1551.endsWith('___')) { this.fail('Variables can\'t end with `___`, it is reserved.') };
						let type_1552 = null;
						if (this.tok() == 76) {
							this.i++;
							type_1552 = this.parseType();
						};
						let expr_1553 = null;
						if (this.tok() == 91) {
							this.i++;
							expr_1553 = this.parseExpr();
						};
						vars_1549.push(/*TVar*/[23,varname_1551,type_1552,expr_1553,const_1548,external_1538]);
						if (this.tok() == 75 && this.offset(1) == 62 && (this.offset(2) == 91 || this.offset(2) == 76)) { this.i++ } else break;
					}
				} break;
				
				case 61: {
					{
						let left = /*TIdent*/[1,this.getgo(61)];
						let res_1554 = left;
						while (this.tok() == 77) {
							res_1554 = /*TDot*/[28,res_1554,this.getgo(61)];
						};
						{
							const temp_1555 = this.tok();
							switch (temp_1555) {
							case 80: {
								{
									let args_1556 = [];
									while (this.tok() != 79) {
										args_1556.push(this.getgo(62));
									};
									this.step(91);
									let varname_1557 = this.getgo(62);
								}
							} break;
							
							case 91: {
								{
								}
							} break;
							
							default: 
							this.fail('Wrong syntax')
							};
						};
					}
				} break;
				
				default: 
				this.fail('Wrong syntax')
				};
			};
			return vars_1549;
		};
		parseFunction(parseBody, external_1558) {
			const parseBody_1559 = ((parseBody != null))? (parseBody) : true;
			this.i++;
			let expr_1560 = null;
			let name_1561 = null;
			let vars_1562 = [];
			let types_1563 = [];
			let values_1564 = [];
			let pos_1565 = [];
			{
				const temp_1566 = this.tok();
				switch (temp_1566) {
				case 62: {
					name_1561 = this.getgo(62)
				} break;
				
				case 61: {
					this.fail(('Function names can\'t start with uppercase `' + (this.print()) + '` -> `' + (this.print().toLowerCase()) + '`'))
				} break;
				
				default: 
				{
				}
				};
			};
			this.step(80);
			{
				if (this.tok() != 79) { while (true) {
					let expr_1567 = null;
					let t_1568 = null;
					if (this.tok() == 98) { this.i++ };
					pos_1565.push({line:this.lex.line[this.i], column:this.lex.column[this.i]});
					let name_1569 = this.getgo(62);
					if (this.tok() == 76) {
						this.i++;
						t_1568 = this.parseType();
					};
					if (this.tok() == 91) {
						this.i++;
						expr_1567 = this.parseExpr();
					};
					vars_1562.push(name_1569);
					types_1563.push(t_1568);
					values_1564.push(expr_1567);
					if (this.tok() == 75) { this.i++ } else break;
				} };
				this.step(79);
			};
			let rettype_1570 = null;
			if (this.tok() == 76) {
				this.i++;
				rettype_1570 = this.parseType();
			};
			if (parseBody_1559) {
				const temp_1571 = this.tok();
				switch (temp_1571) {
				case 25: {
					if (this.lex.token[this.i + 1] == 80) {} else expr_1560 = this.parseExpr()
				} break;
				
				case 73: {
					{
					}
				} break;
				
				case 32: {
					{
					}
				} break;
				
				case 29: {
					{
					}
				} break;
				
				case 16: {
					{
					}
				} break;
				
				case 40: {
					{
					}
				} break;
				
				case 23: {
					{
					}
				} break;
				
				case 70: {
					{
						let tmp_1572 = this.i;
						while (this.tok() == 70) this.parseAttribute();
						if (this.tok() != 73 && this.tok() != 32 && this.tok() != 29 && this.tok() != 16) {
							this.i = tmp_1572;
							expr_1560 = this.parseExpr();
						} else this.i = tmp_1572;
					}
				} break;
				
				default: 
				expr_1560 = this.parseExpr()
				};
			};
			let v_1573 = [];
			{
				let i_1574 = 0;
				let it_1575 = 0;
				let at_1576 = vars_1562.length;
				while (it_1575 < at_1576) {
					i_1574 = it_1575;
					it_1575++;
					{
						const n_1577 = /*TVar*/[23,vars_1562[i_1574],types_1563[i_1574],values_1564[i_1574],true,false];
						Project.data.set(n_1577, new NodeData(pos_1565[i_1574].line, pos_1565[i_1574].column, this.lex.fileName));
						v_1573.push(n_1577);
					};
				};
			};
			return /*TFunction*/[21,name_1561,expr_1560,v_1573,rettype_1570,external_1558];
		};
		parseClass(external_1578) {
			const _classExternal = this.classExternal;
			this.classExternal = external_1578;
			let isInterface = this.tok() == (22)? (1) : 0;
			this.i++;
			let t_1579 = this.parseType();
			let ext_1580 = (this.tok() == 12)? ((() => {
				this.i++;
				return this.parseType();
			})()) : (null);
			let impl_1581 = [];
			while (this.tok() == 18) {
				this.i++;
				impl_1581.push(this.parseType());
			};
			this.step(74);
			let fields_1582 = this.parseFields();
			this.step(73);
			let me_1583 = /*TClass*/[25,t_1579,ext_1580,impl_1581,fields_1582,(() => {
				const result_1584 = external_1578;
				if (result_1584 != null) { return result_1584 };
				return false;
			})(),isInterface];
			this.classExternal = _classExternal;
			return me_1583;
		};
		hasInterpolation(str_1585) {
			let chars = str_1585.split('');
			let i_1586 = 0;
			while (i_1586 < chars.length) {
				if (chars[i_1586] == '\\') { if (i_1586 + 1 < chars.length) { if (chars[i_1586 + 1] == '\\') { i_1586++ } else if (chars[i_1586 + 1] == '(') { return true } } };
				i_1586++;
			};
			return false;
		};
		parseInterpolations(str_1587) {
			const interpolate = (s_1588) => {
				let out = ['"'];
				if (s_1588.length < 2) { return s_1588 };
				let i_1589 = 0;
				const s_1590 = s_1588.split('"').join('\\"');
				const pushInterpolator = () => {
					i_1589++;
					i_1589++;
					const pushParen = () => {
						i_1589++;
						while (i_1589 < s_1590.length) {
							out.push(s_1590.charAt(i_1589));
							if (s_1590.charAt(i_1589) == '(') {
								pushParen();
								continue;
							};
							if (s_1590.charAt(i_1589) == ')') {
								i_1589++;
								return;
							};
							i_1589++;
						};
						throw 'String interpolation error: unclosed inner parenthesis';
					};
					while (i_1589 < s_1590.length) {
						out.push(s_1590.charAt(i_1589));
						if (s_1590.charAt(i_1589) == '(') {
							pushParen();
							continue;
						};
						if (s_1590.charAt(i_1589) == ')') {
							i_1589++;
							return;
						};
						i_1589++;
					};
					throw 'String interpolation error: unclosed parenthesis';
				};
				let result_1591 = ['"'];
				while (i_1589 < s_1590.length) {
					if (s_1590.charAt(i_1589) == '\\' && s_1590.charAt(i_1589 + 1) == '(') {
						result_1591.push('" + ');
						out.push('" + (');
						let ii = i_1589 + 1;
						pushInterpolator();
						result_1591.push(s_1590.substring(ii, i_1589 + 1));
						result_1591.push(' + "');
						out.push(' + "');
					} else {
						out.push(s_1590.charAt(i_1589));
						result_1591.push(s_1590.charAt(i_1589));
						i_1589++;
					};
				};
				result_1591.push('"');
				out.push('"');
				return out.join('');
			};
			let resStr = interpolate(str_1587);
			let tokens_1592 = Lexer.tokenize(Buffer.from(resStr), this.lex.fileName);
			try {
				let parsed_1594 = Parser.toNode(Parser.parseNodes(tokens_1592));
				{
					const temp_1595 = parsed_1594;
					switch (temp_1595&&temp_1595[0]) {
					case 11: {
						throw 'Parse interpolation error: got a block'
					} break;
					
					default: 
					return parsed_1594
					};
				};
			} catch (temp_1593) {
				if (true) { 
				const e = temp_1593
				{
					this.fail('Parse interpolation error: ' + e);
				} } else
				
				throw temp_1593;
			};
		};
		parseAttribute() {
			this.i++;
			let name_1596 = this.getgo(62);
			let values_1597 = [];
			if (this.tok() == 80) {
				this.i++;
				if (this.tok() != 79) { while (true) {
					values_1597.push(this.parseExpr());
					if (this.tok() == 75) { this.i++ } else break;
				} };
				this.step(79);
			};
			return new Attribute(name_1596, values_1597);
		};
		parseType() {
			let path_1598 = [];
			while (this.tok() == 62 && this.offset(1) == 77) {
				path_1598.push(this.getgo(62));
				this.i++;
			};
			let result_1599 = null;
			{
				const temp_1600 = this.tok();
				switch (temp_1600) {
				case 61: {
					{
						let name_1601 = this.getgo(61);
						if (path_1598.length != 0) { name_1601 = path_1598.join('.') + '.' + name_1601 };
						while (this.tok() == 77) {
							this.i++;
							this.getgo(61);
						};
						let sresult = (this.tok() == 99)? ((() => {
							this.i++;
							this.parametricTypeNesting++;
							let params_1602 = [this.parseType()];
							while (this.tok() == 75) {
								this.i++;
								params_1602.push(this.parseType());
							};
							if (this.parametricTypeNestingToken == 0) { this.parametricTypeNestingToken = this.tok() };
							{
								const temp_1603 = this.parametricTypeNestingToken;
								switch (temp_1603) {
								case 96: {
									{
										this.parametricTypeNesting -= 1;
										this.parametricTypeNestingToken = 0;
										this.i++;
									}
								} break;
								
								case 106: {
									{
										this.parametricTypeNesting -= 1;
										this.parametricTypeNestingToken = 96;
									}
								} break;
								
								case 108: {
									{
										this.parametricTypeNesting -= 1;
										this.parametricTypeNestingToken = 108;
									}
								} break;
								
								default: 
								this.unexpected()
								};
							};
							if (this.parametricTypeNesting < 0) { this.fail('parametricTypeNesting < 0') };
							return /*ParametricType*/[2,name_1601,params_1602];
						})()) : /*Type*/[1,name_1601];
						if (this.tok() == 90) {
							this.i++;
							sresult = /*Function*/[3,[sresult],this.parseType()];
						};
						result_1599 = sresult;
					}
				} break;
				
				case 72: {
					{
						if (path_1598.length != 0) { this.fail('Token.BkOpen') };
						this.i++;
						let res_1604 = null;
						{
							const temp_1605 = this.tok();
							switch (temp_1605) {
							case 71: {
								{
									this.i++;
									res_1604 = /*ParametricType*/[2,'Array',[/*Object*/[5,[],[]]]];
								}
							} break;
							
							case 76: {
								{
									this.i++;
									if (this.tok() == 71) {
										this.i++;
										res_1604 = /*ParametricType*/[2,'Map',[/*Object*/[5,[],[]], /*Object*/[5,[],[]]]];
									} else {
										res_1604 = /*ParametricType*/[2,'Map',[/*Object*/[5,[],[]], this.parseType()]];
									};
								}
							} break;
							
							default: 
							{
								let key = this.parseType();
								let innerRes = (this.tok() == 76)? ((() => {
									this.i++;
									return /*ParametricType*/[2,'Map',[key, this.parseType()]];
								})()) : /*ParametricType*/[2,'Array',[key]];
								this.step(71);
								if (this.tok() == 90) {
									this.i++;
									innerRes = /*Function*/[3,[res_1604],this.parseType()];
								};
								res_1604 = innerRes;
							}
							};
						};
						result_1599 = res_1604;
					}
				} break;
				
				case 74: {
					{
						if (path_1598.length != 0) { this.fail('Token.BrOpen') };
						this.i++;
						let sresult_1606 = (this.tok() == 73)? (/*Object*/[5,[],[]]) : (() => {
							let names_1607 = [];
							let types_1608 = [];
							while (this.tok() != 73) {
								names_1607.push(this.getgo(62));
								if (this.tok() == 76) {
									this.i++;
									types_1608.push(this.parseType());
								};
								if (this.tok() == 75) { this.i++ };
							};
							return /*Object*/[5,names_1607,types_1608];
						})();
						this.step(73);
						if (this.tok() == 90) {
							this.i++;
							sresult_1606 = /*Function*/[3,[sresult_1606],this.parseType()];
						};
						result_1599 = sresult_1606;
					}
				} break;
				
				case 80: {
					{
						if (path_1598.length != 0) { this.fail('Token.POpen') };
						this.i++;
						let args_1609 = [];
						while (this.tok() != 79) {
							this.parseType();
							if (this.tok() == 76) {
								this.i++;
								args_1609.push(this.parseType());
							};
							if (this.tok() == 75) { this.i++ };
						};
						this.step(79);
						this.step(90);
						result_1599 = /*Function*/[3,args_1609,this.parseType()];
					}
				} break;
				
				case 62: {
					{
						let res_1610 = null;
						{
							const temp_1611 = this.offset(1);
							switch (temp_1611) {
							case 76: {
								{
									let argName = this.getgo(this.tok());
									this.step(76);
									let argType = this.parseType();
									res_1610 = /*FunctionArg*/[4,argName,argType,null];
								}
							} break;
							
							default: 
							this.fail(('Type name `' + (this.print()) + '` can not start with lowercase'))
							};
						};
						result_1599 = res_1610;
					}
				} break;
				
				default: 
				this.fail('Expected type, parsed `' + Token.stringify(this.tok()) + '`')
				};
			};
			if (this.tok() == 81) { result_1599 = /*Optional*/[0,result_1599] };
			while (this.tok() == 81) this.i++;
			if (this.tok() == 90) {
				this.i++;
				result_1599 = /*Function*/[3,[result_1599],this.parseType()];
			};
			return result_1599;
		};
	}
	Parser.uuid = 0
	Parser.toNode = (nodes) => {
			if (nodes.length == 0) { return null };
			if (nodes.length > 1) { return /*TBlock*/[11,nodes] };
			return nodes[0];
		};
	Parser.parseNodes = (lexe) => {
			const parser = new Parser(lexe);
			return parser.nodes;
		};
	Parser.uid = () => { return (Parser.uuid++) };
	Parser.precedence = (op_1612) => {
			const left_1613 = 100;
			const right = 0;
			{
				const temp_1614 = op_1612;
				switch (temp_1614) {
				case 101: {
					return 0 + 100
				} break;
				
				case 102: {
					return 1 + 100
				} break;
				
				case 94: {
					return 1 + 100
				} break;
				
				case 111: {
					return 2 + 100
				} break;
				
				case 107: {
					return 2 + 100
				} break;
				
				case 105: {
					return 3 + 100
				} break;
				
				case 106: {
					return 3 + 100
				} break;
				
				case 108: {
					return 3 + 100
				} break;
				
				case 104: {
					return 4 + 100
				} break;
				
				case 112: {
					return 4 + 100
				} break;
				
				case 109: {
					return 4 + 100
				} break;
				
				case 95: {
					return 5 + 100
				} break;
				
				case 103: {
					return 5 + 100
				} break;
				
				case 96: {
					return 5 + 100
				} break;
				
				case 99: {
					return 5 + 100
				} break;
				
				case 97: {
					return 5 + 100
				} break;
				
				case 100: {
					return 5 + 100
				} break;
				
				case 92: {
					return 7 + 100
				} break;
				
				case 93: {
					return 8 + 100
				} break;
				
				case 91: {
					return 10 + 0
				} break;
				
				default: 
				this.fail('No precedence for ' + Token.stringify(op_1612))
				};
			};
		};
	Parser.isBinop = (t_1615) => {
			const temp_1616 = t_1615;
			switch (temp_1616) {
			case 111: {
				return true
			} break;
			
			case 102: {
				return true
			} break;
			
			case 94: {
				return true
			} break;
			
			case 107: {
				return true
			} break;
			
			case 91: {
				return true
			} break;
			
			case 95: {
				return true
			} break;
			
			case 103: {
				return true
			} break;
			
			case 96: {
				return true
			} break;
			
			case 97: {
				return true
			} break;
			
			case 99: {
				return true
			} break;
			
			case 100: {
				return true
			} break;
			
			case 112: {
				return true
			} break;
			
			case 104: {
				return true
			} break;
			
			case 109: {
				return true
			} break;
			
			case 92: {
				return true
			} break;
			
			case 93: {
				return true
			} break;
			
			case 105: {
				return true
			} break;
			
			case 106: {
				return true
			} break;
			
			case 108: {
				return true
			} break;
			
			case 101: {
				return true
			} break;
			
			default: 
			return false
			};
		};
	var TestParser = class {
	}
	TestParser.passed = 0
	TestParser.overall = 0
	TestParser.test = () => {
			console.log('TestParser begin');
			TestParser.shouldAllEqual(new Map([['', '<!--null-->'], ['  ', '<!--null-->'], ['	', '<!--null-->'], ['   	', '<!--null-->'], ['\n', '<!--null-->'], ['\n\n', '<!--null-->'], ['\r\r\n\r\n\r\t', '<!--null-->'], ['{}', 'TBlock([])'], ['{{}}', 'TBlock([TBlock([])])'], ['{ 0 0 0 }', 'TBlock([TInt(0),TInt(0),TInt(0)])'], ['0', 'TInt(0)'], [' 0 ', 'TInt(0)'], ['123', 'TInt(123)'], ['12', 'TInt(12)'], ['0x1', 'TInt(0x1)'], ['0x0', 'TInt(0x0)'], ['0xF', 'TInt(0xF)'], ['0xFA', 'TInt(0xFA)'], ['0xFABCDEF', 'TInt(0xFABCDEF)'], ['0.0', 'TFloat(0.0)'], ['0.123', 'TFloat(0.123)'], ['\'s\'', 'TString(s)'], ['\"s\"', 'TString(s)']]));
			TestParser.shouldAllEqual(new Map([['1 2 3 trace("Hello!", "World!") + 5 * 6 / 3', 'TBlock([\n					TInt(1),\n					TInt(2),\n					TInt(3),\n					TBinop(\n					TCall(TIdent(trace),[TString(Hello!),TString(World!)]),\n					+,\n					TBinop(TInt(5),*,TBinop(TInt(6),/,TInt(3))))])'], ['enum Test { Demo } hello World', 'TBlock([TEnum(Type(Test),[NodeTypeValue(Type(Demo))]),\n					TIdent(hello),\n					NodeTypeValue(Type(World))])']]));
			TestParser.shouldAllEqual(new Map([['i ++ ++ i', 'TBlock([TUnop(++,true,TIdent(i)),TUnop(++,false,TIdent(i))])'], ['a + b', 'TBinop(TIdent(a),+,TIdent(b))'], ['a += b', 'TAssignop(TIdent(a),+,TIdent(b))']]));
			TestParser.shouldAllEqual(new Map([['"\\\\(v)"', 'TString(\\\\(v))'], ['"\\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TString())))'], ['"\\(((v)))"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(TParenthesis(TParenthesis(TIdent(v)))),+,TString())))'], ['"\\( v )"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TString())))'], ['"\\(V)\\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))'], ['"\\(V)\\(v)s\\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TBinop(TString(s),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))))'], ['"\\(V)s\\(v)s\\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString(s),+,TBinop(TParenthesis(TIdent(v)),+,TBinop(TString(s),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))))']]));
			TestParser.shouldAllEqualWithoutTrim(new Map([['"\\( v )"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(TIdent(v)),+,TString())))'], ['"\\(V)\r\n\\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString(\n),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))'], ['"\\(V) \\(v) \\(v)"', 'TParenthesis(TBinop(TString(),+,TBinop(TParenthesis(NodeTypeValue(Type(V))),+,TBinop(TString( ),+,TBinop(TParenthesis(TIdent(v)),+,TBinop(TString( ),+,TBinop(TParenthesis(TIdent(v)),+,TString())))))))']]));
			TestParser.shouldAllEqual(new Map([['using A', 'TUsing(A)'], ['using A, B, C', 'TUsing(A,B,C)']]));
			TestParser.shouldAllEqual(new Map([['module { }', 'TBlock([TModule(,[]),TBlock([])])'], ['module', 'TModule(, [])'], ['code module x code', 'TBlock([TIdent(code),TModule(x,[TIdent(code)])])'], ['code module x module y code', 'TBlock([TIdent(code),TModule(x,[]),TModule(y,[TIdent(code)])])'], ['code module x module y code {code}', 'TBlock([TIdent(code),TModule(x,[]),TModule(y,[TIdent(code)]),TBlock([TIdent(code)])])'], ['module a', 'TModule(a, [])'], ['module a.b', 'TModule(a.b, [])'], ['module class Inner { }', 'TModule(,[TClass(Type(Inner),null,[],[],false)])'], ['module private class Inner {}', 'TModule(,[TPrivate(TClass(Type(Inner),null,[],[],false))])'], ['module a module b', 'TBlock([TModule(a,[]),TModule(b,[])])']]));
			TestParser.shouldAllEqual(new Map([['var a = new Array<A>()', 'TVar(a,null,TNew([],ParametricType(Array,[Type(A)]),[],[],[],[]),false,false)'], ['a = Array<A>.staticField()', 'TBinop(TIdent(a),=,TCall(TDot(NodeTypeValue(ParametricType(Array,[Type(A)])),staticField),[]))'], ['a = EnumTest.EnumField', 'TBinop(TIdent(a),=,TDotUpper(NodeTypeValue(Type(EnumTest)),EnumField))'], ['a = EnumTest.EnumField(arg)', 'TBinop(TIdent(a),=,TCall(TDotUpper(NodeTypeValue(Type(EnumTest)),EnumField),[TIdent(arg)]))'], ['a = EnumTest.EnumField(argName: argValue, arg2, arg3: arg3)', 'TBinop(TIdent(a),=,TCall(TDotUpper(NodeTypeValue(Type(EnumTest)),EnumField),[argName:TIdent(argValue),TIdent(arg2),arg3:TIdent(arg3)]))'], ['a = EnumTest<A,B>.EnumField', 'TBinop(TIdent(a),=,TDotUpper(NodeTypeValue(ParametricType(EnumTest,[Type(A),Type(B)])),EnumField))'], ['var a = b as B, c = d as! B, e = f as? B', 'TVars([TVar(a,null,TAs(TIdent(b),<!--default-->,Type(B)),false,false),TVar(c,null,TAs(TIdent(d),!,Type(B)),false,false),TVar(e,null,TAs(TIdent(f),?,Type(B)),false,false)])'], ['var a = b is B, c = d is B, e = f is B', 'TVars([TVar(a,null,TAs(TIdent(b),Type(B)),false,false),TVar(c,null,TAs(TIdent(d),Type(B)),false,false),TVar(e,null,TAs(TIdent(f),Type(B)),false,false)])']]));
			TestParser.shouldAllEqual(new Map([['var x:[Array<T>]', 'TVar(x,ParametricType(Array,[ParametricType(Array,[Type(T)])]),null,false,false)'], ['var x:[Map<K,V> : Array<T>]', 'TVar(x,ParametricType(Map,[ParametricType(Map,[Type(K),Type(V)]),ParametricType(Array,[Type(T)])]),null,false,false)'], ['var x:{}, y:[], z:[:], w:()=>{}', 'TVars([TVar(x,Object([],[]),null,false,false),TVar(y,ParametricType(Array,[Object([],[])]),null,false,false),TVar(z,ParametricType(Map,[Object([],[]),Object([],[])]),null,false,false),TVar(w,Function([],Object([],[])),null,false,false)])'], ['let x:()=>()=>()=>()=>Void', 'TVar(x,Function([],Function([],Function([],Function([],Type(Void))))),null,true,false)']]));
			TestParser.shouldAllEqual(new Map([['enum A {}', 'TEnum(Type(A),[])'], ['enum A { A B C }', 'TEnum(Type(A),[NodeTypeValue(Type(A)),NodeTypeValue(Type(B)),NodeTypeValue(Type(C))])'], ['enum A { A(v:Int) B C(v:[K:V], a:Array<T>) }', 'TEnum(Type(A),[\n					TCall(NodeTypeValue(Type(A)),[v:NodeTypeValue(Type(Int))]),\n					NodeTypeValue(Type(B)),\n					TCall(NodeTypeValue(Type(C)),[v:TMap([NodeTypeValue(Type(K))],[NodeTypeValue(Type(V))]),a:NodeTypeValue(ParametricType(Array,[Type(T)]))])\n					])'], ['enum A { E(v: T<T>?) }', 'TEnum(Type(A),[TCall(NodeTypeValue(Type(E)),[v:NodeTypeValue(Optional(ParametricType(T,[Type(T)])))])])'], ['enum A { E(v: T<T?>) }', 'TEnum(Type(A),[TCall(NodeTypeValue(Type(E)),[v:NodeTypeValue(ParametricType(T,[Optional(Type(T))]))])])'], ['enum A { E(v: T?) }', 'TEnum(Type(A),[TCall(NodeTypeValue(Type(E)),[v:NodeTypeValue(Optional(Type(T)))])])']]));
			TestParser.shouldAllEqual(new Map([['new A(a: 1, b: 2)', 'TNew([],Type(A),[TInt(1),TInt(2)],[],[],[a,b])'], ['class A {} var a = new A { } ()', 'TBlock([TClass(Type(A),null,[],[],false),TVar(a,null,TNew([],Type(A),[],[],[],[]),false,false)])'], ['class A { var field: String } var a = new A { field: "Value" } ()', 'TBlock([TClass(Type(A),null,[],[TVar(field,Type(String),null,false,false)],false),TVar(a,null,TNew([],Type(A),[],[field],[TString(Value)],[]),false,false)])'], ['class A { var field: String var otherfield: Int } var a = new A { field: "Value", otherfield: 25 } ()', 'TBlock([TClass(Type(A),null,[],[TVar(field,Type(String),null,false,false),TVar(otherfield,Type(Int),null,false,false)],false),TVar(a,null,TNew([],Type(A),[],[field,otherfield],[TString(Value),TInt(25)],[]),false,false)])']]));
			TestParser.shouldAllError(['class A { new(a b) {} }', 'class A { new(a, b,) {} }', 'class A { new(,) {} }', 'function f(a b c) {}', 'function f(a b) {}', 'function f(a, b,) {}', 'function f(a,) {}', 'function f(,) {}']);
			TestParser.shouldAllError(['class A { var i: Int { set (value) {} } }', 'class A { var i: Int { get {} set () {} } }', 'class A { var i: Int { get {} set {} } }', 'class A { let i: Int { get {} set (value) {} } }', 'class A { let i: Int { get {} set (value, val) {} } }', 'class A { var i: Int { get {} set (Value) {} } }', 'class A { var i: Int { get (value) {} set (value) {} } }', 'class A { var i: Int {} }']);
			TestParser.shouldAllError(['if(,) {}', 'if(a,) {}', 'switch (,) {}', 'switch (a,) {}', '@att(,) x', '@att(a,) x', '@att(a,b,) x', '@att(a b,) x', '@att(a b) x', 'new T(,)', 'new T(a b,)', 'new T(a,b,)', 'new T(a b)', 'call(1 2)', 'call(1 2,)', 'call(1,2,)', 'call(1,)', 'call(a:1,)', 'call(1:1,)', 'call(a:,)', 'call(a:)', 'call(,)', '[1 2]', '[,]', '[1,]', '[1,2,]', '[1:1 2:2]', '[1:1,2:2,]', '{a:1 b:2}', '{,}', '{a:1,}', '{a:1,b:2,}']);
			TestParser.shouldAllError(['=', '= 1']);
			TestParser.shouldAllEqual(new Map([['if (this) this', 'TIf([TThis],TThis,<!--null-->)'], ['if (this, this) this else break', 'TIf([TThis,TThis],TThis,TBreak)'], ['if (this, let a = this) this else break', 'TIf([TThis,TVar(a,null,TThis,true,false)],TThis,TBreak)'], ['if (let a = this, let b = this, this) this', 'TIf([TVar(a,null,TThis,true,false),TVar(b,null,TThis,true,false),TThis],TThis,<!--null-->)']]));
			TestParser.shouldAllEqual(new Map([['declare var a: T', 'TVar(a,Type(T),null,false,true)'], ['declare let a: T', 'TVar(a,Type(T),null,true,true)'], ['declare function name()', 'TFunction(name,null,[],null,true)'], ['declare function name() hi()', 'TBlock([TFunction(name,null,[],null,true),TCall(TIdent(hi),[])])'], ['declare function name() {}', 'TBlock([TFunction(name,null,[],null,true),TBlock([])])'], ['declare class A {}', 'TClass(Type(A),null,[],[],true)'], ['declare A = B', 'TTypeAlias(Type(A),Type(B))']]));
			TestParser.shouldAllError(['declare var a, b, c', 'declare anything']);
			TestParser.shouldAllEqual(new Map([['push([:])', 'TCall(TIdent(push),[TMap([],[])])'], ['push([])', 'TCall(TIdent(push),[TArray([])])'], ['[].length', 'TDot(TArray([]),length)'], ['[:].length', 'TDot(TMap([],[]),length)'], ['[[:]]', 'TArray([TMap([],[])])']]));
			console.log(('TestParser done ' + (Math.round((TestParser.passed / TestParser.overall) * 100)) + '% (' + (TestParser.passed) + '/' + (TestParser.overall) + ')'));
		};
	TestParser.shouldEqual = (input_1621, test) => {
			const test_1622 = TestParser.deepTrim(test);
			TestParser.shouldEqualWithoutTrim(input_1621, test_1622);
		};
	TestParser.shouldEqualWithoutTrim = (input_1623, test_1624) => {
			TestParser.overall++;
			let lexe_1625 = Lexer.tokenize(Buffer.from(input_1623), 'TEST');
			let parsed_1626 = Parser.toNode(Parser.parseNodes(lexe_1625));
			let res_1627 = TestParser.stringify(parsed_1626);
			if (test_1624 != res_1627) { throw ('TestParser test fail: `' + (input_1623) + '`\n!==: `' + (test_1624) + '`\nGot: `' + (res_1627) + '`\nParsed: `' + (parsed_1626) + '`') };
			TestParser.passed++;
		};
	TestParser.shouldAllEqual = (map_1628) => { for (const input of $toIterator(map_1628.keys())) {
			let test_1629 = map_1628.get(input);
			TestParser.shouldEqual(input, test_1629);
		} };
	TestParser.shouldAllEqualWithoutTrim = (map_1630) => { for (const input of $toIterator(map_1630.keys())) {
			let test_1631 = map_1630.get(input);
			TestParser.shouldEqualWithoutTrim(input, test_1631);
		} };
	TestParser.shouldError = (input_1632) => {
			TestParser.overall++;
			try {
				let lexe_1634 = Lexer.tokenize(Buffer.from(input_1632), 'TEST');
				let parser_1635 = Parser.toNode(Parser.parseNodes(lexe_1634));
			} catch (temp_1633) {
				if (true) { 
				const e = temp_1633
				{
					TestParser.passed++;
					return;
				} } else
				
				throw temp_1633;
			};
			throw ('TestParser test fail: `' + (input_1632) + '` did not throw exception.');
		};
	TestParser.shouldAllError = (input_1636) => { for (const str of $toIterator(input_1636)) {
			TestParser.shouldError(str);
		} };
	TestParser.deepTrim = (s_1637) => { return s_1637.split('\n').join('').split('\r').join('').split('\t').join('').split(' ').join('') };
	TestParser.stringify = (node_1638) => {
			const temp_1639 = node_1638;
			switch (temp_1639&&temp_1639[0]) {
			case null: case undefined: {
				return '<!--null-->'
			} break;
			
			case 0: {
				{
					const s_1640 = temp_1639[1];
					return ('TString(' + (s_1640) + ')');
				}
			} break;
			
			case 1: {
				{
					const s_1641 = temp_1639[1];
					return ('TIdent(' + (s_1641) + ')');
				}
			} break;
			
			case 2: {
				{
					const b_1642 = temp_1639[1];
					return ('TBool(' + (b_1642) + ')');
				}
			} break;
			
			case 3: {
				return 'TThis'
			} break;
			
			case 4: {
				return 'TSuper'
			} break;
			
			case 5: {
				{
					const s_1643 = temp_1639[1];
					return ('TInt(' + (s_1643) + ')');
				}
			} break;
			
			case 6: {
				{
					const s_1644 = temp_1639[1];
					return ('TFloat(' + (s_1644) + ')');
				}
			} break;
			
			case 7: {
				return 'TNull'
			} break;
			
			case 17: {
				return 'TBreak'
			} break;
			
			case 18: {
				return 'TContinue'
			} break;
			
			case 40: {
				{
					const expr_1645 = temp_1639[1];
					const type_1646 = temp_1639[2];
					return 'TAs(' + TestParser.stringify(expr_1645) + ',' + TestParser.stringifyType(type_1646) + ')';
				}
			} break;
			
			case 41: {
				{
					const expr_1647 = temp_1639[1];
					const kind_1648 = temp_1639[2];
					const type_1649 = temp_1639[3];
					return 'TAs(' + TestParser.stringify(expr_1647) + ',' + Token.stringify(kind_1648) + ',' + TestParser.stringifyType(type_1649) + ')';
				}
			} break;
			
			case 9: {
				{
					const a_1650 = temp_1639[1];
					const op_1651 = temp_1639[2];
					const b_1652 = temp_1639[3];
					return 'TBinop(' + TestParser.stringify(a_1650) + ',' + Token.stringify(op_1651) + ',' + TestParser.stringify(b_1652) + ')';
				}
			} break;
			
			case 10: {
				{
					const a_1653 = temp_1639[1];
					const op_1654 = temp_1639[2];
					const b_1655 = temp_1639[3];
					return 'TAssignop(' + TestParser.stringify(a_1653) + ',' + Token.stringify(op_1654) + ',' + TestParser.stringify(b_1655) + ')';
				}
			} break;
			
			case 11: {
				{
					const els_1656 = temp_1639[1];
					return 'TBlock(' + TestParser.stringifyNodeArray(els_1656) + ')';
				}
			} break;
			
			case 23: {
				{
					const name_1657 = temp_1639[1];
					const t_1658 = temp_1639[2];
					const expr_1659 = temp_1639[3];
					const const_1660 = temp_1639[4];
					const external_1661 = temp_1639[5];
					return ('TVar(' + (name_1657) + ',') + (((t_1658 != null))? (TestParser.stringifyType(t_1658)) : 'null') + ',' + (((expr_1659 != null))? (TestParser.stringify(expr_1659)) : 'null') + (',' + (const_1660) + ',' + (external_1661) + ')');
				}
			} break;
			
			case 24: {
				{
					const vars_1662 = temp_1639[1];
					return 'TVars(' + TestParser.stringifyNodeArray(vars_1662) + ')';
				}
			} break;
			
			case 21: {
				{
					const name_1663 = temp_1639[1];
					const expr_1664 = temp_1639[2];
					const vars_1665 = temp_1639[3];
					const rettype_1666 = temp_1639[4];
					const external_1667 = temp_1639[5];
					return ('TFunction(' + (name_1663) + ',') + (expr_1664 == (null)? ('null') : TestParser.stringify(expr_1664)) + ',' + TestParser.stringifyNodeArray(vars_1665) + ',' + (((rettype_1666 != null))? (TestParser.stringifyType(rettype_1666)) : 'null') + (',' + (external_1667) + ')');
				}
			} break;
			
			case 22: {
				{
					const expr_1668 = temp_1639[1];
					const vars_1669 = temp_1639[2];
					const rettype_1670 = temp_1639[3];
					return 'TArrow(' + (expr_1668 == (null)? ('null') : TestParser.stringify(expr_1668)) + ',' + TestParser.stringifyNodeArray(vars_1669) + ',' + (((rettype_1670 != null))? (TestParser.stringifyType(rettype_1670)) : 'null') + ')';
				}
			} break;
			
			case 12: {
				{
					const e_1671 = temp_1639[1];
					const el_1672 = temp_1639[2];
					const argNames_1673 = temp_1639[3];
					{
						let res_1674 = 'TCall(' + TestParser.stringify(e_1671) + ',[';
						{
							let i_1675 = 0;
							let it_1676 = 0;
							let at_1677 = el_1672.length;
							while (it_1676 < at_1677) {
								i_1675 = it_1676;
								it_1676++;
								{
									res_1674 += ((argNames_1673[i_1675] == null))? ('') : argNames_1673[i_1675] + ':';
									res_1674 += TestParser.stringify(el_1672[i_1675]) + (((i_1675 != el_1672.length - 1))? (',') : '');
								};
							};
						};
						return res_1674 + '])';
					};
				}
			} break;
			
			case 14: {
				{
					const e_1678 = temp_1639[1];
					return 'TParenthesis(' + TestParser.stringify(e_1678) + ')';
				}
			} break;
			
			case 15: {
				{
					const e_1679 = temp_1639[1];
					return 'TReturn(' + TestParser.stringify(e_1679) + ')';
				}
			} break;
			
			case 16: {
				{
					const e_1680 = temp_1639[1];
					return 'TThrow(' + TestParser.stringify(e_1680) + ')';
				}
			} break;
			
			case 37: {
				{
					const t_1681 = temp_1639[1];
					const els_1682 = temp_1639[2];
					return 'TEnum(' + TestParser.stringifyType(t_1681) + ',' + TestParser.stringifyNodeArray(els_1682) + ')';
				}
			} break;
			
			case 39: {
				{
					const a_1683 = temp_1639[1];
					return 'TUsing(' + a_1683.join(',') + ')';
				}
			} break;
			
			case 35: {
				{
					const paths = temp_1639[1];
					const els_1684 = temp_1639[2];
					return 'TModule(' + paths.join('.') + ',' + TestParser.stringifyNodeArray(els_1684) + ')';
				}
			} break;
			
			case 32: {
				{
					const k_1685 = temp_1639[1];
					const v_1686 = temp_1639[2];
					return 'TMap([' + (() => {
						const result_1687 = [];
						const value_1688 = k_1685;
						for (const p of $toIterator(value_1688)) result_1687.push(TestParser.stringify(p));
						return result_1687;
					})().join(',') + '],[' + (() => {
						const result_1689 = [];
						const value_1690 = v_1686;
						for (const p of $toIterator(value_1690)) result_1689.push(TestParser.stringify(p));
						return result_1689;
					})().join(',') + '])';
				}
			} break;
			
			case 25: {
				{
					const type_1691 = temp_1639[1];
					const extend_1692 = temp_1639[2];
					const implement_1693 = temp_1639[3];
					const fields_1694 = temp_1639[4];
					const external_1695 = temp_1639[5];
					{
						let res_1696 = 'TClass(' + TestParser.stringifyType(type_1691) + ',';
						res_1696 += ((extend_1692 != null))? (TestParser.stringifyType(extend_1692)) : 'null,';
						res_1696 += TestParser.stringifyNodeTypeArray(implement_1693) + ',';
						res_1696 += TestParser.stringifyNodeArray(fields_1694) + ',';
						res_1696 += external_1695 + ')';
						return res_1696;
					};
				}
			} break;
			
			case 30: {
				{
					const path_1697 = temp_1639[1];
					const t_1698 = temp_1639[2];
					const args_1699 = temp_1639[3];
					const names_1700 = temp_1639[4];
					const values_1701 = temp_1639[5];
					const argNames_1702 = temp_1639[6];
					return 'TNew([' + path_1697.join('.') + '],' + TestParser.stringifyType(t_1698) + ',' + TestParser.stringifyNodeArray(args_1699) + ',[' + names_1700.join(',') + '],' + TestParser.stringifyNodeArray(values_1701) + ',[' + argNames_1702.join(',') + '])';
				}
			} break;
			
			case 48: {
				{
					const type_1703 = temp_1639[1];
					return 'NodeTypeValue(' + TestParser.stringifyType(type_1703) + ')';
				}
			} break;
			
			case 8: {
				{
					const alias_1704 = temp_1639[1];
					const value_1705 = temp_1639[2];
					return 'TTypeAlias(' + TestParser.stringifyType(alias_1704) + ',' + TestParser.stringifyType(value_1705) + ')';
				}
			} break;
			
			case 28: {
				{
					const l = temp_1639[1];
					const r = temp_1639[2];
					return 'TDot(' + TestParser.stringify(l) + ',' + r + ')';
				}
			} break;
			
			case 29: {
				{
					const l_1706 = temp_1639[1];
					const r_1707 = temp_1639[2];
					return 'TDotUpper(' + TestParser.stringify(l_1706) + ',' + r_1707 + ')';
				}
			} break;
			
			case 44: {
				{
					const expr_1708 = temp_1639[1];
					return 'TPrivate(' + TestParser.stringify(expr_1708) + ')';
				}
			} break;
			
			case 13: {
				{
					const econd_1709 = temp_1639[1];
					const eif_1710 = temp_1639[2];
					const eelse_1711 = temp_1639[3];
					return 'TIf(' + TestParser.stringifyNodeArray(econd_1709) + ',' + TestParser.stringify(eif_1710) + ',' + TestParser.stringify(eelse_1711) + ')';
				}
			} break;
			
			case 31: {
				{
					const el_1712 = temp_1639[1];
					return 'TArray(' + TestParser.stringifyNodeArray(el_1712) + ')';
				}
			} break;
			
			case 19: {
				{
					const op_1713 = temp_1639[1];
					const postfix_1714 = temp_1639[2];
					const e_1715 = temp_1639[3];
					return 'TUnop(' + Token.stringify(op_1713) + ',' + postfix_1714 + ',' + TestParser.stringify(e_1715) + ')';
				}
			} break;
			
			default: 
			throw '<!--' + node_1638 + '-->'
			};
		};
	TestParser.stringifyNodeArray = (arr) => { return '[' + (() => {
			const result_1716 = [];
			const value_1717 = arr;
			for (const e of $toIterator(value_1717)) result_1716.push(TestParser.stringify(e));
			return result_1716;
		})().join(',') + ']' };
	TestParser.stringifyNodeTypeArray = (arr_1718) => { return '[' + (() => {
			const result_1719 = [];
			const value_1720 = arr_1718;
			for (const e of $toIterator(value_1720)) result_1719.push(TestParser.stringifyType(e));
			return result_1719;
		})().join(',') + ']' };
	TestParser.stringifyType = (node_1721) => {
			const temp_1722 = node_1721;
			switch (temp_1722&&temp_1722[0]) {
			case 1: {
				{
					const s_1723 = temp_1722[1];
					return ('Type(' + (s_1723) + ')');
				}
			} break;
			
			case 2: {
				{
					const name_1724 = temp_1722[1];
					const params_1725 = temp_1722[2];
					return ('ParametricType(' + (name_1724) + ',[') + (() => {
						const result_1726 = [];
						const value_1727 = params_1725;
						for (const p of $toIterator(value_1727)) result_1726.push(TestParser.stringifyType(p));
						return result_1726;
					})().join(',') + '])';
				}
			} break;
			
			case 3: {
				{
					const args_1728 = temp_1722[1];
					const rettype_1729 = temp_1722[2];
					return 'Function([' + (() => {
						const result_1730 = [];
						const value_1731 = args_1728;
						for (const e of $toIterator(value_1731)) result_1730.push(TestParser.stringifyType(e));
						return result_1730;
					})().join(',') + '],' + TestParser.stringifyType(rettype_1729) + ')';
				}
			} break;
			
			case 5: {
				{
					const names_1732 = temp_1722[1];
					const types_1733 = temp_1722[2];
					return 'Object([' + names_1732.join(',') + '],[' + (() => {
						const result_1734 = [];
						const value_1735 = types_1733;
						for (const e of $toIterator(value_1735)) result_1734.push(TestParser.stringifyType(e));
						return result_1734;
					})().join(',') + '])';
				}
			} break;
			
			case 0: {
				{
					const type_1736 = temp_1722[1];
					return 'Optional(' + TestParser.stringifyType(type_1736) + ')';
				}
			} break;
			
			default: 
			throw '<!--' + node_1721 + '-->'
			};
		};
	var GenJs = class {
		constructor() { 
			this.extension = '.js'
			this.nativeEnums = false
			this.toIterator = false
			this.tabs = '\t\t'
			this.globalAccessor = ''
			this.reserved = ['with', 'const', 'instanceof', 'typeof', 'delete', 'undefined', 'package_TODO', 'async', 'await', 'arguments']
		{
		} };
		perform(normalizer) {
			this.project = normalizer;
			return this.stringify();
		};
		stringify() {
			const out_1760 = ['// Generated by Hexa\n'];
			if (this.project.package.addLicenseNoticeToOutput) {
				out_1760.push(('// ' + (this.project.package.name) + '\n'));
				out_1760.push(('// LICENSE ' + (this.project.package.license) + '\n'));
			} else {
				out_1760.push('// The generated code is subject to the original license\n');
			};
			out_1760.push(';(function() {\n\t"use strict"\n\tconst $global = typeof(window) === "undefined"? global : window');
			out_1760.push('\n\tif (typeof($global.require) === "undefined") { $global.require = function () {} };');
			const constantsIndex = out_1760.length;
			const constants = [];
			out_1760.push('');
			for (const e of $toIterator(this.project.enumsSimple)) {
				if (e.staticVars.length + e.staticMethods.length == 0) { continue };
				out_1760.push('\n\tvar ' + e.name + ' = {');
				for (const v of $toIterator(e.staticMethods)) {
					const temp_1761 = v;
					switch (temp_1761&&temp_1761[0]) {
					case 7: {
						{
							const name_1762 = temp_1761[1];
							const expr_1763 = temp_1761[2];
							const args_1764 = temp_1761[3];
							const defaults_1765 = temp_1761[4];
							{
								out_1760.push('\n\t\t' + name_1762 + ': ');
								out_1760.push(this.printFunctionArguments(args_1764, defaults_1765) + ' => { ' + this.printStatement(expr_1763) + ' }');
								out_1760.push(',');
							};
						}
					} break;
					};
				};
				out_1760.push('\n\t}');
				for (const v of $toIterator(e.staticVars)) {
					const temp_1766 = v;
					switch (temp_1766&&temp_1766[0]) {
					case 5: {
						{
							const name_1767 = temp_1766[1];
							const expr_1768 = temp_1766[2];
							{
								out_1760.push('\n\t' + e.name + '.' + name_1767);
								if (expr_1768 != null) { out_1760.push(' = ' + this.printExpression(expr_1768)) };
							};
						}
					} break;
					
					case 6: {
						{
							const name_1769 = temp_1766[1];
							const expr_1770 = temp_1766[2];
							{
								out_1760.push('\n\t' + e.name + '.' + name_1769);
								out_1760.push(' = ' + this.printExpression(expr_1770));
							};
						}
					} break;
					};
				};
			};
			for (const e of $toIterator(this.project.enumsComplex)) {
				if ((e.staticMethods.length == 0) && (e.names.length == 0)) { out_1760.push('\n\tvar ' + e.name + ' = {}') } else {
					out_1760.push('\n\tvar ' + e.name + ' = {');
					for (const v of $toIterator(e.staticMethods)) {
						const temp_1771 = v;
						switch (temp_1771&&temp_1771[0]) {
						case 7: {
							{
								const name_1772 = temp_1771[1];
								const expr_1773 = temp_1771[2];
								const args_1774 = temp_1771[3];
								const defaults_1775 = temp_1771[4];
								{
									out_1760.push('\n\t\t' + name_1772 + ': ');
									out_1760.push(this.printFunctionArguments(args_1774, defaults_1775) + ' => { ' + this.printStatement(expr_1773) + ' }');
									out_1760.push(',');
								};
							}
						} break;
						};
					};
					let i_1776 = 0;
					for (const name of $toIterator(e.names)) {
						if (e.constructors[i_1776] != null) {
							out_1760.push('\n\t\t' + name + ': ');
							out_1760.push('(' + e.constructors[i_1776].join(',') + ')=>[');
							out_1760.push('' + i_1776 + ',' + e.constructors[i_1776].join(','));
							out_1760.push('],');
						};
						i_1776++;
					};
					out_1760.push('\n\t}');
				};
				let i_1777 = 0;
				for (const name of $toIterator(e.names)) {
					if (e.constructors[i_1777] != null) {} else {
						out_1760.push('\n\tObject.defineProperty(' + e.name + ', "' + name + '", { get: function() { return [' + i_1777 + '] }})');
					};
					i_1777++;
				};
				for (const v of $toIterator(e.staticVars)) {
					const temp_1778 = v;
					switch (temp_1778&&temp_1778[0]) {
					case 5: {
						{
							const name_1779 = temp_1778[1];
							const expr_1780 = temp_1778[2];
							{
								out_1760.push('\n\t' + e.name + '.' + name_1779);
								if (expr_1780 != null) { out_1760.push(' = ' + this.printExpression(expr_1780)) };
							};
						}
					} break;
					
					case 6: {
						{
							const name_1781 = temp_1778[1];
							const expr_1782 = temp_1778[2];
							{
								out_1760.push('\n\t' + e.name + '.' + name_1781);
								out_1760.push(' = ' + this.printExpression(expr_1782));
							};
						}
					} break;
					};
				};
			};
			for (const i of $toIterator(this.project.interfaces)) {
				throw i;
			};
			for (const c of $toIterator(this.project.classes)) {
				if (c.useless) { continue };
				if (c.external) {
					if (c.jsRequire != null) {
						constants.push('\n\t' + 'const ' + c.name + ' = require("' + c.jsRequire + '")');
						continue;
					};
					{
						let step_1783 = 0;
						const jsNative = c.jsNative;
						let temp_1784 = null;
						if (step_1783 == 0 && jsNative != null) {
							temp_1784 = jsNative != c.name;
							step_1783 = 1;
						};
						if (step_1783 == 1 && temp_1784 != false) { step_1783 = 2 };
						if (step_1783 == 2) { out_1760.push('\n\t' + 'var ' + c.name + ' = $global.' + jsNative) };
					};
					continue;
				};
				out_1760.push('\n\t' + 'var ' + c.name + ' = class');
				{
					let step_1785 = 0;
					const extend_1786 = c.extend;
					if (step_1785 == 0 && extend_1786 != null) { step_1785 = 1 };
					if (step_1785 == 1) { out_1760.push(' extends ' + extend_1786) };
				};
				out_1760.push(' {');
				for (const v of $toIterator(c.methods)) {
					const temp_1787 = v;
					switch (temp_1787&&temp_1787[0]) {
					case 7: {
						{
							const name_1788 = temp_1787[1];
							const expr_1789 = temp_1787[2];
							const args_1790 = temp_1787[3];
							{
								if (name_1788 == null || name_1788 == 'new') { out_1760.push('\n\t\tconstructor') } else out_1760.push('\n\t\t' + name_1788);
								out_1760.push('(' + args_1790.join(', ') + ') ');
								if ((name_1788 == null || name_1788 == 'new') && (c.vars.length > 0)) {
									out_1760.push('{ ');
									for (const v of $toIterator(c.vars)) {
										const temp_1791 = v;
										switch (temp_1791&&temp_1791[0]) {
										case 5: {
											{
												const name_1792 = temp_1791[1];
												const expr_1793 = temp_1791[2];
												if (expr_1793 != null) { out_1760.push('\n\t\t\tthis.' + name_1792 + ' = ' + this.printExpression(expr_1793) + '') };
											}
										} break;
										
										case 6: {
											{
												const name_1794 = temp_1791[1];
												const expr_1795 = temp_1791[2];
												if (expr_1795 != null) { out_1760.push('\n\t\t\tthis.' + name_1794 + ' = ' + this.printExpression(expr_1795) + '') };
											}
										} break;
										};
									};
									out_1760.push('\n\t\t');
									out_1760.push(this.printStatement(expr_1789) + ' };');
								} else out_1760.push(this.printBlock(expr_1789) + ';');
							};
						}
					} break;
					};
				};
				for (const name of $toIterator(c.property)) {
					out_1760.push('\n\t\tget ' + name + ('() { return this.get_' + (name) + '(); };'));
					out_1760.push('\n\t\tset ' + name + ('(value) { return this.set_' + (name) + '(value); };'));
				};
				out_1760.push('\n\t}');
				for (const v of $toIterator(c.staticVars)) {
					const temp_1796 = v;
					switch (temp_1796&&temp_1796[0]) {
					case 5: {
						{
							const name_1797 = temp_1796[1];
							const expr_1798 = temp_1796[2];
							{
								out_1760.push('\n\t' + c.name + '.' + name_1797);
								if (expr_1798 != null) { out_1760.push(' = ' + this.printExpression(expr_1798)) };
							};
						}
					} break;
					
					case 6: {
						{
							const name_1799 = temp_1796[1];
							const expr_1800 = temp_1796[2];
							{
								out_1760.push('\n\t' + c.name + '.' + name_1799);
								out_1760.push(' = ' + this.printExpression(expr_1800));
							};
						}
					} break;
					};
				};
				for (const v of $toIterator(c.staticMethods)) {
					const temp_1801 = v;
					switch (temp_1801&&temp_1801[0]) {
					case 7: {
						{
							const name_1802 = temp_1801[1];
							const expr_1803 = temp_1801[2];
							const args_1804 = temp_1801[3];
							const defaults_1805 = temp_1801[4];
							{
								out_1760.push('\n\t' + c.name + '.' + name_1802 + ' = ');
								out_1760.push(this.printFunctionArguments(args_1804, defaults_1805) + ' => ' + this.printBlock(expr_1803) + ';');
							};
						}
					} break;
					};
				};
			};
			for (const g of $toIterator(this.project.globalFuncs)) {
				const temp_1806 = g;
				switch (temp_1806&&temp_1806[0]) {
				case 7: {
					{
						const name_1807 = temp_1806[1];
						const expr_1808 = temp_1806[2];
						const args_1809 = temp_1806[3];
						const defaults_1810 = temp_1806[4];
						{
							out_1760.push('\n\tfunction ' + name_1807);
							out_1760.push(this.printFunctionArguments(args_1809, defaults_1810) + ' ' + this.printBlock(expr_1808) + ';');
						};
					}
				} break;
				};
			};
			for (const g of $toIterator(this.project.globalVars)) {
				const temp_1811 = g;
				switch (temp_1811&&temp_1811[0]) {
				case 5: {
					{
						const name_1812 = temp_1811[1];
						const expr_1813 = temp_1811[2];
						{
							out_1760.push('\n\tvar ' + name_1812);
							if (expr_1813 != null) { out_1760.push(' = ' + this.printExpression(expr_1813)) } else out_1760.push(' = null');
						};
					}
				} break;
				
				case 6: {
					{
						const name_1814 = temp_1811[1];
						const expr_1815 = temp_1811[2];
						out_1760.push('\n\tvar ' + name_1814 + ' = ' + this.printExpression(expr_1815));
					}
				} break;
				};
			};
			for (const init of $toIterator(this.project.init)) {
				out_1760.push('\n\t{\n\t\t');
				out_1760.push(this.printStatement(init));
				out_1760.push('\n\t}');
			};
			if (this.toIterator) { constants.unshift('\n\tfunction $toIterator(v) { if (typeof(v) === "number") { v = Math.max(v, 0); const i = new Uint32Array(v); let n = 0; while (n < v) i[n] = n++; return i; } return v; };') };
			out_1760[constantsIndex] = constants.join('');
			out_1760.push('\n})();\n');
			return out_1760.join('');
		};
		pushTab() { this.tabs += '\t' };
		popTab() { this.tabs = this.tabs.substring(0, this.tabs.length - 1) };
		printBlock(s_1816) {
			const temp_1817 = s_1816;
			switch (temp_1817&&temp_1817[0]) {
			case 1: {
				{
					const el_1818 = temp_1817[1];
					{
						if (el_1818.length == 1) {
							const temp_1819 = el_1818[0];
							switch (temp_1819&&temp_1819[0]) {
							case 1: {
								return this.printStatement(el_1818[0])
							} break;
							};
						};
						if (el_1818.length == 1) { return '{ ' + this.printStatement(el_1818[0]) + ' }' };
						if (el_1818.length == 0) { return '{}' };
						return this.printStatement(s_1816);
					};
				}
			} break;
			
			default: 
			return '{ ' + this.printStatement(s_1816) + ' }'
			};
		};
		printStatement(s_1820) {
			{
				const temp_1821 = s_1820;
				switch (temp_1821&&temp_1821[0]) {
				case 0: {
					{
						const els_1822 = temp_1821[1];
						{
							let r_1823 = '';
							for (const s of $toIterator(els_1822)) if (s != null) { r_1823 += '\n' + this.tabs + this.printStatement(s) + ';' };
							return r_1823;
						};
					}
				} break;
				
				case 21: {
					return 'break'
				} break;
				
				case 20: {
					return 'continue'
				} break;
				
				case 1: {
					{
						const el_1824 = temp_1821[1];
						{
							if (el_1824.length == 1) {
								const temp_1825 = el_1824[0];
								switch (temp_1825&&temp_1825[0]) {
								case 1: {
									return this.printStatement(el_1824[0])
								} break;
								};
							};
							this.pushTab();
							let r_1826 = '{';
							for (const e of $toIterator(el_1824)) {
								const temp_1827 = e;
								switch (temp_1827&&temp_1827[0]) {
								case null: case undefined: {
									{
									}
								} break;
								
								case 0: {
									{
										const els_1828 = temp_1827[1];
										for (const s of $toIterator(els_1828)) if (s != null) { r_1826 += '\n' + this.tabs + this.printStatement(s) + ';' };
									}
								} break;
								
								default: 
								r_1826 += '\n' + this.tabs + this.printStatement(e) + ';'
								};
							};
							this.popTab();
							return r_1826 + '\n' + this.tabs + '}';
						};
					}
				} break;
				
				case 3: {
					{
						const e_1829 = temp_1821[1];
						const args_1830 = temp_1821[2];
						return 'new ' + this.printExpression(e_1829) + this.printCallArguments(args_1830);
					}
				} break;
				
				case 6: {
					{
						const name_1831 = temp_1821[1];
						const expr_1832 = temp_1821[2];
						return 'const ' + name_1831 + (expr_1832 == (null)? ('') : ' = ' + this.printExpression(expr_1832));
					}
				} break;
				
				case 5: {
					{
						const name_1833 = temp_1821[1];
						const expr_1834 = temp_1821[2];
						return 'let ' + name_1833 + (expr_1834 == (null)? ('') : ' = ' + this.printExpression(expr_1834));
					}
				} break;
				
				case 7: {
					{
						const name_1835 = temp_1821[1];
						const expr_1836 = temp_1821[2];
						const args_1837 = temp_1821[3];
						const defaults_1838 = temp_1821[4];
						return 'const ' + name_1835 + ' = ' + this.printFunctionArguments(args_1837, defaults_1838) + ' => ' + this.printBlock(expr_1836);
					}
				} break;
				
				case 8: {
					{
						const e_1839 = temp_1821[1];
						{
							if (e_1839 == null) { return 'return' };
							return 'return ' + this.printExpression(e_1839);
						};
					}
				} break;
				
				case 9: {
					{
						const econd_1840 = temp_1821[1];
						const eif_1841 = temp_1821[2];
						const eelse_1842 = temp_1821[3];
						{
							let r_1843 = 'if (' + this.printExpression(econd_1840) + ') ' + this.printBlock(eif_1841);
							if (eelse_1842 != null) { r_1843 += ' else ' + this.printStatement(eelse_1842) };
							return r_1843;
						};
					}
				} break;
				
				case 2: {
					{
						const e_1844 = temp_1821[1];
						const args_1845 = temp_1821[2];
						return this.printExpression(e_1844) + this.printCallArguments(args_1845);
					}
				} break;
				
				case 22: {
					{
						const args_1846 = temp_1821[1];
						return 'super' + this.printCallArguments(args_1846);
					}
				} break;
				
				case 10: {
					{
						const expr_1847 = temp_1821[1];
						const t_1848 = temp_1821[2];
						const v_1849 = temp_1821[3];
						const catches_1850 = temp_1821[4];
						const temp_1851 = temp_1821[5];
						{
							let r_1852 = 'try ';
							r_1852 += this.printBlock(expr_1847);
							r_1852 += (' catch (' + (temp_1851) + ') {\n') + this.tabs + '\t';
							this.pushTab();
							{
								let i_1853 = 0;
								let it_1854 = 0;
								let at_1855 = catches_1850.length;
								while (it_1854 < at_1855) {
									i_1853 = it_1854;
									it_1854++;
									{
										let typeof_1856 = 'T';
										{
											const temp_1857 = t_1848[i_1853];
											switch (temp_1857&&temp_1857[0]) {
											case 4: {
												{
													const type_1858 = temp_1857[1];
													typeof_1856 = type_1858.name;
												}
											} break;
											
											default: 
											throw '' + t_1848[i_1853]
											};
										};
										{
											const temp_1859 = typeof_1856;
											switch (temp_1859) {
											case 'Any': {
												r_1852 += 'if (true) { '
											} break;
											
											case 'String': {
												r_1852 += ('if (typeof(' + (temp_1851) + ') == \"string\") { ')
											} break;
											
											case 'Int': {
												r_1852 += ('if (typeof(' + (temp_1851) + ') == \"number\") { ')
											} break;
											
											case 'Float': {
												r_1852 += ('if (typeof(' + (temp_1851) + ') == \"number\") { ')
											} break;
											
											case 'Bool': {
												r_1852 += ('if (typeof(' + (temp_1851) + ') == \"boolean\") { ')
											} break;
											
											default: 
											r_1852 += ('if (' + (temp_1851) + ' instanceof ' + (typeof_1856) + ') { ')
											};
										};
										r_1852 += '\n' + this.tabs;
										r_1852 += ('const ' + (v_1849[i_1853]) + ' = ' + (temp_1851) + '');
										r_1852 += '\n' + this.tabs;
										r_1852 += this.printStatement(catches_1850[i_1853]);
										r_1852 += ' }';
										r_1852 += ' else';
										r_1852 += '\n' + this.tabs;
									};
								};
							};
							r_1852 += '\n' + this.tabs + ('throw ' + (temp_1851) + ';');
							this.popTab();
							return r_1852 + '\n' + this.tabs + '}';
						};
					}
				} break;
				
				case 12: {
					{
						const a_1860 = temp_1821[1];
						const v_1861 = temp_1821[2];
						return this.printExpression(a_1860) + ' = ' + this.printExpression(v_1861);
					}
				} break;
				
				case 11: {
					{
						const e_1862 = temp_1821[1];
						return 'throw ' + this.printExpression(e_1862);
					}
				} break;
				
				case 15: {
					{
						const name_1863 = temp_1821[1];
						const over_1864 = temp_1821[2];
						const by_1865 = temp_1821[3];
						{
							this.toIterator = true;
							return 'for (const ' + name_1863 + ' of $toIterator(' + this.printExpression(over_1864) + ')) ' + this.printStatement(by_1865);
						};
					}
				} break;
				
				case 17: {
					{
						const e_1866 = temp_1821[1];
						return this.printExpression(e_1866) + '++';
					}
				} break;
				
				case 18: {
					{
						const e_1867 = temp_1821[1];
						return this.printExpression(e_1867) + '--';
					}
				} break;
				
				case 16: {
					{
						const econd_1868 = temp_1821[1];
						const e_1869 = temp_1821[2];
						const pre_1870 = temp_1821[3];
						{
							if (pre_1870) { return 'while (' + this.printExpression(econd_1868) + ') ' + this.printStatement(e_1869) };
							return 'do {' + this.printStatement(e_1869) + '} while (' + this.printExpression(econd_1868) + ')';
						};
					}
				} break;
				
				case 13: {
					{
						const a_1871 = temp_1821[1];
						const op_1872 = temp_1821[2];
						const value_1873 = temp_1821[3];
						return this.printExpression(a_1871) + ' ' + Token.stringify(op_1872) + '= ' + this.printExpression(value_1873);
					}
				} break;
				
				case 14: {
					{
						const expr_1874 = temp_1821[1];
						const name_1875 = temp_1821[2];
						return this.printExpression(expr_1874) + '.' + name_1875;
					}
				} break;
				
				case 19: {
					{
						const expr_1876 = temp_1821[1];
						const cases_1877 = temp_1821[2];
						const statements = temp_1821[3];
						{
							let r_1878 = 'switch (' + this.printExpression(expr_1876) + ') {';
							{
								let i_1879 = 0;
								let it_1880 = 0;
								let at_1881 = cases_1877.length;
								while (it_1880 < at_1881) {
									i_1879 = it_1880;
									it_1880++;
									if (cases_1877[i_1879].length > 0) {
										r_1878 += '\n' + this.tabs;
										for (const cc of $toIterator(cases_1877[i_1879])) {
											const temp_1882 = cc;
											switch (temp_1882&&temp_1882[0]) {
											case 6: {
												r_1878 += 'case null: case undefined: '
											} break;
											
											default: 
											r_1878 += 'case ' + this.printExpression(cc) + ': '
											};
										};
										this.pushTab();
										r_1878 += '{\n' + this.tabs;
										r_1878 += this.printStatement(statements[i_1879]);
										this.popTab();
										r_1878 += '\n' + this.tabs + '} break;\n' + this.tabs;
									};
								};
							};
							{
								let i_1883 = 0;
								let it_1884 = 0;
								let at_1885 = cases_1877.length;
								while (it_1884 < at_1885) {
									i_1883 = it_1884;
									it_1884++;
									if (cases_1877[i_1883].length == 0) {
										r_1878 += '\n' + this.tabs + 'default: ';
										r_1878 += '\n' + this.tabs;
										r_1878 += this.printStatement(statements[i_1883]);
										r_1878 += '\n' + this.tabs;
									};
								};
							};
							return r_1878 + '}';
						};
					}
				} break;
				
				case null: case undefined: {
					console.error('Got null statement kind in JavaScript generator, probably unsupported feature was used, ignoring')
				} break;
				
				default: 
				console.error('Unknown statement kind:', ((() => {
					const result_1886 = s_1820;
					if (result_1886 != null) { return result_1886 };
					return [];
				})())[0])
				};
			};
			return '{/* undefined */}';
		};
		printCallArguments(args_1887) { return '(' + (() => {
			const result_1888 = [];
			const value_1889 = args_1887;
			for (const a of $toIterator(value_1889)) result_1888.push(this.printExpression(a));
			return result_1888;
		})().join(', ') + ')' };
		printFunctionArguments(args_1890, defaults_1891) { return '(' + (() => {
			const result_1892 = [];
			const value_1893 = args_1890.length;
			for (const a of $toIterator(value_1893)) result_1892.push(args_1890[a] + (((defaults_1891 != null && defaults_1891[a] != null))? (' = ' + this.printExpression(defaults_1891[a])) : ''));
			return result_1892;
		})().join(', ') + ')' };
		printExpression(e_1894) {
			{
				const temp_1895 = e_1894;
				switch (temp_1895&&temp_1895[0]) {
				case 6: {
					return 'null'
				} break;
				
				case 7: {
					return 'this'
				} break;
				
				case 5: {
					{
						const name_1896 = temp_1895[1];
						return name_1896;
					}
				} break;
				
				case 1: {
					{
						const v_1897 = temp_1895[1];
						return '' + v_1897;
					}
				} break;
				
				case 2: {
					{
						const v_1898 = temp_1895[1];
						return '' + v_1898;
					}
				} break;
				
				case 0: {
					{
						const s_1899 = temp_1895[1];
						{
							const s_1900 = s_1899.split('');
							const charsOut = [];
							while (s_1900.length > 0) {
								const temp_1901 = s_1900[0];
								switch (temp_1901) {
								case '\'': {
									{
										charsOut.push('\\');
										charsOut.push('\'');
										s_1900.shift();
									}
								} break;
								
								case '\n': {
									{
										charsOut.push('\\n');
										s_1900.shift();
									}
								} break;
								
								case '\r': {
									{
										charsOut.push('\\r');
										s_1900.shift();
									}
								} break;
								
								case '\\': {
									{
										s_1900.shift();
										if (s_1900[0] == '\'') {
											charsOut.push('\\\'');
											s_1900.shift();
										} else if (s_1900[0] == '"') {
											charsOut.push('\\"');
											s_1900.shift();
										} else if (s_1900[0] == '\\') {
											charsOut.push('\\\\');
											s_1900.shift();
										} else {
											charsOut.push('\\');
										};
									}
								} break;
								
								default: 
								{
									charsOut.push(s_1900[0]);
									s_1900.shift();
								}
								};
							};
							return '\'' + charsOut.join('') + '\'';
						};
					}
				} break;
				
				case 3: {
					return 'true'
				} break;
				
				case 4: {
					return 'false'
				} break;
				
				case 8: {
					{
						const expr_1902 = temp_1895[1];
						const name_1903 = temp_1895[2];
						return this.printExpression(expr_1902) + '.' + name_1903;
					}
				} break;
				
				case 9: {
					{
						const e_1904 = temp_1895[1];
						const args_1905 = temp_1895[2];
						return this.printExpression(e_1904) + this.printCallArguments(args_1905);
					}
				} break;
				
				case 12: {
					{
						const name_1906 = temp_1895[1];
						const expr_1907 = temp_1895[2];
						const args_1908 = temp_1895[3];
						const defaults_1909 = temp_1895[4];
						{
							if (name_1906 == null) { return this.printFunctionArguments(args_1908, defaults_1909) + ' => ' + this.printBlock(expr_1907) };
							return '((() => { const ' + name_1906 + ' = ' + this.printFunctionArguments(args_1908, defaults_1909) + ' => ' + this.printBlock(expr_1907) + '; return ' + name_1906 + ' })())';
						};
					}
				} break;
				
				case 13: {
					{
						const expr_1910 = temp_1895[1];
						const args_1911 = temp_1895[2];
						const defaults_1912 = temp_1895[3];
						return this.printFunctionArguments(args_1911, defaults_1912) + ' => (' + this.printExpression(expr_1910) + ')';
					}
				} break;
				
				case 10: {
					{
						const e_1913 = temp_1895[1];
						const args_1914 = temp_1895[2];
						return 'new ' + this.printExpression(e_1913) + this.printCallArguments(args_1914);
					}
				} break;
				
				case 16: {
					{
						const el_1915 = temp_1895[1];
						return '[' + (() => {
							const result_1916 = [];
							const value_1917 = el_1915;
							for (const a of $toIterator(value_1917)) result_1916.push(this.printExpression(a));
							return result_1916;
						})().join(', ') + ']';
					}
				} break;
				
				case 18: {
					{
						const op_1918 = temp_1895[1];
						const postfix_1919 = temp_1895[2];
						const e_1920 = temp_1895[3];
						{
							if (postfix_1919) { return '(' + this.printExpression(e_1920) + Token.stringify(op_1918) + ')' };
							return '(' + Token.stringify(op_1918) + this.printExpression(e_1920) + ')';
						};
					}
				} break;
				
				case 19: {
					{
						const nullable_1921 = temp_1895[1];
						const othewise = temp_1895[2];
						return '((' + this.printExpression(nullable_1921) + ') || (' + this.printExpression(othewise) + '))';
					}
				} break;
				
				case 14: {
					{
						const e_1922 = temp_1895[1];
						return '(' + this.printExpression(e_1922) + ')';
					}
				} break;
				
				case 11: {
					{
						const a_1923 = temp_1895[1];
						const op_1924 = temp_1895[2];
						const b_1925 = temp_1895[3];
						return this.printExpression(a_1923) + ' ' + Token.stringify(op_1924) + ' ' + this.printExpression(b_1925);
					}
				} break;
				
				case 21: {
					{
						const expr_1926 = temp_1895[1];
						const index_1927 = temp_1895[2];
						return this.printExpression(expr_1926) + '[' + this.printExpression(index_1927) + ']';
					}
				} break;
				
				case 20: {
					{
						const econd_1928 = temp_1895[1];
						const eif_1929 = temp_1895[2];
						const eelse_1930 = temp_1895[3];
						{
							let r_1931 = '';
							try {
								r_1931 += '(' + this.printExpression(econd_1928) + ')?';
								r_1931 += ' (' + this.printExpression(eif_1929) + ')';
								r_1931 += ' : ' + this.printExpression(eelse_1930);
								return r_1931;
							} catch (temp_1932) {
								if (true) { 
								const error = temp_1932
								{
									console.log('If =>', e_1894, error);
									return r_1931 + '<!-- If => error -->';
								} } else
								
								throw temp_1932;
							};
						};
					}
				} break;
				
				case 26: {
					{
						const expr_1933 = temp_1895[1];
						{
							const e_1934 = this.printExpression(expr_1933);
							return e_1934 + '&&' + e_1934 + '[0]';
						};
					}
				} break;
				
				case 15: {
					{
						const names_1935 = temp_1895[1];
						const el_1936 = temp_1895[2];
						return '{' + (() => {
							const result_1937 = [];
							const value_1938 = el_1936.length;
							for (const i of $toIterator(value_1938)) result_1937.push(((names_1935[i]) + ':' + this.printExpression(el_1936[i])));
							return result_1937;
						})().join(', ') + '}';
					}
				} break;
				
				case 17: {
					{
						const keys_1939 = temp_1895[1];
						const values_1940 = temp_1895[2];
						{
							if (keys_1939.length == 0) { return 'new Map()' };
							return 'new Map([' + (() => {
								const result_1941 = [];
								const value_1942 = keys_1939.length;
								for (const i of $toIterator(value_1942)) result_1941.push('[' + this.printExpression(keys_1939[i]) + ', ' + this.printExpression(values_1940[i]) + ']');
								return result_1941;
							})().join(', ') + '])';
						};
					}
				} break;
				
				case 24: {
					{
						const a_1943 = temp_1895[1];
						const op_1944 = temp_1895[2];
						const value_1945 = temp_1895[3];
						return this.printExpression(a_1943) + ' ' + Token.stringify(op_1944) + '= ' + this.printExpression(value_1945);
					}
				} break;
				
				case 25: {
					{
						const kind_1946 = temp_1895[1];
						const args_1947 = temp_1895[2];
						const s_1948 = temp_1895[3];
						{
							const temp_1949 = kind_1946;
							switch (temp_1949) {
							case 0: {
								return '((' + this.printExpression(args_1947[0]) + ') ' + s_1948 + ' (' + this.printExpression(args_1947[1]) + '))'
							} break;
							
							case 1: {
								return s_1948 + this.printCallArguments(args_1947)
							} break;
							
							case 2: {
								return '(' + s_1948 + '(' + this.printExpression(args_1947[0]) + '))'
							} break;
							
							case 3: {
								return '((' + this.printExpression(args_1947[1]) + ')' + s_1948 + ')'
							} break;
							};
						};
					}
				} break;
				
				case 22: {
					{
						const e_1950 = temp_1895[1];
						const t_1951 = temp_1895[2];
						return '(' + this.printExpression(e_1950) + ')';
					}
				} break;
				
				case 23: {
					{
						const e_1952 = temp_1895[1];
						const t_1953 = temp_1895[2];
						return '((' + this.printExpression(e_1952) + ') instanceof ' + Type.stringify(t_1953) + ')';
					}
				} break;
				
				case 27: {
					{
						const type_1954 = temp_1895[1];
						const tagName = temp_1895[2];
						const tag_1955 = temp_1895[3];
						const args_1956 = temp_1895[4];
						{
							if (args_1956.length == 0) { return ('/*' + (tagName) + '*/[') + this.printExpression(tag_1955) + ']' };
							return (('/*' + (tagName) + '*/[') + this.printExpression(tag_1955) + ',' + (() => {
								const result_1957 = [];
								const value_1958 = args_1956;
								for (const a of $toIterator(value_1958)) result_1957.push(this.printExpression(a));
								return result_1957;
							})().join(',') + ']');
						};
					}
				} break;
				
				case 28: {
					{
						const expr_1959 = temp_1895[1];
						const index_1960 = temp_1895[2];
						return this.printExpression(expr_1959) + '[' + (1 + index_1960) + ']';
					}
				} break;
				
				case null: case undefined: {
					console.error('Got null expression kind in JavaScript generator, probably unsupported feature was used, ignoring')
				} break;
				
				default: 
				console.error('Unknown expression kind:', ((() => {
					const result_1961 = e_1894;
					if (result_1961 != null) { return result_1961 };
					return [];
				})())[0], e_1894)
				};
			};
			return '{/* undefined */}';
		};
	}
	GenJs.spawn = () => { return new GenJs() };
	var GenCxx = class {
		constructor() { 
			this.globalAccessor = ''
			this.declarationsOfFunctions = []
			this.declarationsOfOpaqueTypes = []
			this.declarationsOfFullTypes = []
			this.declarationsOfStringsMap = new Map()
			this.declarationsOfStrings = []
			this.forwardFunctions = []
			this.typedefFunctions = []
			this.globalFunctions = []
			this.types = []
			this.tabs = ''
			this.reserved = []
			this.currentReturnType = null
			this.last = ''
			this.metaBlock = []
			this.tempId = 0
			this.thisArgument = null
			this.customThis = null
		{
		} };
		perform(normalizer_1962) {
			this.project = normalizer_1962;
			return this.stringify();
		};
		stringify() {
			const header = [('// Generated by Hexa ' + (version) + '')];
			if (this.project.package.addLicenseNoticeToOutput) {
				header.push(('// ' + (this.project.package.name) + ''));
				header.push(('// LICENSE ' + (this.project.package.license) + ''));
			} else {
				header.push('// The generated code is subject to the original license');
			};
			header.push(Fs.readFileSync(__dirname + '/library/cxx/hexa.cpp').toString('utf8').split('\r\n').join('\n'));
			header.push('#ifdef __cplusplus');
			header.push('extern "C" {');
			header.push('#endif');
			const out_1963 = [];
			const forward = [];
			this.registerString('');
			this.declarationsOfStringsMap.set('', 0);
			this.registerString('null');
			this.declarationsOfStringsMap.set('null', 1);
			for (const e of $toIterator(this.project.enumsSimple)) {
				forward.push('struct ' + e.name + '_;');
				if (e.staticVars.length + e.staticMethods.length == 0) { continue };
				this.types.push('struct ' + e.name + '_ {\n\t');
				for (const v of $toIterator(e.staticVars)) {
					const temp_1964 = v;
					switch (temp_1964&&temp_1964[0]) {
					case 5: {
						{
							const name_1965 = temp_1964[1];
							const expr_1966 = temp_1964[2];
							const type_1967 = temp_1964[3];
							out_1963.push(('' + (this.stringifyType(type_1967)) + ' ') + e.name + '_$' + name_1965 + '_;\n');
						}
					} break;
					
					case 6: {
						{
							const name_1968 = temp_1964[1];
							const expr_1969 = temp_1964[2];
							const type_1970 = temp_1964[3];
							out_1963.push(('' + (this.stringifyType(type_1970)) + ' ') + e.name + '_$' + name_1968 + '_;\n');
						}
					} break;
					};
				};
				this.types.push('\n};\n');
				for (const v of $toIterator(e.staticMethods)) {
					const temp_1971 = v;
					switch (temp_1971&&temp_1971[0]) {
					case 7: {
						{
							const name_1972 = temp_1971[1];
							const expr_1973 = temp_1971[2];
							const args_1974 = temp_1971[3];
							const defaults_1975 = temp_1971[4];
							const funcType_1976 = temp_1971[5];
							{
								this.forwardFunctions.push(this.printFunctionReturnType(funcType_1976));
								this.forwardFunctions.push(' ' + e.name + '_$' + name_1972 + '_');
								this.forwardFunctions.push(this.printFunctionArguments(args_1974, funcType_1976));
								this.forwardFunctions.push(';\n');
								out_1963.push(this.printFunctionReturnType(funcType_1976));
								out_1963.push(' ' + e.name + '_$' + name_1972 + '_');
								out_1963.push(this.printFunctionArguments(args_1974, funcType_1976));
								const _currentReturnType = this.currentReturnType;
								this.currentReturnType = this.getFunctionReturnType(funcType_1976);
								out_1963.push(' ' + this.printBlock(expr_1973) + ';\n');
								this.currentReturnType = _currentReturnType;
							};
						}
					} break;
					};
				};
			};
			for (const e of $toIterator(this.project.enumsComplex)) {
				forward.push('struct ' + e.name + '_;');
				this.types.push('struct ' + e.name + '_ : Unknown_ {\n\t');
				this.types.push('\n\tAny_** enum_;');
				this.types.push('\n\tuint16_t is_;');
				this.types.push('\n\tuint8_t length_;');
				let i_1977 = 0;
				for (const name of $toIterator(e.names)) {
					if (e.constructors[i_1977] != null) {
						out_1963.push(e.name + '_* ' + e.name + '_$' + name + '_(');
						out_1963.push((() => {
							const result_1978 = [];
							const value_1979 = e.constructors[i_1977].length;
							for (const c of $toIterator(value_1979)) result_1978.push(this.stringifyType(e.constructorsTypes[i_1977][c]) + ' ' + e.constructors[i_1977][c] + '_');
							return result_1978;
						})().join(', '));
						out_1963.push(') {\n');
						out_1963.push('\t' + e.name + '_* _ = (struct ' + e.name + '_*)(malloc(sizeof(struct ' + e.name + '_)));\n');
						out_1963.push(('\t_->length_ = ' + (e.constructors[i_1977].length) + ';\n'));
						out_1963.push(('\t_->enum_ = (struct Any_**)(malloc(sizeof(struct Any_*) * ' + (e.constructors[i_1977].length) + '));\n'));
						out_1963.push(('\t_->is_ = ' + (i_1977) + ';\n'));
						{
							let c_1980 = 0;
							let it_1981 = 0;
							let at_1982 = e.constructors[i_1977].length;
							while (it_1981 < at_1982) {
								c_1980 = it_1981;
								it_1981++;
								{
									out_1963.push(('\t_->enum_[' + (c_1980) + '] = '));
									out_1963.push(this.printToAnyConverter(e.constructors[i_1977][c_1980] + '_', e.constructorsTypes[i_1977][c_1980]));
									out_1963.push(';\n');
								};
							};
						};
						out_1963.push('\treturn _;\n');
						out_1963.push('};\n');
					} else {
						out_1963.push(e.name + '_* ' + e.name + '_$' + name + '_() {\n');
						out_1963.push('\t' + e.name + '_* _ = (struct ' + e.name + '_*)(malloc(sizeof(struct ' + e.name + '_)));\n');
						out_1963.push('\t_->length_ = 0;\n');
						out_1963.push(('\t_->is_ = ' + (i_1977) + ';\n'));
						out_1963.push('\treturn _;\n');
						out_1963.push('};\n');
					};
					i_1977++;
				};
				for (const v of $toIterator(e.staticVars)) {
					const temp_1983 = v;
					switch (temp_1983&&temp_1983[0]) {
					case 5: {
						{
							const name_1984 = temp_1983[1];
							const expr_1985 = temp_1983[2];
							const type_1986 = temp_1983[3];
							out_1963.push(('' + (this.stringifyType(type_1986)) + ' ') + e.name + '_$' + name_1984 + '_;\n');
						}
					} break;
					
					case 6: {
						{
							const name_1987 = temp_1983[1];
							const expr_1988 = temp_1983[2];
							const type_1989 = temp_1983[3];
							out_1963.push(('' + (this.stringifyType(type_1989)) + ' ') + e.name + '_$' + name_1987 + '_;\n');
						}
					} break;
					};
				};
				for (const v of $toIterator(e.staticMethods)) {
					const temp_1990 = v;
					switch (temp_1990&&temp_1990[0]) {
					case 7: {
						{
							const name_1991 = temp_1990[1];
							const expr_1992 = temp_1990[2];
							const args_1993 = temp_1990[3];
							const defaults_1994 = temp_1990[4];
							const funcType_1995 = temp_1990[5];
							{
								this.forwardFunctions.push(this.printFunctionReturnType(funcType_1995));
								this.forwardFunctions.push(' ' + e.name + '_$' + name_1991 + '_');
								this.forwardFunctions.push(this.printFunctionArguments(args_1993, funcType_1995));
								this.forwardFunctions.push(';\n');
								out_1963.push(this.printFunctionReturnType(funcType_1995));
								out_1963.push(' ' + e.name + '_$' + name_1991 + '_');
								out_1963.push(this.printFunctionArguments(args_1993, funcType_1995));
								const _currentReturnType_1996 = this.currentReturnType;
								this.currentReturnType = this.getFunctionReturnType(funcType_1995);
								out_1963.push(' ' + this.printBlock(expr_1992) + ';\n');
								this.currentReturnType = _currentReturnType_1996;
							};
						}
					} break;
					};
				};
				this.types.push('\n};\n');
			};
			for (const c of $toIterator(this.project.classes)) {
				if (c.name == 'Any') { continue };
				if (c.name == 'Bool') { continue };
				forward.push('struct ' + c.name + '_;');
				forward.push('struct ' + c.name + '_$vtable_;');
				this.types.push('struct ' + c.name + '_ {\n\t');
				const vtable = ['struct ' + c.name + '_$vtable_ {\n\t'];
				this.types.push('\n\tconst struct ' + c.name + '_$vtable_ const * const $vtable_;');
				const vtableValue = ['const struct ' + c.name + '_$vtable_ const ' + c.name + '_$vtable_$ = {\n\t'];
				const vtableBind = [];
				for (const v of $toIterator(c.vars)) {
					const temp_1997 = v;
					switch (temp_1997&&temp_1997[0]) {
					case 5: {
						{
							const name_1998 = temp_1997[1];
							const expr_1999 = temp_1997[2];
							const type_2000 = temp_1997[3];
							this.types.push(('\n\t' + (this.stringifyType(type_2000)) + ' ') + name_1998 + '_;');
						}
					} break;
					
					case 6: {
						{
							const name_2001 = temp_1997[1];
							const expr_2002 = temp_1997[2];
							const type_2003 = temp_1997[3];
							this.types.push(('\n\t' + (this.stringifyType(type_2003)) + ' ') + name_2001 + '_;');
						}
					} break;
					};
				};
				for (const v of $toIterator(c.methods)) {
					const temp_2004 = v;
					switch (temp_2004&&temp_2004[0]) {
					case 7: {
						{
							const name_2005 = temp_2004[1];
							const expr_2006 = temp_2004[2];
							const args_2007 = temp_2004[3];
							const defaults_2008 = temp_2004[4];
							const funcType_2009 = temp_2004[5];
							if (name_2005 == null || name_2005 == 'new') {
								this.forwardFunctions.push('struct ' + c.name + '_* ' + c.name + '_$new_');
								this.forwardFunctions.push(this.printFunctionArguments(args_2007, funcType_2009));
								this.forwardFunctions.push(';\n');
								out_1963.push('void ' + c.name + '_$this_');
								this.thisArgument = 'struct ' + c.name + '_* $this';
								out_1963.push(this.printFunctionArguments(args_2007, funcType_2009));
								this.thisArgument = null;
								out_1963.push(' {\n');
								this.customThis = '$this';
								for (const v of $toIterator(c.vars)) {
									const temp_2010 = v;
									switch (temp_2010&&temp_2010[0]) {
									case 5: {
										{
											const name_2011 = temp_2010[1];
											const expr_2012 = temp_2010[2];
											const type_2013 = temp_2010[3];
											if (expr_2012 != null) { out_1963.push('\t$this->' + name_2011 + '_ = ' + this.printExpression(expr_2012) + ';\n') };
										}
									} break;
									
									case 6: {
										{
											const name_2014 = temp_2010[1];
											const expr_2015 = temp_2010[2];
											const type_2016 = temp_2010[3];
											out_1963.push('\t$this->' + name_2014 + '_ = ' + this.printExpression(expr_2015) + ';\n');
										}
									} break;
									};
								};
								this.pushTab();
								out_1963.push('\t' + this.printBlock(expr_2006) + ';\n');
								this.popTab();
								this.customThis = null;
								out_1963.push('};\n');
								out_1963.push('struct ' + c.name + '_* ' + c.name + '_$new_');
								out_1963.push(this.printFunctionArguments(args_2007, funcType_2009));
								out_1963.push(' {\n');
								out_1963.push('\tvoid** $_ = (void**)(malloc(sizeof(struct ' + c.name + '_)));\n');
								out_1963.push('\t$_[0] = (void *)&' + c.name + '_$vtable_$;\n');
								out_1963.push('\tstruct ' + c.name + '_* _ = (struct ' + c.name + '_*)($_);\n');
								out_1963.push('\t' + c.name + '_$this_(');
								const arg_2017 = (() => {
									const result_2018 = [];
									const value_2019 = args_2007;
									for (const a of $toIterator(value_2019)) result_2018.push(a + '_');
									return result_2018;
								})();
								arg_2017.unshift('_');
								out_1963.push(arg_2017.join(', '));
								out_1963.push(');\n');
								out_1963.push('\treturn _;\n');
								out_1963.push('};\n');
							} else {
								if (false) {
									this.types.push('\n\tvirtual ');
									this.types.push(this.printFunctionReturnType(funcType_2009));
									this.types.push(' ' + name_2005 + '_');
									this.types.push(this.printFunctionArguments(args_2007, funcType_2009));
									this.types.push(';');
								};
								this.thisArgument = 'struct ' + c.name + '_* $this';
								vtable.push('\n\t');
								vtable.push(this.printFunctionReturnType(funcType_2009));
								vtable.push(' (*const ' + name_2005 + '_) ');
								vtable.push(this.printFunctionArguments(args_2007, funcType_2009));
								vtable.push(';');
								this.forwardFunctions.push(this.printFunctionReturnType(funcType_2009));
								this.forwardFunctions.push(' ' + c.name + '_$' + name_2005 + '_');
								this.forwardFunctions.push(this.printFunctionArguments(args_2007, funcType_2009));
								this.forwardFunctions.push(';\n');
								const vbind = '&' + c.name + '_$' + name_2005 + '_';
								vtableBind.push(vbind);
								out_1963.push(this.printFunctionReturnType(funcType_2009));
								out_1963.push(' ' + c.name + '_$' + name_2005 + '_');
								out_1963.push(this.printFunctionArguments(args_2007, funcType_2009));
								const _currentReturnType_2020 = this.currentReturnType;
								this.currentReturnType = this.getFunctionReturnType(funcType_2009);
								this.customThis = '$this';
								this.thisArgument = null;
								out_1963.push(' ' + this.printBlock(expr_2006) + ';\n');
								this.customThis = null;
								this.currentReturnType = _currentReturnType_2020;
								if (false) {
									out_1963.push(this.printFunctionReturnType(funcType_2009));
									out_1963.push(' ' + c.name + '_::' + name_2005 + '_');
									out_1963.push(this.printFunctionArguments(args_2007, funcType_2009));
									const _currentReturnType_2021 = this.currentReturnType;
									this.currentReturnType = this.getFunctionReturnType(funcType_2009);
									const arg_2022 = (() => {
										const result_2023 = [];
										const value_2024 = args_2007;
										for (const a of $toIterator(value_2024)) result_2023.push(a + '_');
										return result_2023;
									})();
									arg_2022.unshift('this');
									out_1963.push(' { return this->$vtable_->' + name_2005 + '_(' + arg_2022.join(', ') + '); };\n');
								};
								this.currentReturnType = _currentReturnType_2020;
							};
						}
					} break;
					};
				};
				for (const v of $toIterator(c.staticVars)) {
					const temp_2025 = v;
					switch (temp_2025&&temp_2025[0]) {
					case 5: {
						{
							const name_2026 = temp_2025[1];
							const expr_2027 = temp_2025[2];
							const type_2028 = temp_2025[3];
							out_1963.push(('' + (this.stringifyType(type_2028)) + ' ') + c.name + '_$' + name_2026 + '_;\n');
						}
					} break;
					
					case 6: {
						{
							const name_2029 = temp_2025[1];
							const expr_2030 = temp_2025[2];
							const type_2031 = temp_2025[3];
							out_1963.push(('' + (this.stringifyType(type_2031)) + ' ') + c.name + '_$' + name_2029 + '_;\n');
						}
					} break;
					};
				};
				this.types.push('\n};\n');
				vtable.push('\n};\n');
				vtableValue.push(vtableBind.join(',\n\t'));
				vtable.push(vtableValue.join('') + '\n};\n');
				this.types.unshift(vtable.join(''));
				for (const v of $toIterator(c.staticMethods)) {
					const temp_2032 = v;
					switch (temp_2032&&temp_2032[0]) {
					case 7: {
						{
							const name_2033 = temp_2032[1];
							const expr_2034 = temp_2032[2];
							const args_2035 = temp_2032[3];
							const defaults_2036 = temp_2032[4];
							const funcType_2037 = temp_2032[5];
							{
								out_1963.push(this.printFunctionReturnType(funcType_2037));
								out_1963.push(' ' + c.name + '_$' + name_2033 + '_');
								out_1963.push(this.printFunctionArguments(args_2035, funcType_2037));
								const _currentReturnType_2038 = this.currentReturnType;
								this.currentReturnType = this.getFunctionReturnType(funcType_2037);
								out_1963.push(' ' + this.printBlock(expr_2034) + ';\n');
								this.currentReturnType = _currentReturnType_2038;
							};
						}
					} break;
					};
				};
			};
			for (const g of $toIterator(this.project.globalFuncs)) {
				const temp_2039 = g;
				switch (temp_2039&&temp_2039[0]) {
				case 7: {
					{
						const name_2040 = temp_2039[1];
						const expr_2041 = temp_2039[2];
						const args_2042 = temp_2039[3];
						const defaults_2043 = temp_2039[4];
						const funcType_2044 = temp_2039[5];
						{
							this.types.push(this.printFunctionReturnType(funcType_2044));
							this.types.push(' ' + name_2040 + '_');
							this.types.push(this.printFunctionArguments(args_2042, funcType_2044));
							this.types.push(';\n');
							out_1963.push(this.printFunctionReturnType(funcType_2044));
							out_1963.push(' ' + name_2040 + '_');
							out_1963.push(this.printFunctionArguments(args_2042, funcType_2044));
							const _currentReturnType_2045 = this.currentReturnType;
							this.currentReturnType = this.getFunctionReturnType(funcType_2044);
							out_1963.push(' ' + this.printBlock(expr_2041) + ';\n');
							this.currentReturnType = _currentReturnType_2045;
						};
					}
				} break;
				};
			};
			out_1963.push('int main(int argc, char **argv) {\n');
			out_1963.push('\t%%%HEXA_STRINGS@@@\n');
			this.pushTab();
			for (const e of $toIterator(this.project.enumsSimple)) {
				for (const v of $toIterator(e.staticVars)) {
					const temp_2046 = v;
					switch (temp_2046&&temp_2046[0]) {
					case 5: {
						{
							const name_2047 = temp_2046[1];
							const expr_2048 = temp_2046[2];
							const type_2049 = temp_2046[3];
							if (expr_2048 != null) { out_1963.push('\t' + e.name + '_$' + name_2047 + '_ = ' + this.printExpression(expr_2048) + ';\n') };
						}
					} break;
					
					case 6: {
						{
							const name_2050 = temp_2046[1];
							const expr_2051 = temp_2046[2];
							const type_2052 = temp_2046[3];
							if (expr_2051 != null) { out_1963.push('\t' + e.name + '_$' + name_2050 + '_ = ' + this.printExpression(expr_2051) + ';\n') };
						}
					} break;
					};
				};
			};
			for (const e of $toIterator(this.project.enumsComplex)) {
				for (const v of $toIterator(e.staticVars)) {
					const temp_2053 = v;
					switch (temp_2053&&temp_2053[0]) {
					case 5: {
						{
							const name_2054 = temp_2053[1];
							const expr_2055 = temp_2053[2];
							const type_2056 = temp_2053[3];
							if (expr_2055 != null) { out_1963.push('\t' + e.name + '_$' + name_2054 + '_ = ' + this.printExpression(expr_2055) + ';\n') };
						}
					} break;
					
					case 6: {
						{
							const name_2057 = temp_2053[1];
							const expr_2058 = temp_2053[2];
							const type_2059 = temp_2053[3];
							if (expr_2058 != null) { out_1963.push('\t' + e.name + '_$' + name_2057 + '_ = ' + this.printExpression(expr_2058) + ';\n') };
						}
					} break;
					};
				};
			};
			for (const e of $toIterator(this.project.classes)) {
				for (const v of $toIterator(e.staticVars)) {
					const temp_2060 = v;
					switch (temp_2060&&temp_2060[0]) {
					case 5: {
						{
							const name_2061 = temp_2060[1];
							const expr_2062 = temp_2060[2];
							const type_2063 = temp_2060[3];
							if (expr_2062 != null) { out_1963.push('\t' + e.name + '_$' + name_2061 + '_ = ' + this.printExpression(expr_2062) + ';\n') };
						}
					} break;
					
					case 6: {
						{
							const name_2064 = temp_2060[1];
							const expr_2065 = temp_2060[2];
							const type_2066 = temp_2060[3];
							if (expr_2065 != null) { out_1963.push('\t' + e.name + '_$' + name_2064 + '_ = ' + this.printExpression(expr_2065) + ';\n') };
						}
					} break;
					};
				};
			};
			for (const g of $toIterator(this.project.globalVars)) {
				const temp_2067 = g;
				switch (temp_2067&&temp_2067[0]) {
				case 5: {
					{
						const name_2068 = temp_2067[1];
						const expr_2069 = temp_2067[2];
						const type_2070 = temp_2067[3];
						{
							this.types.push(this.stringifyType(type_2070));
							this.types.push(' ' + name_2068 + '_;\n');
							if (expr_2069 != null) { out_1963.push('\t' + name_2068 + '_ = ' + this.printExpression(expr_2069) + ';\n') };
						};
					}
				} break;
				
				case 6: {
					{
						const name_2071 = temp_2067[1];
						const expr_2072 = temp_2067[2];
						const type_2073 = temp_2067[3];
						{
							this.types.push(this.stringifyType(type_2073));
							this.types.push(' ' + name_2071 + '_;\n');
							if (expr_2072 != null) { out_1963.push('\t' + name_2071 + '_ = ' + this.printExpression(expr_2072) + ';\n') };
						};
					}
				} break;
				};
			};
			const init_2074 = this.printStatement(this.project.init[0]);
			const strings = ['String_Strings = (struct String_**)malloc(HEXA_STRINGS * sizeof(struct String_*));\n'];
			{
				let id_2075 = 0;
				let it_2076 = 0;
				let at_2077 = this.declarationsOfStrings.length;
				while (it_2076 < at_2077) {
					id_2075 = it_2076;
					it_2076++;
					{
						strings.push(('\tString_Strings[' + (id_2075) + '] = String_$fromUTF16z_(L\"' + (this.declarationsOfStrings[id_2075]) + '\");\n'));
					};
				};
			};
			out_1963.push('\t');
			out_1963.push(init_2074);
			this.popTab();
			out_1963.push('\treturn 0;\n}\n');
			out_1963.push('#ifdef __cplusplus\n');
			out_1963.push('}\n');
			out_1963.push('#endif\n');
			forward.push(('#define HEXA_STRINGS ' + (this.declarationsOfStrings.length) + ''));
			return (header.join('\n') + '\n// Forward\n' + forward.join('\n') + '\n// Typedef functions\n' + this.typedefFunctions.join('') + '\n// Forward functions\n' + this.forwardFunctions.join('') + '\n// Types\n' + this.types.join('') + '\n// Global functions\n' + this.globalFunctions.join('') + '\n// Statements\n' + out_1963.join('').split('%%%HEXA_STRINGS@@@').join(strings.join(''))).split('\n').join('\r\n');
			let out_2078 = '';
			for (const e of $toIterator(this.project.enumsSimple)) {
				this.declarationsOfOpaqueTypes.push('typedef uint16_t _x' + e.name);
				for (const v of $toIterator(e.staticVars)) {
					const temp_2079 = v;
					switch (temp_2079&&temp_2079[0]) {
					case 5: {
						{
							const name_2080 = temp_2079[1];
							const expr_2081 = temp_2079[2];
							const type_2082 = temp_2079[3];
							{
								out_2078 += '\n' + this.stringifyType(type_2082) + ' _x' + e.name + '_' + name_2080;
								if (expr_2081 != null) { out_2078 += ' = ' + this.printExpression(expr_2081) + ';' };
							};
						}
					} break;
					
					case 6: {
						{
							const name_2083 = temp_2079[1];
							const expr_2084 = temp_2079[2];
							const type_2085 = temp_2079[3];
							{
								out_2078 += '\n' + this.stringifyType(type_2085) + ' _x' + e.name + '_' + name_2083;
								out_2078 += ' = ' + this.printExpression(expr_2084) + ';';
							};
						}
					} break;
					};
				};
				for (const v of $toIterator(e.staticMethods)) {
					const temp_2086 = v;
					switch (temp_2086&&temp_2086[0]) {};
				};
			};
			for (const c of $toIterator(this.project.classes)) {
				if (c.external) {
					if (c.jsRequire != null) {
						out_2078 += '\n ' + '/*var ' + c.name + ' = require("' + c.jsRequire + '")*/';
						continue;
					};
					header.push('typedef ' + ((() => {
						const result_2087 = c.jsNative;
						if (result_2087 != null) { return result_2087 };
						return c.name;
					})()) + ' _x' + c.name + ';');
					continue;
				};
				const renamed_2088 = '_x' + c.name;
				const t_2089 = ['struct ', renamed_2088, ' {'];
				this.declarationsOfOpaqueTypes.push(('typedef struct ' + (renamed_2088) + '* ' + (renamed_2088) + ''));
				t_2089.push('\n _xclass _xclass;');
				for (const v of $toIterator(c.vars)) {
					const temp_2090 = v;
					switch (temp_2090&&temp_2090[0]) {
					case 5: {
						{
							const name_2091 = temp_2090[1];
							const expr_2092 = temp_2090[2];
							const type_2093 = temp_2090[3];
							t_2089.push('\n ' + this.stringifyType(type_2093) + ' _x' + name_2091 + ';');
						}
					} break;
					
					case 6: {
						{
							const name_2094 = temp_2090[1];
							const expr_2095 = temp_2090[2];
							const type_2096 = temp_2090[3];
							t_2089.push('\n ' + this.stringifyType(type_2096) + ' _x' + name_2094 + ';');
						}
					} break;
					};
				};
				for (const v of $toIterator(c.methods)) {
					const temp_2097 = v;
					switch (temp_2097&&temp_2097[0]) {
					case 7: {
						{
							const name_2098 = temp_2097[1];
							const expr_2099 = temp_2097[2];
							const args_2100 = temp_2097[3];
							const defaults_2101 = temp_2097[4];
							{
								const types_2102 = null;
								const returns_2103 = null;
								let declaration = this.printType(null) + ' ';
								const constructor = (name_2098 == null || name_2098 == 'new');
								if (constructor) { declaration = renamed_2088 + ' ' };
								declaration += renamed_2088 + '_' + name_2098;
								if (constructor) { if (args_2100.length > 0) { declaration += '(void* _x' + args_2100.join(', void* _x') + ')' } else declaration += '()' } else {
									if (args_2100.length > 0) { declaration += ('(' + (renamed_2088) + ' _xthis, void* _x') + args_2100.join(', void* _x') + ')' } else declaration += ('(' + (renamed_2088) + ' _xthis)');
								};
								this.declarationsOfFunctions.push(declaration);
								out_2078 += '\n' + declaration;
								out_2078 += ' { ';
								if (constructor) {
									out_2078 += ('\n ' + (renamed_2088) + ' _xthis = (' + (renamed_2088) + ')malloc(sizeof(struct ' + (renamed_2088) + '));');
									for (const v of $toIterator(c.vars)) {
										const temp_2104 = v;
										switch (temp_2104&&temp_2104[0]) {
										case 5: {
											{
												const name_2105 = temp_2104[1];
												const expr_2106 = temp_2104[2];
												const type_2107 = temp_2104[3];
												if (expr_2106 != null) { out_2078 += '\n _xthis->_x' + name_2105 + ' = ' + this.printExpression(expr_2106) + ';' };
											}
										} break;
										
										case 6: {
											{
												const name_2108 = temp_2104[1];
												const expr_2109 = temp_2104[2];
												const type_2110 = temp_2104[3];
												out_2078 += '\n _xthis->_x' + name_2108 + ' = ' + this.printExpression(expr_2109) + ';';
											}
										} break;
										};
									};
									out_2078 += '\n ';
									out_2078 += this.printStatement(expr_2099) + '\n return _xthis;\n};';
								} else out_2078 += this.printStatement(expr_2099) + '\n};';
							};
						}
					} break;
					};
				};
				t_2089.push('\n}');
				this.declarationsOfFullTypes.push(t_2089.join(''));
				for (const v of $toIterator(c.staticVars)) {
					const temp_2111 = v;
					switch (temp_2111&&temp_2111[0]) {
					case 5: {
						{
							const name_2112 = temp_2111[1];
							const expr_2113 = temp_2111[2];
							const type_2114 = temp_2111[3];
							{
								out_2078 += '\n ' + this.stringifyType(type_2114) + ' ' + renamed_2088 + '_' + name_2112;
								out_2078 += ';';
							};
						}
					} break;
					};
				};
			};
		};
		pushTab() { this.tabs += '\t' };
		popTab() { this.tabs = this.tabs.substring(0, this.tabs.length - 1) };
		printBlock(s_2115) {
			const temp_2116 = s_2115;
			switch (temp_2116&&temp_2116[0]) {
			case 1: {
				{
					const el_2117 = temp_2116[1];
					{
						return this.printStatement(s_2115);
						if (el_2117.length == 1) {
							const temp_2118 = el_2117[0];
							switch (temp_2118&&temp_2118[0]) {
							case 1: {
								return this.printBlock(el_2117[0])
							} break;
							
							default: 
							return '{ ' + this.printStatement(el_2117[0]) + '; }'
							};
						};
						if (el_2117.length == 0) { return '{}' };
						return this.printStatement(s_2115);
					};
				}
			} break;
			
			default: 
			return this.printStatement(/*Block*/[1,[s_2115]])
			};
		};
		printStatement(s_2119) {
			const temp_2120 = s_2119;
			switch (temp_2120&&temp_2120[0]) {
			case 0: {
				{
					const els_2121 = temp_2120[1];
					{
						let r_2122 = '';
						for (const s of $toIterator(els_2121)) if (s != null) { r_2122 += '\n' + this.tabs + this.printStatement(s) + ';' };
						return r_2122;
					};
				}
			} break;
			
			case 21: {
				return 'break'
			} break;
			
			case 20: {
				return 'continue'
			} break;
			
			case 1: {
				{
					const el_2123 = temp_2120[1];
					{
						if (el_2123.length == 0) { return '{}' };
						this.pushTab();
						const printMetaBlock = (e_2124) => {
							const meta = this.metaBlock;
							this.metaBlock = [];
							let ss = this.printStatement(e_2124);
							let r_2125 = [];
							for (const line of $toIterator(this.metaBlock)) {
								r_2125.push(line);
							};
							r_2125.push(ss);
							this.metaBlock = meta;
							return r_2125.join(';\n' + this.tabs);
						};
						let r_2126 = '{';
						for (const e of $toIterator(el_2123)) {
							const temp_2127 = e;
							switch (temp_2127&&temp_2127[0]) {
							case null: case undefined: {
								{
								}
							} break;
							
							case 0: {
								{
									const els_2128 = temp_2127[1];
									for (const s of $toIterator(els_2128)) if (s != null) { r_2126 += '\n' + this.tabs + printMetaBlock(s) + ';' };
								}
							} break;
							
							default: 
							r_2126 += '\n' + this.tabs + printMetaBlock(e) + ';'
							};
						};
						this.popTab();
						return r_2126 + '\n' + this.tabs + '}';
					};
				}
			} break;
			
			case 3: {
				{
					const e_2129 = temp_2120[1];
					const args_2130 = temp_2120[2];
					return '' + this.printExpression(e_2129) + '$new_' + this.printCallArguments(args_2130);
				}
			} break;
			
			case 6: {
				{
					const name_2131 = temp_2120[1];
					const expr_2132 = temp_2120[2];
					const type_2133 = temp_2120[3];
					return this.stringifyType(type_2133) + ' ' + name_2131 + '_' + (expr_2132 == (null)? ('') : ' = ' + this.printTypeConverter(this.printExpression(expr_2132), this.getType(expr_2132), type_2133));
				}
			} break;
			
			case 5: {
				{
					const name_2134 = temp_2120[1];
					const expr_2135 = temp_2120[2];
					const type_2136 = temp_2120[3];
					return this.stringifyType(type_2136) + ' ' + name_2134 + '_' + (expr_2135 == (null)? ('') : ' = ' + this.printTypeConverter(this.printExpression(expr_2135), this.getType(expr_2135), type_2136));
				}
			} break;
			
			case 7: {
				{
					const name_2137 = temp_2120[1];
					const expr_2138 = temp_2120[2];
					const args_2139 = temp_2120[3];
					const defaults_2140 = temp_2120[4];
					const funcType_2141 = temp_2120[5];
					{
						const _currentReturnType_2142 = this.currentReturnType;
						this.currentReturnType = this.getFunctionReturnType(funcType_2141);
						const temp_2143 = (this.tempId++);
						const rt_2144 = this.printFunctionReturnType(funcType_2141);
						this.forwardFunctions.push(rt_2144);
						this.forwardFunctions.push((' _$' + (temp_2143) + ''));
						this.forwardFunctions.push(this.printFunctionArguments(args_2139, funcType_2141, false));
						this.forwardFunctions.push(';\n');
						const tab = this.tabs;
						this.tabs = '';
						this.globalFunctions.push(rt_2144);
						this.globalFunctions.push((' _$' + (temp_2143) + ''));
						this.globalFunctions.push(this.printFunctionArguments(args_2139, funcType_2141, true));
						this.globalFunctions.push(' ');
						this.globalFunctions.push(this.printBlock(expr_2138));
						this.tabs = tab;
						this.currentReturnType = _currentReturnType_2142;
						return this.stringifyType(funcType_2141) + (' ' + (name_2137) + '_ = _$' + (temp_2143) + '');
						const result_2145 = ('auto ' + (name_2137) + '_ = [&]') + this.printFunctionArguments(args_2139, funcType_2141, true) + '->' + this.printFunctionReturnType(funcType_2141) + ' ' + this.printBlock(expr_2138);
						this.currentReturnType = _currentReturnType_2142;
						return result_2145;
					};
				}
			} break;
			
			case 8: {
				{
					const e_2146 = temp_2120[1];
					{
						if (e_2146 == null) { return 'return' };
						return 'return ' + this.printTypeConverter(this.printExpression(e_2146), this.getType(e_2146), this.currentReturnType);
					};
				}
			} break;
			
			case 9: {
				{
					const econd_2147 = temp_2120[1];
					const eif_2148 = temp_2120[2];
					const eelse_2149 = temp_2120[3];
					{
						let r_2150 = 'if (' + this.printExpression(econd_2147) + ') ' + this.printBlock(eif_2148);
						if (eelse_2149 != null) { r_2150 += ' else ' + this.printStatement(eelse_2149) };
						return r_2150;
					};
				}
			} break;
			
			case 2: {
				{
					const e_2151 = temp_2120[1];
					const args_2152 = temp_2120[2];
					const expects_2153 = temp_2120[3];
					const kind_2154 = temp_2120[4];
					{
						{
							const temp_2155 = kind_2154;
							switch (temp_2155) {
							case 12: {
								{
									const temp_2156 = e_2151;
									switch (temp_2156&&temp_2156[0]) {
									case 8: {
										{
											const expr_2157 = temp_2156[1];
											const name_2158 = temp_2156[2];
											const result_2159 = temp_2156[3];
											{
												const temp_2160 = (this.tempId++);
												this.metaBlock.push(this.stringifyType(this.getType(expr_2157)) + (' _$' + (temp_2160) + ' = ') + this.printExpression(expr_2157));
												return ('_$' + (temp_2160) + '->$vtable_->') + name_2158 + '_' + this.printCallArgumentsVirtual(('_$' + (temp_2160) + ''), args_2152, expects_2153);
											};
										}
									} break;
									};
								}
							} break;
							};
						};
						return this.printExpression(e_2151) + this.printCallArguments(args_2152, expects_2153);
					};
				}
			} break;
			
			case 10: {
				{
					const expr_2161 = temp_2120[1];
					const t_2162 = temp_2120[2];
					const v_2163 = temp_2120[3];
					const catches_2164 = temp_2120[4];
					{
						this.pushTab();
						let r_2165 = '_try {\n' + this.tabs;
						r_2165 += this.printStatement(expr_2161);
						this.popTab();
						r_2165 += '\n' + this.tabs + '} _catch(' + this.printType(t_2162[0]) + ' _x' + v_2163[0] + ') {\n' + this.tabs + ' ';
						this.pushTab();
						r_2165 += this.printStatement(catches_2164[0]);
						this.popTab();
						return r_2165 + '\n' + this.tabs + '}';
					};
				}
			} break;
			
			case 12: {
				{
					const a_2166 = temp_2120[1];
					const v_2167 = temp_2120[2];
					{
						{
							const temp_2168 = a_2166;
							switch (temp_2168&&temp_2168[0]) {
							case 8: {
								{
									const expr_2169 = temp_2168[1];
									const name_2170 = temp_2168[2];
									{
										const type_2171 = this.getType(expr_2169);
										if ((type_2171 == this.project.typer.typeAny) || (type_2171 == null)) { return this.printExpression(expr_2169) + '->var_(String_fromUTF8z("' + name_2170 + '"), ' + this.printToAnyConverter(this.printExpression(v_2167), this.getType(v_2167)) + ')' };
									};
								}
							} break;
							};
						};
						return this.printExpression(a_2166) + ' = ' + this.printExpression(v_2167);
					};
				}
			} break;
			
			case 11: {
				{
					const e_2172 = temp_2120[1];
					return '_throw(' + this.printExpression(e_2172) + ')';
				}
			} break;
			
			case 15: {
				{
					const name_2173 = temp_2120[1];
					const over_2174 = temp_2120[2];
					const by_2175 = temp_2120[3];
					return 'for (struct Any_* ' + name_2173 + '_; ' + this.printExpression(over_2174) + ';) ' + this.printStatement(by_2175);
				}
			} break;
			
			case 17: {
				{
					const e_2176 = temp_2120[1];
					return this.printExpression(e_2176) + '++';
				}
			} break;
			
			case 18: {
				{
					const e_2177 = temp_2120[1];
					return this.printExpression(e_2177) + '--';
				}
			} break;
			
			case 16: {
				{
					const econd_2178 = temp_2120[1];
					const e_2179 = temp_2120[2];
					const pre_2180 = temp_2120[3];
					{
						if (pre_2180) { return 'while (' + this.printExpression(econd_2178) + ') ' + this.printStatement(e_2179) };
						return 'do {' + this.printStatement(e_2179) + '} while (' + this.printExpression(econd_2178) + ')';
					};
				}
			} break;
			
			case 13: {
				{
					const a_2181 = temp_2120[1];
					const op_2182 = temp_2120[2];
					const value_2183 = temp_2120[3];
					return this.printExpression(a_2181) + ' ' + Token.stringify(op_2182) + '= ' + this.printExpression(value_2183);
				}
			} break;
			
			case 14: {
				{
					const expr_2184 = temp_2120[1];
					const name_2185 = temp_2120[2];
					{
						{
							const temp_2186 = expr_2184;
							switch (temp_2186&&temp_2186[0]) {
							case 5: {
								{
									const id_2187 = temp_2186[1];
									if (id_2187.charAt(0) == id_2187.charAt(0).toUpperCase()) { return id_2187 + '_::' + name_2185 + '_' };
								}
							} break;
							};
						};
						return this.printExpression(expr_2184) + '->' + name_2185;
					};
				}
			} break;
			
			case 19: {
				{
					const expr_2188 = temp_2120[1];
					const cases_2189 = temp_2120[2];
					const statements_2190 = temp_2120[3];
					{
						let r_2191 = '{ auto switch_ = ' + this.printExpression(expr_2188) + ';';
						let else_ = false;
						{
							let i_2192 = 0;
							let it_2193 = 0;
							let at_2194 = cases_2189.length;
							while (it_2193 < at_2194) {
								i_2192 = it_2193;
								it_2193++;
								if (cases_2189[i_2192].length > 0) {
									if (else_) { r_2191 += ' else' };
									r_2191 += '\n' + this.tabs + 'if ((';
									const conds_2195 = [];
									for (const cc of $toIterator(cases_2189[i_2192])) {
										const temp_2196 = cc;
										switch (temp_2196&&temp_2196[0]) {
										case 6: {
											conds_2195.push('switch_ == -1')
										} break;
										
										default: 
										conds_2195.push('switch_ == ' + this.printExpression(cc))
										};
									};
									r_2191 += conds_2195.join(') || (') + ')) ';
									this.pushTab();
									r_2191 += this.printBlock(statements_2190[i_2192]);
									this.popTab();
									else_ = true;
								};
							};
						};
						{
							let i_2197 = 0;
							let it_2198 = 0;
							let at_2199 = cases_2189.length;
							while (it_2198 < at_2199) {
								i_2197 = it_2198;
								it_2198++;
								if (cases_2189[i_2197].length == 0) {
									if (else_) { r_2191 += ' else' };
									r_2191 += '\n' + this.tabs;
									r_2191 += this.printBlock(statements_2190[i_2197]);
								};
							};
						};
						r_2191 += ';\n' + this.tabs;
						return r_2191 + '}';
						let r_2200 = 'switch (' + this.printExpression(expr_2188) + ') {';
						{
							let i_2201 = 0;
							let it_2202 = 0;
							let at_2203 = cases_2189.length;
							while (it_2202 < at_2203) {
								i_2201 = it_2202;
								it_2202++;
								if (cases_2189[i_2201].length > 0) {
									r_2200 += '\n' + this.tabs;
									for (const cc of $toIterator(cases_2189[i_2201])) r_2200 += 'case ' + this.printExpression(cc) + ': ';
									this.pushTab();
									r_2200 += this.printBlock(statements_2190[i_2201]);
									this.popTab();
									r_2200 += ' break;';
								};
							};
						};
						{
							let i_2204 = 0;
							let it_2205 = 0;
							let at_2206 = cases_2189.length;
							while (it_2205 < at_2206) {
								i_2204 = it_2205;
								it_2205++;
								if (cases_2189[i_2204].length == 0) {
									r_2200 += '\n' + this.tabs + 'default:';
									r_2200 += '\n' + this.tabs;
									r_2200 += this.printBlock(statements_2190[i_2204]);
								};
							};
						};
						r_2200 += '\n' + this.tabs;
						return r_2200 + '}';
					};
				}
			} break;
			
			default: 
			console.error('Unknown statement kind:', ((() => {
				const result_2207 = s_2119;
				if (result_2207 != null) { return result_2207 };
				return [];
			})())[0])
			};
		};
		printCallArguments(args_2208, expects_2209) {
			{
				let step_2210 = 0;
				const exp_2211 = expects_2209;
				if (step_2210 == 0 && exp_2211 != null) { step_2210 = 1 };
				if (step_2210 == 1) { return '(' + (() => {
					const result_2212 = [];
					const value_2213 = args_2208.length;
					for (const i of $toIterator(value_2213)) result_2212.push(this.printTypeConverter(this.printExpression(args_2208[i]), this.getType(args_2208[i]), exp_2211[i]));
					return result_2212;
				})().join(', ') + ')' };
			};
			return '(' + (() => {
				const result_2214 = [];
				const value_2215 = args_2208;
				for (const a of $toIterator(value_2215)) result_2214.push(this.printExpression(a));
				return result_2214;
			})().join(', ') + ')';
		};
		printCallArgumentsVirtual(me_2216, args_2217, expects_2218) {
			if (args_2217.length == 0) { return '(' + me_2216 + ')' };
			{
				let step_2219 = 0;
				const exp_2220 = expects_2218;
				if (step_2219 == 0 && exp_2220 != null) { step_2219 = 1 };
				if (step_2219 == 1) { return '(' + me_2216 + ', ' + (() => {
					const result_2221 = [];
					const value_2222 = args_2217.length;
					for (const i of $toIterator(value_2222)) result_2221.push(this.printTypeConverter(this.printExpression(args_2217[i]), this.getType(args_2217[i]), exp_2220[i]));
					return result_2221;
				})().join(', ') + ')' };
			};
			return '(' + me_2216 + ', ' + (() => {
				const result_2223 = [];
				const value_2224 = args_2217;
				for (const a of $toIterator(value_2224)) result_2223.push(this.printExpression(a));
				return result_2223;
			})().join(', ') + ')';
		};
		getFunctionReturnType(funcType_2225) {
			const temp_2226 = funcType_2225;
			switch (temp_2226&&temp_2226[0]) {
			case 10: {
				{
					const args_2227 = temp_2226[1];
					const returns_2228 = temp_2226[2];
					return returns_2228;
				}
			} break;
			
			default: 
			return null
			};
		};
		printFunctionReturnType(funcType_2229) {
			const temp_2230 = funcType_2229;
			switch (temp_2230&&temp_2230[0]) {
			case 10: {
				{
					const args_2231 = temp_2230[1];
					const returns_2232 = temp_2230[2];
					return this.stringifyType(returns_2232);
				}
			} break;
			
			default: 
			return 'void'
			};
		};
		printToAnyConverter(string_2233, type_2234) {
			if (type_2234 == this.project.typer.typeAny) { return string_2233 };
			if (type_2234 == this.project.typer.typeBool) { return 'Any_fromBool(' + string_2233 + ')' };
			if (type_2234 == this.project.typer.typeInt) { return 'Any_fromInt(' + string_2233 + ')' };
			return string_2233;
		};
		printTypeConverter(string_2235, fromValue_2236, to_2237) {
			if (fromValue_2236 == to_2237) { return string_2235 };
			if ((fromValue_2236 == this.project.typer.typeBool) && (to_2237 == this.project.typer.typeAny)) { return 'Any_fromBool(' + string_2235 + ')' };
			if ((fromValue_2236 == this.project.typer.typeAny) && (to_2237 == this.project.typer.typeBool)) { return '(' + string_2235 + ')->_toBool()' };
			if ((fromValue_2236 == this.project.typer.typeAny) && (to_2237 == this.project.typer.typeInt)) { return '(' + string_2235 + ')->_toInt()' };
			if ((fromValue_2236 == this.project.typer.typeInt) && (to_2237 == this.project.typer.typeString)) { return 'String_fromInt(' + string_2235 + ')' };
			if (to_2237 == this.project.typer.typeAny) { return this.printToAnyConverter(string_2235, fromValue_2236) };
			if (fromValue_2236 != to_2237) { return '(' + this.stringifyType(to_2237) + ')(' + string_2235 + ')' };
			return string_2235;
		};
		printFunctionArguments(args_2238, funcType_2239, defaults_2240) {
			if ((args_2238.length == 0) && (this.thisArgument != null)) { return '(' + this.thisArgument + ')' };
			if (args_2238.length == 0) { return '(void)' };
			{
				const temp_2241 = funcType_2239;
				switch (temp_2241&&temp_2241[0]) {
				case 10: {
					{
						const types_2242 = temp_2241[1];
						{
							const results = [];
							{
								let step_2243 = 0;
								const thisArgument = this.thisArgument;
								if (step_2243 == 0 && thisArgument != null) { step_2243 = 1 };
								if (step_2243 == 1) { results.push(thisArgument) };
							};
							{
								let a_2244 = 0;
								let it_2245 = 0;
								let at_2246 = args_2238.length;
								while (it_2245 < at_2246) {
									a_2244 = it_2245;
									it_2245++;
									{
										let result_2247 = this.stringifyType(types_2242[a_2244]) + ' ' + args_2238[a_2244] + '_';
										if (defaults_2240) {
											const temp_2248 = types_2242[a_2244];
											switch (temp_2248&&temp_2248[0]) {
											case 2: {
												result_2247 += ' = ((struct Unknown_ *)0)'
											} break;
											
											case 1: {
												result_2247 += ' = ((struct Unknown_ *)0)'
											} break;
											};
										};
										results.push(result_2247);
									};
								};
							};
							return '(' + results.join(', ') + ')';
							return '(' + (() => {
								const result_2249 = [];
								const value_2250 = args_2238.length;
								for (const a of $toIterator(value_2250)) result_2249.push((() => {
									let result_2251 = this.stringifyType(types_2242[a]) + ' ' + args_2238[a] + '_';
									if (defaults_2240) {
										const temp_2252 = types_2242[a];
										switch (temp_2252&&temp_2252[0]) {
										case 2: {
											result_2251 += ' = ((struct Unknown_ *)0)'
										} break;
										
										case 1: {
											result_2251 += ' = ((struct Unknown_ *)0)'
										} break;
										};
									};
									return result_2251;
								})());
								return result_2249;
							})().join(', ') + ')';
						};
					}
				} break;
				};
			};
			return '(' + (() => {
				const result_2253 = [];
				const value_2254 = args_2238.length;
				for (const a of $toIterator(value_2254)) result_2253.push('struct Any_* ' + args_2238[a] + '_');
				return result_2253;
			})().join(', ') + ')';
		};
		stringType(t_2255, prefix_2256) {
			if (t_2255 == null) { return 'void*' };
			{
				const temp_2257 = t_2255;
				switch (temp_2257&&temp_2257[0]) {
				case 2: {
					{
						const name_2258 = temp_2257[1];
						const params_2259 = temp_2257[2];
						return '_x' + name_2258;
					}
				} break;
				
				case 1: {
					{
						const name_2260 = temp_2257[1];
						return '_x' + name_2260;
					}
				} break;
				
				case 5: {
					{
					}
				} break;
				
				case 0: {
					{
						const t_2261 = temp_2257[1];
						return this.stringType(t_2261, '');
					}
				} break;
				};
			};
			return prefix_2256 + 'void*';
		};
		printType(t_2262) {
			const type_2263 = this.stringType(t_2262, '');
			return type_2263;
		};
		stringifyType(t_2264) {
			const temp_2265 = t_2264;
			switch (temp_2265&&temp_2265[0]) {
			case 2: {
				{
					const t_2266 = temp_2265[1];
					{
						const name_2267 = this.stringifyType(t_2266);
						if (name_2267 == 'int32_t') { return 'int32_t*' };
						if (name_2267 == 'double') { return 'double*' };
						return name_2267;
					};
				}
			} break;
			
			case 1: {
				{
					const handle_2268 = temp_2265[1];
					return this.stringifyType(handle_2268.value);
				}
			} break;
			
			case 4: {
				{
					const type_2269 = temp_2265[1];
					{
						if (type_2269.name == 'Int') { return 'int32_t' };
						if (type_2269.name == 'Bool') { return 'uint8_t' };
						if (type_2269.name == 'Void') { return 'void' };
						if (type_2269.name == 'Float') { return 'double' };
						return 'struct ' + type_2269.name + '_*';
					};
				}
			} break;
			
			case 3: {
				{
					const type_2270 = temp_2265[1];
					return 'struct ' + type_2270.name + '_*';
				}
			} break;
			
			case 6: {
				{
					const type_2271 = temp_2265[1];
					{
						{
							let step_2272 = 0;
							const sub = type_2271.fieldsTypeSimple;
							if (step_2272 == 0 && sub != null) { step_2272 = 1 };
							if (step_2272 == 1) { return this.stringifyType(sub) };
						};
						return 'struct ' + type_2271.name + '_*';
					};
				}
			} break;
			
			case 7: {
				{
					const type_2273 = temp_2265[1];
					return 'struct ' + type_2273.name + '_*';
				}
			} break;
			
			case 11: {
				return 'struct Any_*/*Struct*/'
			} break;
			
			case 10: {
				{
					const args_2274 = temp_2265[1];
					const returns_2275 = temp_2265[2];
					{
						const temp_2276 = (this.tempId++);
						this.typedefFunctions.push('typedef ');
						this.typedefFunctions.push(this.stringifyType(returns_2275));
						this.typedefFunctions.push((' (*_$' + (temp_2276) + ')('));
						const a_2277 = [];
						for (const arg of $toIterator(args_2274)) {
							a_2277.push(this.stringifyType(arg));
						};
						this.typedefFunctions.push(a_2277.join(', '));
						this.typedefFunctions.push(');\n');
						return ('_$' + (temp_2276) + '');
					};
				}
			} break;
			
			case null: case undefined: {
				return 'struct Any_*/*null?*/'
			} break;
			
			default: 
			throw 'stringifyType ' + t_2264
			};
		};
		getType(e_2278) {
			const temp_2279 = e_2278;
			switch (temp_2279&&temp_2279[0]) {
			case 1: {
				return this.project.typer.typeInt
			} break;
			
			case 2: {
				return this.project.typer.typeFloat
			} break;
			
			case 0: {
				return this.project.typer.typeString
			} break;
			
			case 3: {
				return this.project.typer.typeBool
			} break;
			
			case 4: {
				return this.project.typer.typeBool
			} break;
			
			case 5: {
				{
					const type_2280 = temp_2279[2];
					return type_2280;
				}
			} break;
			
			case 14: {
				{
					const expr_2281 = temp_2279[1];
					return this.getType(expr_2281);
				}
			} break;
			
			case 9: {
				{
					const type_2282 = temp_2279[3];
					return type_2282;
				}
			} break;
			
			case 11: {
				{
					const type_2283 = temp_2279[4];
					return type_2283;
				}
			} break;
			
			case 8: {
				{
					const type_2284 = temp_2279[3];
					return type_2284;
				}
			} break;
			
			case 7: {
				{
					const type_2285 = temp_2279[1];
					return type_2285;
				}
			} break;
			
			default: 
			return this.project.typer.typeAny
			};
		};
		registerString(string_2286) {
			this.declarationsOfStrings.push(string_2286);
			return this.declarationsOfStrings.length - 1;
		};
		printExpression(e_2287) {
			const temp_2288 = e_2287;
			switch (temp_2288&&temp_2288[0]) {
			case 7: {
				return (() => {
					const result_2289 = this.customThis;
					if (result_2289 != null) { return result_2289 };
					return 'this';
				})()
			} break;
			
			case 5: {
				{
					const name_2290 = temp_2288[1];
					return '' + name_2290 + '_';
				}
			} break;
			
			case 6: {
				return '((struct Unknown_ *)0)'
			} break;
			
			case 1: {
				{
					const v_2291 = temp_2288[1];
					return '(int32_t)' + v_2291;
				}
			} break;
			
			case 2: {
				{
					const v_2292 = temp_2288[1];
					{
						if (v_2292.indexOf('.') == (-1)) { return '(double)' + v_2292 + '.0' };
						return '(double)' + v_2292;
					};
				}
			} break;
			
			case 0: {
				{
					const string_2293 = temp_2288[1];
					{
						{
							let step_2294 = 0;
							const id_2295 = this.declarationsOfStringsMap.get(string_2293);
							if (step_2294 == 0 && id_2295 != null) { step_2294 = 1 };
							if (step_2294 == 1) { return ('String_Strings[' + (id_2295) + ']') };
						};
						const s_2296 = string_2293.split('');
						const charsOut_2297 = [];
						while (s_2296.length > 0) {
							const temp_2298 = s_2296[0];
							switch (temp_2298) {
							case '\'': {
								{
									charsOut_2297.push('\\\'');
									s_2296.shift();
								}
							} break;
							
							case '"': {
								{
									charsOut_2297.push('\\"');
									s_2296.shift();
								}
							} break;
							
							case '\n': {
								{
									charsOut_2297.push('\\n');
									s_2296.shift();
								}
							} break;
							
							case '\r': {
								{
									charsOut_2297.push('\\r');
									s_2296.shift();
								}
							} break;
							
							case '\\': {
								{
									s_2296.shift();
									if (s_2296[0] == '\'') {
										charsOut_2297.push('\\\'');
										s_2296.shift();
									} else if (s_2296[0] == '"') {
										charsOut_2297.push('\\"');
										s_2296.shift();
									} else if (s_2296[0] == '\\') {
										charsOut_2297.push('\\\\');
										s_2296.shift();
									} else {
										charsOut_2297.push('\\');
									};
								}
							} break;
							
							default: 
							{
								charsOut_2297.push(s_2296[0]);
								s_2296.shift();
							}
							};
						};
						const id_2299 = this.registerString(charsOut_2297.join(''));
						this.declarationsOfStringsMap.set(string_2293, id_2299);
						return ('String_Strings[' + (id_2299) + ']');
					};
				}
			} break;
			
			case 3: {
				return '(uint8_t)1'
			} break;
			
			case 4: {
				return '(uint8_t)0'
			} break;
			
			case 8: {
				{
					const expr_2300 = temp_2288[1];
					const name_2301 = temp_2288[2];
					{
						const temp_2302 = expr_2300;
						switch (temp_2302&&temp_2302[0]) {
						case 7: {
							return ((() => {
								const result_2303 = this.customThis;
								if (result_2303 != null) { return result_2303 };
								return 'this';
							})()) + '->' + name_2301 + '_'
						} break;
						
						case 5: {
							{
								const id_2304 = temp_2302[1];
								{
									if (id_2304.charAt(0) == id_2304.charAt(0).toUpperCase()) { return id_2304 + '_$' + name_2301 + '_' };
									const type_2305 = this.getType(expr_2300);
									if ((type_2305 == this.project.typer.typeAny) || (type_2305 == null)) { return this.printExpression(expr_2300) + '->let_(String_fromUTF8z("' + name_2301 + '"))' };
									return this.printExpression(expr_2300) + '->' + name_2301 + '_';
								};
							}
						} break;
						
						default: 
						return this.printExpression(expr_2300) + '->' + name_2301 + '_'
						};
					};
				}
			} break;
			
			case 9: {
				{
					const e_2306 = temp_2288[1];
					const args_2307 = temp_2288[2];
					const type_2308 = temp_2288[3];
					const kind_2309 = temp_2288[4];
					{
						{
							const temp_2310 = kind_2309;
							switch (temp_2310) {
							case 10: {
								return this.printExpression(e_2306) + '/*static*/' + this.printCallArguments(args_2307)
							} break;
							
							case 12: {
								{
									const temp_2311 = e_2306;
									switch (temp_2311&&temp_2311[0]) {
									case 8: {
										{
											const expr_2312 = temp_2311[1];
											const name_2313 = temp_2311[2];
											const result_2314 = temp_2311[3];
											{
												const temp_2315 = (this.tempId++);
												const temp1 = (this.tempId++);
												const mb = this.metaBlock;
												this.metaBlock = [];
												const meta_2316 = this.stringifyType(this.getType(expr_2312)) + (' _$' + (temp_2315) + ' = ') + this.printExpression(expr_2312);
												const result_2317 = ('_$' + (temp_2315) + '->$vtable_->') + name_2313 + '_' + this.printCallArgumentsVirtual(('_$' + (temp_2315) + ''), args_2307);
												for (const b of $toIterator(this.metaBlock)) mb.push('/*b*/' + b);
												mb.push('/*meta*/' + meta_2316);
												this.metaBlock = mb;
												return result_2317;
											};
										}
									} break;
									};
								}
							} break;
							};
						};
						return this.printExpression(e_2306) + this.printCallArguments(args_2307);
					};
				}
			} break;
			
			case 12: {
				{
					const name_2318 = temp_2288[1];
					const expr_2319 = temp_2288[2];
					const args_2320 = temp_2288[3];
					const defaults_2321 = temp_2288[4];
					const funcType_2322 = temp_2288[5];
					{
						const _currentReturnType_2323 = this.currentReturnType;
						this.currentReturnType = this.getFunctionReturnType(funcType_2322);
						const result_2324 = '[&]' + this.printFunctionArguments(args_2320, defaults_2321) + '->' + this.printFunctionReturnType(funcType_2322) + ' ' + this.printBlock(expr_2319);
						this.currentReturnType = _currentReturnType_2323;
						return result_2324;
					};
				}
			} break;
			
			case 10: {
				{
					const e_2325 = temp_2288[1];
					const args_2326 = temp_2288[2];
					return '' + this.printExpression(e_2325) + '$new_' + this.printCallArguments(args_2326);
				}
			} break;
			
			case 16: {
				{
					const el_2327 = temp_2288[1];
					{
						if (el_2327.length == 0) { return 'Array_$new_(0)' };
						return 'Array_from(' + (() => {
							const result_2328 = [];
							const value_2329 = el_2327;
							for (const a of $toIterator(value_2329)) result_2328.push(this.printExpression(a));
							return result_2328;
						})().join(', ') + ')';
					};
				}
			} break;
			
			case 18: {
				{
					const op_2330 = temp_2288[1];
					const postfix_2331 = temp_2288[2];
					const e_2332 = temp_2288[3];
					{
						if (postfix_2331) { return this.printExpression(e_2332) + Token.stringify(op_2330) };
						return Token.stringify(op_2330) + this.printExpression(e_2332);
					};
				}
			} break;
			
			case 19: {
				{
					const nullable_2333 = temp_2288[1];
					const othewise_2334 = temp_2288[2];
					return '((' + this.printExpression(nullable_2333) + ')||(' + this.printExpression(othewise_2334) + '))';
				}
			} break;
			
			case 14: {
				{
					const e_2335 = temp_2288[1];
					return '(' + this.printExpression(e_2335) + ')';
				}
			} break;
			
			case 11: {
				{
					const a_2336 = temp_2288[1];
					const op_2337 = temp_2288[2];
					const b_2338 = temp_2288[3];
					{
						if (op_2337 == 111) {
							if (this.getType(a_2336) == this.project.typer.typeString) { return 'String_opAdd(' + this.printExpression(a_2336) + ', ' + this.printTypeConverter(this.printExpression(b_2338), this.getType(b_2338), this.project.typer.typeString) + ')' };
							if (this.getType(b_2338) == this.project.typer.typeString) { return 'String_opAdd(' + this.printTypeConverter(this.printExpression(a_2336), this.getType(a_2336), this.project.typer.typeString) + ', ' + this.printExpression(b_2338) + ')' };
						};
						return this.printExpression(a_2336) + ' ' + Token.stringify(op_2337) + ' ' + this.printExpression(b_2338);
					};
				}
			} break;
			
			case 21: {
				{
					const expr_2339 = temp_2288[1];
					const index_2340 = temp_2288[2];
					return this.printExpression(expr_2339) + '->get_(' + this.printTypeConverter(this.printExpression(index_2340), this.getType(index_2340), this.project.typer.typeInt) + ')';
				}
			} break;
			
			case 20: {
				{
					const econd_2341 = temp_2288[1];
					const eif_2342 = temp_2288[2];
					const eelse_2343 = temp_2288[3];
					{
						let r_2344 = '';
						try {
							r_2344 += '(' + this.printExpression(econd_2341) + ')?';
							r_2344 += '(' + this.printExpression(eif_2342) + ')';
							r_2344 += ':' + this.printExpression(eelse_2343);
							return r_2344;
						} catch (temp_2345) {
							if (true) { 
							const error = temp_2345
							{
								console.log('If =>', e_2287, error);
								return r_2344 + '<!-- If => error -->';
							} } else
							
							throw temp_2345;
						};
					};
				}
			} break;
			
			case 26: {
				{
					const expr_2346 = temp_2288[1];
					{
						const e_2347 = this.printExpression(expr_2346);
						return '(' + e_2347 + ' == ((Unknown_ *)0)? -1 : ' + e_2347 + '->is_)';
					};
				}
			} break;
			
			case 15: {
				{
					const names_2348 = temp_2288[1];
					const el_2349 = temp_2288[2];
					return 'Object_from(' + (() => {
						const result_2350 = [];
						const value_2351 = el_2349.length;
						for (const i of $toIterator(value_2351)) result_2350.push(((names_2348[i]) + ', ' + this.printExpression(el_2349[i])));
						return result_2350;
					})().join(', ') + ')';
				}
			} break;
			
			case 17: {
				{
					const keys_2352 = temp_2288[1];
					const values_2353 = temp_2288[2];
					{
						if (keys_2352.length == 0) { return 'Map_$new_()' };
						return 'Map_from(' + (() => {
							const result_2354 = [];
							const value_2355 = keys_2352.length;
							for (const i of $toIterator(value_2355)) result_2354.push('' + this.printExpression(keys_2352[i]) + ', ' + this.printExpression(values_2353[i]) + '');
							return result_2354;
						})().join(', ') + ')';
					};
				}
			} break;
			
			case 24: {
				{
					const a_2356 = temp_2288[1];
					const op_2357 = temp_2288[2];
					const value_2358 = temp_2288[3];
					return this.printExpression(a_2356) + ' ' + Token.stringify(op_2357) + '= ' + this.printExpression(value_2358);
				}
			} break;
			
			case 25: {
				{
					const kind_2359 = temp_2288[1];
					const args_2360 = temp_2288[2];
					const s_2361 = temp_2288[3];
					{
						const temp_2362 = kind_2359;
						switch (temp_2362) {
						case 0: {
							return '((' + this.printExpression(args_2360[0]) + ')' + s_2361 + '(' + this.printExpression(args_2360[1]) + '))'
						} break;
						
						case 1: {
							return s_2361 + this.printCallArguments(args_2360)
						} break;
						
						case 2: {
							return '(' + s_2361 + '(' + this.printExpression(args_2360[0]) + '))'
						} break;
						
						case 3: {
							return '((' + this.printExpression(args_2360[1]) + ')' + s_2361 + ')'
						} break;
						};
					};
				}
			} break;
			
			case 27: {
				{
					const typeName = temp_2288[1];
					const tagName_2363 = temp_2288[2];
					const tag_2364 = temp_2288[3];
					const args_2365 = temp_2288[4];
					return '' + typeName + '_$' + tagName_2363 + '_(' + (() => {
						const result_2366 = [];
						const value_2367 = args_2365;
						for (const a of $toIterator(value_2367)) result_2366.push(this.printExpression(a));
						return result_2366;
					})().join(', ') + ')';
				}
			} break;
			
			case 28: {
				{
					const expr_2368 = temp_2288[1];
					const index_2369 = temp_2288[2];
					return this.printExpression(expr_2368) + '->enum_[' + index_2369 + ']';
				}
			} break;
			
			default: 
			{
				console.error('Unknown expression kind:', e_2287);
				return '<!-- ' + ((() => {
					const result_2370 = e_2287;
					if (result_2370 != null) { return result_2370 };
					return [];
				})())[0] + ' -->';
			}
			};
		};
	}
	GenCxx.spawn = () => { return new GenCxx() };
	var GenHaxe = class {
		constructor() { 
			this.extension = '.hx'
			this.nativeEnums = true
			this.tabs = '\t'
			this.reserved = ['with', 'var', 'instanceof', 'typeof', 'delete', 'undefined', 'package']
			this.reservedGlobals = ['HexaHaxe']
			this.globalAccessor = 'HexaHaxe.'
		{
		} };
		perform(normalizer_2371) {
			this.project = normalizer_2371;
			return this.stringify();
		};
		stringify() {
			let out_2372 = 'package hexa;\n\nusing StringTools;\n';
			for (const e of $toIterator(this.project.enumsSimple)) {
				out_2372 += '\n' + '@:enum abstract ' + e.name + '(Dynamic) {';
				{
					let v_2373 = 0;
					let it_2374 = 0;
					let at_2375 = e.names.length;
					while (it_2374 < at_2375) {
						v_2373 = it_2374;
						it_2374++;
						{
							out_2372 += '\n\tvar ' + e.names[v_2373] + ' = ' + this.printExpression((() => {
								const result_2376 = e.values[v_2373];
								if (result_2376 != null) { return result_2376 };
								return /*Int*/[1,v_2373];
							})()) + ';';
						};
					};
				};
				for (const v of $toIterator(e.staticVars)) {
					const temp_2377 = v;
					switch (temp_2377&&temp_2377[0]) {
					case 5: {
						{
							const name_2378 = temp_2377[1];
							const expr_2379 = temp_2377[2];
							const type_2380 = temp_2377[3];
							{
								out_2372 += '\n\t' + e.name + '.' + name_2378;
								if (expr_2379 != null) { out_2372 += ' = ' + this.printExpression(expr_2379) };
							};
						}
					} break;
					
					case 6: {
						{
							const name_2381 = temp_2377[1];
							const expr_2382 = temp_2377[2];
							const type_2383 = temp_2377[3];
							{
								out_2372 += '\n\t' + e.name + '.' + name_2381;
								out_2372 += ' = ' + this.printExpression(expr_2382);
							};
						}
					} break;
					};
				};
				for (const v of $toIterator(e.staticMethods)) {
					const temp_2384 = v;
					switch (temp_2384&&temp_2384[0]) {};
				};
				out_2372 += '\n}\n';
			};
			for (const e of $toIterator(this.project.enumsComplex)) {
				out_2372 += '\n' + 'enum ' + e.name + ' {';
				let i_2385 = 0;
				for (const name of $toIterator(e.names)) {
					out_2372 += '\n\t' + name;
					if (e.constructors[i_2385] != null) {
						out_2372 += '(';
						out_2372 += (() => {
							const result_2386 = [];
							const value_2387 = e.constructors[i_2385].length;
							for (const k of $toIterator(value_2387)) result_2386.push(e.constructors[i_2385][k] + this.printNodeAsType(e.types[i_2385][k], ': '));
							return result_2386;
						})().join(', ');
						out_2372 += ');';
					} else out_2372 += ';';
					i_2385++;
				};
				out_2372 += '\n}\n';
			};
			for (const i of $toIterator(this.project.interfaces)) {
				throw i;
			};
			for (const c of $toIterator(this.project.classes)) {
				if (c.external) {
					if (c.jsRequire != null) { continue };
					continue;
				};
				out_2372 += '\n' + 'class ' + c.name;
				{
					let step_2388 = 0;
					const params_2389 = c.genericParams;
					if (step_2388 == 0 && params_2389 != null) { step_2388 = 1 };
					if (step_2388 == 1) { out_2372 += '<' + params_2389.join(', ') + '>' };
				};
				{
					let step_2390 = 0;
					const implement_2391 = c.implement;
					if (step_2390 == 0 && implement_2391 != null) { step_2390 = 1 };
					if (step_2390 == 1) { out_2372 += ' implements ' + implement_2391 };
				};
				{
					let step_2392 = 0;
					const params_2393 = c.implementParams;
					if (step_2392 == 0 && params_2393 != null) { step_2392 = 1 };
					if (step_2392 == 1) { out_2372 += '<' + params_2393.join(', ') + '>' };
				};
				out_2372 += ' {';
				for (const v of $toIterator(c.vars)) {
					const temp_2394 = v;
					switch (temp_2394&&temp_2394[0]) {
					case 5: {
						{
							const name_2395 = temp_2394[1];
							const expr_2396 = temp_2394[2];
							const type_2397 = temp_2394[3];
							{
								out_2372 += '\n\tpublic var ' + name_2395 + this.printType(type_2397);
								if (expr_2396 != null) { out_2372 += ' = ' + this.printExpression(expr_2396) };
								out_2372 += ';';
							};
						}
					} break;
					
					case 6: {
						{
							const name_2398 = temp_2394[1];
							const expr_2399 = temp_2394[2];
							const type_2400 = temp_2394[3];
							out_2372 += '\n\tpublic var ' + name_2398 + this.printType(type_2400) + ' = ' + this.printExpression(expr_2399) + ';';
						}
					} break;
					};
				};
				for (const v of $toIterator(c.methods)) {
					const temp_2401 = v;
					switch (temp_2401&&temp_2401[0]) {};
				};
				for (const v of $toIterator(c.staticVars)) {
					const temp_2402 = v;
					switch (temp_2402&&temp_2402[0]) {
					case 5: {
						{
							const name_2403 = temp_2402[1];
							const expr_2404 = temp_2402[2];
							const type_2405 = temp_2402[3];
							{
								out_2372 += '\n\tpublic static var ' + name_2403 + this.printType(type_2405);
								if (expr_2404 != null) { out_2372 += ' = ' + this.printExpression(expr_2404) };
								out_2372 += ';';
							};
						}
					} break;
					
					case 6: {
						{
							const name_2406 = temp_2402[1];
							const expr_2407 = temp_2402[2];
							const type_2408 = temp_2402[3];
							{
								out_2372 += '\n\tpublic static var ' + name_2406 + this.printType(type_2408);
								out_2372 += ' = ' + this.printExpression(expr_2407) + ';';
							};
						}
					} break;
					};
				};
				for (const v of $toIterator(c.staticMethods)) {
					const temp_2409 = v;
					switch (temp_2409&&temp_2409[0]) {};
				};
				out_2372 += '\n}\n';
			};
			const globals = [];
			for (const g of $toIterator(this.project.globalFuncs)) {
				const temp_2410 = g;
				switch (temp_2410&&temp_2410[0]) {};
			};
			for (const g of $toIterator(this.project.globalVars)) {
				const temp_2411 = g;
				switch (temp_2411&&temp_2411[0]) {
				case 5: {
					{
						const name_2412 = temp_2411[1];
						const expr_2413 = temp_2411[2];
						const type_2414 = temp_2411[3];
						{
							globals.push('\n\tpublic static var ' + name_2412 + this.printType(type_2414));
							if (expr_2413 != null) { globals.push(' = ' + this.printExpression(expr_2413)) };
							globals.push(';');
						};
					}
				} break;
				
				case 6: {
					{
						const name_2415 = temp_2411[1];
						const expr_2416 = temp_2411[2];
						const type_2417 = temp_2411[3];
						{
							globals.push('\n\tpublic static var ' + name_2415 + this.printType(type_2417));
							globals.push(' = ' + this.printExpression(expr_2416) + ';');
						};
					}
				} break;
				};
			};
			out_2372 += 'class HexaHaxe {\n\tpublic static function main() {';
			this.tabs = '\t\t\t';
			for (const init of $toIterator(this.project.init)) {
				out_2372 += '\n\t\t{\n\t\t\t';
				out_2372 += this.printStatement(init);
				out_2372 += '\n\t\t}';
			};
			out_2372 += '\n\t}';
			for (const g of $toIterator(globals)) {
				out_2372 += g;
			};
			return out_2372 + '\n}';
		};
		pushTab() { this.tabs += '\t' };
		popTab() { this.tabs = this.tabs.substring(0, this.tabs.length - 1) };
		printBlock(s_2418) {
			const temp_2419 = s_2418;
			switch (temp_2419&&temp_2419[0]) {
			case 1: {
				{
					const el_2420 = temp_2419[1];
					{
						if (el_2420.length == 1) { return '{ ' + this.printStatement(el_2420[0]) + '; }' };
						if (el_2420.length == 0) { return '{}' };
						return this.printStatement(s_2418);
					};
				}
			} break;
			
			default: 
			return '{ ' + this.printStatement(s_2418) + '; }'
			};
		};
		printStatement(s_2421) {
			{
				const temp_2422 = s_2421;
				switch (temp_2422&&temp_2422[0]) {
				case 0: {
					{
						const els_2423 = temp_2422[1];
						{
							let r_2424 = '';
							for (const s of $toIterator(els_2423)) if (s != null) { r_2424 += '\n' + this.tabs + this.printStatement(s) + ';' };
							return r_2424;
						};
					}
				} break;
				
				case 21: {
					return 'break'
				} break;
				
				case 20: {
					return 'continue'
				} break;
				
				case 1: {
					{
						const el_2425 = temp_2422[1];
						{
							this.pushTab();
							let r_2426 = '{';
							for (const e of $toIterator(el_2425)) {
								const temp_2427 = e;
								switch (temp_2427&&temp_2427[0]) {
								case null: case undefined: {
									{
									}
								} break;
								
								case 0: {
									{
										const els_2428 = temp_2427[1];
										for (const s of $toIterator(els_2428)) if (s != null) { r_2426 += '\n' + this.tabs + this.printStatement(s) + ';' };
									}
								} break;
								
								default: 
								r_2426 += '\n' + this.tabs + this.printStatement(e) + ';'
								};
							};
							this.popTab();
							return r_2426 + '\n' + this.tabs + '}';
						};
					}
				} break;
				
				case 3: {
					{
						const e_2429 = temp_2422[1];
						const args_2430 = temp_2422[2];
						return 'new ' + this.printExpression(e_2429) + this.printCallArguments(args_2430);
					}
				} break;
				
				case 6: {
					{
						const name_2431 = temp_2422[1];
						const expr_2432 = temp_2422[2];
						const type_2433 = temp_2422[3];
						return 'var ' + name_2431 + this.printType(type_2433) + (expr_2432 == (null)? ('') : ' = ' + this.printExpression(expr_2432));
					}
				} break;
				
				case 5: {
					{
						const name_2434 = temp_2422[1];
						const expr_2435 = temp_2422[2];
						const type_2436 = temp_2422[3];
						return 'var ' + name_2434 + this.printType(type_2436) + (expr_2435 == (null)? ('') : ' = ' + this.printExpression(expr_2435));
					}
				} break;
				
				case 8: {
					{
						const e_2437 = temp_2422[1];
						{
							if (e_2437 == null) { return 'return' };
							return 'return ' + this.printExpression(e_2437);
						};
					}
				} break;
				
				case 9: {
					{
						const econd_2438 = temp_2422[1];
						const eif_2439 = temp_2422[2];
						const eelse_2440 = temp_2422[3];
						{
							let r_2441 = 'if (' + this.printExpression(econd_2438) + ') ' + this.printBlock(eif_2439);
							if (eelse_2440 != null) { r_2441 += ' else ' + this.printStatement(eelse_2440) };
							return r_2441;
						};
					}
				} break;
				
				case 2: {
					{
						const e_2442 = temp_2422[1];
						const args_2443 = temp_2422[2];
						return this.printExpression(e_2442) + this.printCallArguments(args_2443);
					}
				} break;
				
				case 10: {
					{
						const expr_2444 = temp_2422[1];
						const t_2445 = temp_2422[2];
						const v_2446 = temp_2422[3];
						const catches_2447 = temp_2422[4];
						{
							let r_2448 = 'try ';
							r_2448 += this.printStatement(expr_2444);
							r_2448 += ' catch (' + v_2446[0] + (this.printType(t_2445[0]) || ': Dynamic') + ') ';
							r_2448 += this.printStatement(catches_2447[0]);
							return r_2448;
						};
					}
				} break;
				
				case 12: {
					{
						const a_2449 = temp_2422[1];
						const v_2450 = temp_2422[2];
						return this.printExpression(a_2449) + ' = ' + this.printExpression(v_2450);
					}
				} break;
				
				case 11: {
					{
						const e_2451 = temp_2422[1];
						return 'throw ' + this.printExpression(e_2451);
					}
				} break;
				
				case 15: {
					{
						const name_2452 = temp_2422[1];
						const over_2453 = temp_2422[2];
						const by_2454 = temp_2422[3];
						return 'for (' + name_2452 + ' in ' + this.printExpression(over_2453) + ') ' + this.printStatement(by_2454);
					}
				} break;
				
				case 17: {
					{
						const e_2455 = temp_2422[1];
						return this.printExpression(e_2455) + '++';
					}
				} break;
				
				case 18: {
					{
						const e_2456 = temp_2422[1];
						return this.printExpression(e_2456) + '--';
					}
				} break;
				
				case 16: {
					{
						const econd_2457 = temp_2422[1];
						const e_2458 = temp_2422[2];
						const pre_2459 = temp_2422[3];
						{
							if (pre_2459) { return 'while (' + this.printExpression(econd_2457) + ') ' + this.printStatement(e_2458) };
							return 'do ' + this.printStatement(e_2458) + ' while (' + this.printExpression(econd_2457) + ')';
						};
					}
				} break;
				
				case 13: {
					{
						const a_2460 = temp_2422[1];
						const op_2461 = temp_2422[2];
						const value_2462 = temp_2422[3];
						return this.printExpression(a_2460) + ' ' + Token.stringify(op_2461) + '= ' + this.printExpression(value_2462);
					}
				} break;
				
				case 14: {
					{
						const expr_2463 = temp_2422[1];
						const name_2464 = temp_2422[2];
						return this.printExpression(expr_2463) + '.' + name_2464;
					}
				} break;
				
				case 19: {
					{
						const expr_2465 = temp_2422[1];
						const cases_2466 = temp_2422[2];
						const statements_2467 = temp_2422[3];
						{
							let r_2468 = 'switch (' + this.printExpression(expr_2465) + ') {';
							let hasDefault = false;
							{
								let i_2469 = 0;
								let it_2470 = 0;
								let at_2471 = cases_2466.length;
								while (it_2470 < at_2471) {
									i_2469 = it_2470;
									it_2470++;
									if (cases_2466[i_2469].length > 0) {
										r_2468 += '\n' + this.tabs + 'case ';
										r_2468 += (() => {
											const result_2472 = [];
											const value_2473 = cases_2466[i_2469];
											for (const cc of $toIterator(value_2473)) result_2472.push(this.printExpression(cc));
											return result_2472;
										})().join(', ');
										r_2468 += ': ' + this.printStatement(statements_2467[i_2469]) + ';\n' + this.tabs;
									};
								};
							};
							{
								let i_2474 = 0;
								let it_2475 = 0;
								let at_2476 = cases_2466.length;
								while (it_2475 < at_2476) {
									i_2474 = it_2475;
									it_2475++;
									for (const cc of $toIterator(cases_2466[i_2474])) {
										const temp_2477 = cc;
										switch (temp_2477&&temp_2477[0]) {
										case 29: {
											hasDefault = true
										} break;
										};
									};
								};
							};
							if ((!hasDefault)) {
								let i_2478 = 0;
								let it_2479 = 0;
								let at_2480 = cases_2466.length;
								while (it_2479 < at_2480) {
									i_2478 = it_2479;
									it_2479++;
									if (cases_2466[i_2478].length == 0) {
										r_2468 += '\n' + this.tabs + 'default: ' + this.printStatement(statements_2467[i_2478]) + ';';
										r_2468 += '\n' + this.tabs;
										hasDefault = true;
									};
								};
							};
							if ((!hasDefault)) {
								r_2468 += '\n' + this.tabs + 'default: {};';
								r_2468 += '\n' + this.tabs;
							};
							return r_2468 + '}';
						};
					}
				} break;
				
				default: 
				console.error('Unknown statement kind:', ((() => {
					const result_2481 = s_2421;
					if (result_2481 != null) { return result_2481 };
					return [];
				})())[0])
				};
			};
			return '{/*<!-- undefined -->*/}';
		};
		printCallArguments(args_2482) { return '(' + (() => {
			const result_2483 = [];
			const value_2484 = args_2482;
			for (const a of $toIterator(value_2484)) result_2483.push(this.printExpression(a));
			return result_2483;
		})().join(', ') + ')' };
		printFunctionArguments(args_2485, defaults_2486, types_2487) { return '(' + (() => {
			const result_2488 = [];
			const value_2489 = args_2485.length;
			for (const a of $toIterator(value_2489)) result_2488.push(args_2485[a] + this.printType(types_2487[a]) + (((defaults_2486 != null && defaults_2486[a] != null))? (' = ' + this.printExpression(defaults_2486[a])) : ''));
			return result_2488;
		})().join(', ') + ')' };
		stringType(t_2490, prefix_2491) {
			const prefix_2492 = (prefix_2491)? (': ') : '';
			if (t_2490 == null) { return '' };
			if (t_2490 == null) { return prefix_2492 + 'Dynamic' };
			{
				const temp_2493 = t_2490;
				switch (temp_2493&&temp_2493[0]) {
				case 2: {
					{
						const name_2494 = temp_2493[1];
						const params_2495 = temp_2493[2];
						{
							if (name_2494 == 'Buffer') { return prefix_2492 + name_2494 };
							return prefix_2492 + name_2494 + '<' + (() => {
								const result_2496 = [];
								const value_2497 = ((() => {
									const result_2498 = params_2495;
									if (result_2498 != null) { return result_2498 };
									return [];
								})());
								for (const param of $toIterator(value_2497)) result_2496.push(this.stringType(param, false));
								return result_2496;
							})().join(', ') + '>';
						};
					}
				} break;
				
				case 1: {
					{
						const name_2499 = temp_2493[1];
						{
							if (name_2499 == 'Any') { return prefix_2492 + 'Dynamic' };
							return prefix_2492 + name_2499;
						};
					}
				} break;
				
				case 5: {
					return prefix_2492 + '{}'
				} break;
				
				case 0: {
					{
						const t_2500 = temp_2493[1];
						return prefix_2492 + 'Null<' + this.stringType(t_2500, false) + '>';
					}
				} break;
				};
			};
			return prefix_2492 + 'Dynamic';
		};
		printType(t_2501) {
			const type_2502 = this.stringType(t_2501, true);
			if (type_2502 == ': Array<Dynamic>') { return '' };
			return type_2502;
		};
		printNodeAsType(t_2503, prefix_2504) {
			const temp_2505 = t_2503;
			switch (temp_2505&&temp_2505[0]) {
			case 1: {
				{
					const name_2506 = temp_2505[1];
					return prefix_2504 + name_2506;
				}
			} break;
			
			case 31: {
				{
					const el_2507 = temp_2505[1];
					return prefix_2504 + 'Array<' + this.printNodeAsType(el_2507[0], '') + '>';
				}
			} break;
			
			case null: case undefined: {
				return prefix_2504 + 'Dynamic'
			} break;
			
			default: 
			return prefix_2504 + 'Dynamic'
			};
		};
		printExpression(e_2508) {
			{
				const temp_2509 = e_2508;
				switch (temp_2509&&temp_2509[0]) {
				case 6: {
					return 'null'
				} break;
				
				case 7: {
					return 'this'
				} break;
				
				case 5: {
					{
						const name_2510 = temp_2509[1];
						return name_2510;
					}
				} break;
				
				case 1: {
					{
						const v_2511 = temp_2509[1];
						return '' + v_2511;
					}
				} break;
				
				case 2: {
					{
						const v_2512 = temp_2509[1];
						return '' + v_2512;
					}
				} break;
				
				case 0: {
					{
						const s_2513 = temp_2509[1];
						{
							const s_2514 = s_2513.split('');
							const charsOut_2515 = [];
							while (s_2514.length > 0) {
								const temp_2516 = s_2514[0];
								switch (temp_2516) {
								case '$': {
									{
										charsOut_2515.push('$');
										charsOut_2515.push('$');
										s_2514.shift();
									}
								} break;
								
								case '\'': {
									{
										charsOut_2515.push('\\');
										charsOut_2515.push('\'');
										s_2514.shift();
									}
								} break;
								
								case '\n': {
									{
										charsOut_2515.push('\\n');
										s_2514.shift();
									}
								} break;
								
								case '\r': {
									{
										charsOut_2515.push('\\r');
										s_2514.shift();
									}
								} break;
								
								case '\\': {
									{
										s_2514.shift();
										if (s_2514[0] == '\'') {
											charsOut_2515.push('\\');
											charsOut_2515.push('\'');
											s_2514.shift();
										} else {
											charsOut_2515.push('\\');
										};
									}
								} break;
								
								default: 
								{
									charsOut_2515.push(s_2514[0]);
									s_2514.shift();
								}
								};
							};
							return '\'' + charsOut_2515.join('') + '\'';
						};
					}
				} break;
				
				case 3: {
					return 'true'
				} break;
				
				case 4: {
					return 'false'
				} break;
				
				case 8: {
					{
						const expr_2517 = temp_2509[1];
						const name_2518 = temp_2509[2];
						return this.printExpression(expr_2517) + '.' + name_2518;
					}
				} break;
				
				case 9: {
					{
						const e_2519 = temp_2509[1];
						const args_2520 = temp_2509[2];
						return this.printExpression(e_2519) + this.printCallArguments(args_2520);
					}
				} break;
				
				case 12: {
					{
						const name_2521 = temp_2509[1];
						const expr_2522 = temp_2509[2];
						const args_2523 = temp_2509[3];
						const defaults_2524 = temp_2509[4];
						const funcType_2525 = temp_2509[5];
						{
							const name_2526 = (() => {
								const result_2527 = name_2521;
								if (result_2527 != null) { return result_2527 };
								return '';
							})();
							const returns_2528 = this.project.typer.typeVoid;
							const types_2529 = [];
							return 'function ' + name_2526 + this.printFunctionArguments(args_2523, defaults_2524, types_2529) + this.printType(returns_2528) + ' ' + this.printBlock(expr_2522);
						};
					}
				} break;
				
				case 13: {
					{
						const expr_2530 = temp_2509[1];
						const args_2531 = temp_2509[2];
						const defaults_2532 = temp_2509[3];
						const types_2533 = temp_2509[4];
						const returns_2534 = temp_2509[5];
						return 'function ' + this.printFunctionArguments(args_2531, defaults_2532, types_2533) + this.printType(returns_2534) + ' return ' + this.printExpression(expr_2530);
					}
				} break;
				
				case 10: {
					{
						const e_2535 = temp_2509[1];
						const args_2536 = temp_2509[2];
						return 'new ' + this.printExpression(e_2535) + this.printCallArguments(args_2536);
					}
				} break;
				
				case 16: {
					{
						const el_2537 = temp_2509[1];
						return '[' + (() => {
							const result_2538 = [];
							const value_2539 = el_2537;
							for (const a of $toIterator(value_2539)) result_2538.push(this.printExpression(a));
							return result_2538;
						})().join(', ') + ']';
					}
				} break;
				
				case 18: {
					{
						const op_2540 = temp_2509[1];
						const postfix_2541 = temp_2509[2];
						const e_2542 = temp_2509[3];
						{
							if (postfix_2541) { return this.printExpression(e_2542) + Token.stringify(op_2540) };
							return Token.stringify(op_2540) + this.printExpression(e_2542);
						};
					}
				} break;
				
				case 19: {
					{
						const nullable_2543 = temp_2509[1];
						const othewise_2544 = temp_2509[2];
						return '(function(){var _ = ' + this.printExpression(nullable_2543) + '; if (_ != null) return _; return ' + this.printExpression(othewise_2544) + ';}())';
					}
				} break;
				
				case 14: {
					{
						const e_2545 = temp_2509[1];
						return '(' + this.printExpression(e_2545) + ')';
					}
				} break;
				
				case 11: {
					{
						const a_2546 = temp_2509[1];
						const op_2547 = temp_2509[2];
						const b_2548 = temp_2509[3];
						return this.printExpression(a_2546) + ' ' + Token.stringify(op_2547) + ' ' + this.printExpression(b_2548);
					}
				} break;
				
				case 21: {
					{
						const expr_2549 = temp_2509[1];
						const index_2550 = temp_2509[2];
						return this.printExpression(expr_2549) + '[' + this.printExpression(index_2550) + ']';
					}
				} break;
				
				case 20: {
					{
						const econd_2551 = temp_2509[1];
						const eif_2552 = temp_2509[2];
						const eelse_2553 = temp_2509[3];
						{
							let r_2554 = '';
							r_2554 += '(' + this.printExpression(econd_2551) + ')?';
							r_2554 += ' (' + this.printExpression(eif_2552) + ')';
							r_2554 += ' : ' + this.printExpression(eelse_2553);
							return r_2554;
						};
					}
				} break;
				
				case 15: {
					{
						const names_2555 = temp_2509[1];
						const el_2556 = temp_2509[2];
						return '{' + (() => {
							const result_2557 = [];
							const value_2558 = el_2556.length;
							for (const i of $toIterator(value_2558)) result_2557.push(((names_2555[i]) + ':' + this.printExpression(el_2556[i])));
							return result_2557;
						})().join(', ') + '}';
					}
				} break;
				
				case 17: {
					{
						const keys_2559 = temp_2509[1];
						const values_2560 = temp_2509[2];
						{
							if (keys_2559.length == 0) { return 'new Map()' };
							return '[' + (() => {
								const result_2561 = [];
								const value_2562 = keys_2559.length;
								for (const i of $toIterator(value_2562)) result_2561.push(this.printExpression(keys_2559[i]) + ' => ' + this.printExpression(values_2560[i]));
								return result_2561;
							})().join(', ') + ']';
						};
					}
				} break;
				
				case 24: {
					{
						const a_2563 = temp_2509[1];
						const op_2564 = temp_2509[2];
						const value_2565 = temp_2509[3];
						return this.printExpression(a_2563) + ' ' + Token.stringify(op_2564) + '= ' + this.printExpression(value_2565);
					}
				} break;
				
				case 25: {
					{
						const kind_2566 = temp_2509[1];
						const args_2567 = temp_2509[2];
						const s_2568 = temp_2509[3];
						{
							const temp_2569 = kind_2566;
							switch (temp_2569) {
							case 0: {
								return '((' + this.printExpression(args_2567[0]) + ') ' + s_2568 + ' (' + this.printExpression(args_2567[1]) + '))'
							} break;
							
							case 1: {
								return s_2568 + this.printCallArguments(args_2567)
							} break;
							
							case 2: {
								return '(' + s_2568 + '(' + this.printExpression(args_2567[0]) + '))'
							} break;
							
							case 3: {
								return '((' + this.printExpression(args_2567[1]) + ')' + s_2568 + ')'
							} break;
							};
						};
					}
				} break;
				
				case 29: {
					return '_'
				} break;
				
				default: 
				console.error('Unknown expression kind:', ((() => {
					const result_2570 = e_2508;
					if (result_2570 != null) { return result_2570 };
					return [];
				})())[0], e_2508)
				};
			};
			return '{/*<!-- undefined -->*/}';
		};
	}
	GenHaxe.spawn = () => { return new GenHaxe() };
	var NiceComplexEnum = class {
		constructor() { 
			this.staticMethods = []
			this.staticVars = []
		{
		} };
	}
	var NiceSimpleEnum = class {
		constructor() { 
			this.staticMethods = []
			this.staticVars = []
		{
		} };
	}
	var NiceClass = class {
		constructor() { 
			this.staticMethods = []
			this.staticVars = []
			this.methods = []
			this.vars = []
			this.property = []
			this.jsRequire = null
			this.jsNative = null
		{
		} };
	}
	var NiceProject = class {
		constructor() { 
			this.interfaces = []
			this.classes = []
			this.enumsSimple = []
			this.enumsComplex = []
			this.globalVars = []
			this.globalFuncs = []
			this.init = []
		{
		} };
	}
	var DataHelper = class {
	}
	DataHelper.varName = (v_2698) => {
			const temp_2699 = v_2698;
			switch (temp_2699&&temp_2699[0]) {
			case 23: {
				{
					const name_2700 = temp_2699[1];
					return name_2700;
				}
			} break;
			
			default: 
			throw ('varName got not a TVar, but `' + (v_2698) + '`')
			};
		};
	DataHelper.nameOf = (v_2701) => {
			const temp_2702 = v_2701;
			switch (temp_2702&&temp_2702[0]) {
			case 44: {
				{
					const node_2703 = temp_2702[1];
					return DataHelper.nameOf(node_2703);
				}
			} break;
			
			case 26: {
				{
					const node_2704 = temp_2702[1];
					return DataHelper.nameOf(node_2704);
				}
			} break;
			
			case 23: {
				{
					const name_2705 = temp_2702[1];
					return name_2705;
				}
			} break;
			
			case 37: {
				{
					const t_2706 = temp_2702[1];
					{
						{
							const temp_2707 = t_2706;
							switch (temp_2707&&temp_2707[0]) {
							case 1: {
								{
									const name_2708 = temp_2707[1];
									return name_2708;
								}
							} break;
							
							case 2: {
								{
									const name_2709 = temp_2707[1];
									return name_2709;
								}
							} break;
							};
						};
						throw 'unreachable';
					};
				}
			} break;
			
			case 21: {
				{
					const name_2710 = temp_2702[1];
					return name_2710;
				}
			} break;
			
			case 25: {
				{
					const t_2711 = temp_2702[1];
					{
						{
							const temp_2712 = t_2711;
							switch (temp_2712&&temp_2712[0]) {
							case 1: {
								{
									const name_2713 = temp_2712[1];
									return name_2713;
								}
							} break;
							
							case 2: {
								{
									const name_2714 = temp_2712[1];
									return name_2714;
								}
							} break;
							};
						};
						throw 'unreachable';
					};
				}
			} break;
			
			case 8: {
				{
					const t_2715 = temp_2702[1];
					{
						const temp_2716 = t_2715;
						switch (temp_2716&&temp_2716[0]) {
						case 1: {
							{
								const name_2717 = temp_2716[1];
								return name_2717;
							}
						} break;
						
						case 2: {
							{
								const name_2718 = temp_2716[1];
								return name_2718;
							}
						} break;
						};
					};
				}
			} break;
			
			case 43: {
				{
					const field_2719 = temp_2702[1];
					return DataHelper.nameOf(field_2719);
				}
			} break;
			
			default: 
			throw ('nameOf expected named node, but got `' + (v_2701) + '`')
			};
		};
	DataHelper.asStringAttValue = (a_2720, index_2721) => {
			const temp_2722 = a_2720.values[index_2721];
			switch (temp_2722&&temp_2722[0]) {
			case null: case undefined: {
				throw 'Got null, not a string'
			} break;
			
			case 0: {
				{
					const s_2723 = temp_2722[1];
					return s_2723;
				}
			} break;
			
			default: 
			throw ('Got `' + (a_2720.values[index_2721]) + '`, not a string')
			};
		};
	DataHelper.getLastOfBlock = (block_2724) => {
			const temp_2725 = block_2724;
			switch (temp_2725&&temp_2725[0]) {
			case null: case undefined: {
				throw 'Got null, not a block'
			} break;
			
			case 11: {
				{
					const el_2726 = temp_2725[1];
					return el_2726[el_2726.length - 1];
				}
			} break;
			
			default: 
			throw ('Got `' + (block_2724) + '`, not a block')
			};
		};
	DataHelper.isVoidValue = (block_2727) => {
			{
				const temp_2728 = block_2727;
				switch (temp_2728&&temp_2728[0]) {
				case null: case undefined: {
					return true
				} break;
				
				case 15: {
					return true
				} break;
				
				case 17: {
					return true
				} break;
				
				case 18: {
					return true
				} break;
				
				case 23: {
					return true
				} break;
				
				case 13: {
					{
						const eelse_2729 = temp_2728[3];
						if (eelse_2729 == null) { return true };
					}
				} break;
				
				case 37: {
					return true
				} break;
				
				case 25: {
					return true
				} break;
				
				case 34: {
					return true
				} break;
				
				case 11: {
					{
						const el_2730 = temp_2728[1];
						{
							if (el_2730.length == 0) { return true };
							return DataHelper.isVoidValue(el_2730[el_2730.length - 1]);
						};
					}
				} break;
				
				default: 
				return false
				};
			};
			return false;
		};
	DataHelper.extractTypeName = (t_2731) => {
			const temp_2732 = t_2731;
			switch (temp_2732&&temp_2732[0]) {
			case 1: {
				{
					const name_2733 = temp_2732[1];
					return name_2733;
				}
			} break;
			
			case 2: {
				{
					const name_2734 = temp_2732[1];
					return name_2734;
				}
			} break;
			
			case null: case undefined: {
				return null
			} break;
			
			default: 
			throw 'Type has no name: ' + t_2731
			};
		};
	DataHelper.getAttribute = (atts_2735, name_2736) => {
			if (atts_2735 != null && atts_2735.length > 0) { for (const att of $toIterator(atts_2735)) {
				if (att.name == name_2736) { return att };
			} };
			return null;
		};
	var NodeData = class {
		constructor(atLine, atColumn, atFile) { 
		{
			this.line = atLine;
			this.column = atColumn;
			this.fileName = atFile;
		} };
	}
	var Project = class {
	}
	Project.mapAttributes = new Map()
	Project.mapNames = new Map()
	Project.data = new Map()
	Project.hints = []
	Project.defines = {}
	var Attribute = class {
		constructor(name_2870, values_2871) { 
		{
			this.name = name_2870;
			this.values = values_2871;
		} };
	}
	var EnumType = class {
		constructor() { 
			this.fieldNames = []
			this.tagBindVars = []
			this.tagBindVarsNames = []
			this.fieldStatic = []
			this.fieldEnumConstructor = []
			this.fieldType = []
		{
		} };
	}
	var ClassType = class {
		constructor() { 
			this.owner = null
			this.fieldNames = []
			this.fieldRenames = []
			this.fieldStatic = []
			this.fieldInitialized = []
			this.protected = []
			this.immutable = []
			this.constructor = (-1)
			this.indexKeyType = null
			this.indexValueType = null
			this.fields = new Map()
			this.genericParams = []
			this.useless = true
			this.instanceCache = /*ClassInstance*/[4,this,null]
			this.genericCache = []
		{
		} };
		instantiate() { return this.instanceCache };
		instantiateGeneric(params_2872) {
			for (const cached of $toIterator(this.genericCache)) {
				if (cached.length != (params_2872.length + 1)) { continue };
				let found_2873 = true;
				{
					let i_2874 = 0;
					let it_2875 = 0;
					let at_2876 = cached.length - 1;
					while (it_2875 < at_2876) {
						i_2874 = it_2875;
						it_2875++;
						{
							if (params_2872[i_2874] != cached[i_2874 + 1]) {
								found_2873 = false;
								break;
							};
						};
					};
				};
				if (found_2873) {
					const result_2877 = cached[0];
					return result_2877;
				};
			};
			const result_2878 = /*ClassInstance*/[4,this,params_2872];
			const cache = [result_2878];
			for (const param of $toIterator(params_2872)) cache.push(param);
			this.genericCache.push(cache);
			return result_2878;
		};
	}
	var CompilerError = class {
		constructor(except, details, line_2916, column_2917, filename_2918) { 
		{
			this.exception = except;
			this.details = ((details == null))? ('') : details;
			this.line = ((line_2916 == null))? (0) : line_2916;
			this.column = ((column_2917 == null))? (0) : column_2917;
			this.fileName = ((filename_2918 == null))? ('') : filename_2918;
		} };
		toString() { return '[' + this.fileName + ':' + this.line + ':' + this.column + ']: ' + this.details };
	}
	var Hint = class {
		constructor(code_2919, details_2920, position_2921) { 
		{
			this.code = code_2919;
			this.details = details_2920;
			this.at = position_2921;
		} };
		toString() { return '[' + this.at.fileName + ':' + this.at.line + ':' + this.at.column + ']: Hint#' + this.code + ': ' + this.details };
	}
	var Main = class {
		init() {
			if (Fs.existsSync('hexa.json')) {
				const create = Main.question('Hexa package \'hexa.json\' already exists here. Create new? (no)');
				if ((create.toLowerCase() != 'yes') && (create.toLowerCase() != 'y')) { process_19.exit(1) };
			};
			let currentDirTmp = process.cwd().split(path.sep);
			let packageFileName = currentDirTmp.splice(0, (-1)).join(path.sep) + path.sep + 'hexa.json';
			let currentDir = currentDirTmp[currentDirTmp.length - 1];
			let name_2932 = Main.question(('Enter package name (' + (currentDir) + '): '));
			if (name_2932 == '') { name_2932 = currentDir };
			let version_2933 = Main.question('Enter package version (1.0.0): ');
			if (version_2933 == '') { version_2933 = '1.0.0' };
			let description = Main.question('Enter package description: ');
			let main = Main.question('Enter main file (main.hexa): ');
			if (main == '') { main = 'main.hexa' };
			const target_2934 = {name:'default', generator:'js', output:name_2932, options:[]};
			const generatorstr = Main.question('Enter generator type (JavaScript):\n1. JavaScript\n2. C\n3. Haxe\n');
			if (generatorstr.toUpperCase() == 'C' || generatorstr == '2') { target_2934.generator = 'native' } else if (generatorstr.toUpperCase() == 'HAXE' || generatorstr == '3') { target_2934.generator = 'haxe' } else {
				target_2934.output += '.js';
				const option = Main.question('Select standard library (no library):\n1. no library\n2. nodejs\n3. browser\n');
				{
					const temp_2935 = option;
					switch (temp_2935) {
					case '2': {
						target_2934.options.push('nodejs')
					} break;
					
					case '3': {
						target_2934.options.push('browser')
					} break;
					};
				};
			};
			while ((!(main.endsWith('.hexa')))) {
				process_19.stdout.write('Wrong file name. Must end with \'.hexa\'.\n');
				main = Main.question('Enter main file (main.hexa): ');
			};
			const author = Main.question('Enter package author name: ');
			const license = Main.question('Enter license: ');
			const pack = {name:name_2932, version:version_2933, description:description, author:author, license:license, targets:[target_2934], files:[main]};
			const extras = [];
			let addGit = false;
			if (Fs.existsSync('.git')) { if ((!Fs.existsSync('.gitignore')) || (!Fs.existsSync('.gitattributes'))) { if (['y', 'yes', ''].includes(Main.question('Create additional git files? (.gitignore, .gitattributes)').toLowerCase().trim())) {
				if ((!Fs.existsSync('.gitignore'))) { extras.push('.gitignore') };
				if ((!Fs.existsSync('.gitattributes'))) { extras.push('.gitattributes') };
				addGit = true;
			} } };
			const addMain = Fs.existsSync(main) == false;
			if (addMain) { extras.push(main) };
			const packageStr = JSON.stringify(pack, null, '\t').split('\r\n').join('\n').split('\n').join('\r\n');
			const extrasStr = extras.length > (0)? ('\nAnd \'' + extras.join('\', \'') + '\'') : '';
			const answ = Main.question(('About to write to: ' + (packageFileName) + ':\n' + (packageStr) + '' + (extrasStr) + '\nIs this ok? (yes)'));
			if ((answ != '') && (answ.toLowerCase() != 'yes') && (answ.toLowerCase() != 'y')) {
				console.log('Exiting without changes');
				process_19.exit(1);
			};
			Fs.writeFileSync('hexa.json', packageStr + '\r\n');
			if ((addMain) && ((!Fs.existsSync(main)))) { Fs.writeFileSync(main, 'console.log("Thank you for choosing Hexa")') };
			if ((addGit) && ((!Fs.existsSync('.gitattributes')))) { Fs.writeFileSync('.gitattributes', ['# Auto detect text files and perform LF normalization', '* text=auto', ''].join('\r\n')) };
			if ((addGit) && ((!Fs.existsSync('.gitignore')))) { Fs.writeFileSync('.gitignore', ['# Mac & Win', '*~', '._*', '*DS_Store*', '.DS_Store', '.DS_Store?', '.Spotlight-V100', '.Trashes', 'ehthumbs.db', 'Thumbs.db', '*Thumbs.db', '__MACOSX', '', '# Custom', '*.map', target_2934.output, 'node_modules', ''].join('\r\n')) };
			process_19.stdout.write('Hexa package initialized!');
		};
		symlink() {
			const temp_2936 = process.platform;
			switch (temp_2936) {
			case 'linux': {
				{
					Fs.renameSync('./hexa', '/usr/bin/hexa');
					console.log('Symlinked successfully!');
				}
			} break;
			
			default: 
			{
				console.log(('Cannot symlink on ' + (process.platform) + '. You must add hexa to your PATH manually.'));
				process_19.exit(1);
			}
			};
		};
		processFile(target_2937) {
			const content = Fs.readFileSync(target_2937);
			const tokens_2938 = Lexer.tokenize(content, target_2937);
			if (tokens_2938.length > 0) { this.lines += tokens_2938.line[tokens_2938.length - 1] };
			const parsed_2939 = Parser.parseNodes(tokens_2938);
			return parsed_2939;
		};
		simplyCompileToJs(buffer_2940, path_2941) {
			const input_2942 = ({files:[]});
			const js = this.processFile(__dirname + '/library/js/js.hexa');
			const nodejs = this.processFile(__dirname + '/library/nodejs/nodejs.hexa');
			const tokens_2943 = Lexer.tokenize(buffer_2940, path_2941);
			const parser_2944 = Parser.parseNodes(tokens_2943);
			const collected_2945 = [js, nodejs, parser_2944];
			if (parser_2944 == null) { return null };
			const files_2946 = collected_2945;
			const typer = new Typer();
			typer.fillFiles(files_2946);
			const normalizer_2947 = new Normalizer();
			const generator = new GenJs();
			normalizer_2947.keywords = generator.reserved;
			normalizer_2947.collected = files_2946;
			normalizer_2947.nativeEnums = generator.nativeEnums;
			normalizer_2947.package = input_2942;
			{
				let step_2948 = 0;
				const randomSeed = input_2942.randomSeed;
				if (step_2948 == 0 && randomSeed != null) { step_2948 = 1 };
				if (step_2948 == 1) { normalizer_2947.id = randomSeed };
			};
			{
				let step_2949 = 0;
				const globalAccessor = generator.globalAccessor;
				if (step_2949 == 0 && globalAccessor != null) { step_2949 = 1 };
				if (step_2949 == 1) { normalizer_2947.globalAccessor = globalAccessor };
			};
			normalizer_2947.typer = typer;
			const normal = normalizer_2947.normalize();
			return generator.perform(normal);
		};
		repl() {
			console.log('\x1b[35m' + ('Hexa ' + (version) + ' on node.js ') + process_19.versions.node + '\x1b[0m');
			console.log('\x1b[33mTo print something onto screen use `console.log(value)`\x1b[0m');
			console.log('\x1b[33mTo clear REPL memory use `.clear`\x1b[0m');
			console.log('\x1b[33mTo close REPL use `.exit`\x1b[0m');
			let linesAll = [];
			let linesLatest = [];
			while (true) {
				let line_2950 = Main.question('\x1b[32m> \x1b[0m');
				if (line_2950 == '.clear') {
					linesAll = [];
					linesLatest = [];
					continue;
				};
				if (line_2950 == '.exit') { return };
				if (line_2950.length == 0) { continue };
				linesLatest.push(line_2950);
				try {
					let code_2952 = '"use strict"\r\n';
					try {
						const content_2955 = linesAll.join('\n') + '\n' + linesLatest.join('\n');
						const compiled = this.simplyCompileToJs(Buffer.from(content_2955), 'REPL');
						if (compiled == null) { continue };
						{
							let step_2956 = 0;
							const compiled_2957 = compiled;
							if (step_2956 == 0 && compiled_2957 != null) { step_2956 = 1 };
							if (step_2956 == 1) { code_2952 = compiled_2957 };
						};
					} catch (temp_2953) {
						if (true) { 
						const e = temp_2953
						{
							const error_2954 = '' + e;
							if (error_2954.indexOf('<!--eof-->') == (-1)) {
								linesLatest = [];
								console.error('\x1b[31mCompilation Error: ' + e, '\x1b[0m');
							} else {
								process_19.stdout.write('\x1b[32m>\x1b[0m');
							};
							continue;
						} } else
						
						throw temp_2953;
					};
					for (const line of $toIterator(linesLatest)) linesAll.push(line);
					linesLatest = [];
					const result_2958 = eval(code_2952);
				} catch (temp_2951) {
					if (true) { 
					const e = temp_2951
					{
						console.error('Error: ' + e);
					} } else
					
					throw temp_2951;
				};
			};
		};
		processFiles(targets) {
			let res_2959 = [];
			for (const target of $toIterator(targets)) {
				if ((!Fs.existsSync(target))) {
					console.log(('No such source file on disk `' + (target) + '`'));
					continue;
				};
				try { res_2959.push(this.processFile(target)) } catch (temp_2960) {
					if (true) { 
					const e = temp_2960
					{
						console.log(e.toString());
					} } else
					
					throw temp_2960;
				};
			};
			if (targets.length != res_2959.length) {
				console.log('[Stopped on errors]');
				process_19.exit(1);
			};
			return res_2959;
		};
		incorrect(what_2961) {
			process_19.stdout.write(('Incorrect package file! Field `' + (what_2961) + '` does not exists\n'));
			process_19.exit(1);
		};
		loadPackage(filename_2962, target_2963) {
			const pack_2964 = JSON.parse(Fs.readFileSync(path.resolve(filename_2962)).toString('utf8').split('\r\n').join('\n'));
			if (pack_2964.name == null) { this.incorrect('name') };
			if (pack_2964.targets == null) { this.incorrect('targets') };
			{
				let step_2965 = 0;
				const define = pack_2964.define;
				if (step_2965 == 0 && define != null) { step_2965 = 1 };
				if (step_2965 == 1) { for (const key of $toIterator(Reflect.ownKeys(define))) {
					if ((!Reflect.has(Project.defines, key))) { Reflect.set(Project.defines, key, Reflect.get(define, key)) };
				} };
			};
			const t_2966 = (() => {
				{
					let t_2967 = 0;
					let it_2968 = 0;
					let at_2969 = pack_2964.targets.length;
					while (it_2968 < at_2969) {
						t_2967 = it_2968;
						it_2968++;
						{
							if (pack_2964.targets[t_2967].name == target_2963) {
								this.targetIndex = t_2967;
								return pack_2964.targets[t_2967];
							};
						};
					};
				};
				process_19.stdout.write(('Cannot find `' + (target_2963) + '` target in package file\n'));
				process_19.exit(1);
			})();
			const generator_2970 = availableGenerators(t_2966.generator);
			if (generator_2970 == null) {
				process_19.stdout.write(('Generator `' + (t_2966.generator) + '` not available or not supported by this compiler version\n'));
				process_19.exit(1);
			};
			if (pack_2964.files == null) { pack_2964.files = [] };
			if (pack_2964.noLib == true) {} else {
				setLibrary(generator_2970, t_2966.options, pack_2964.files, Project.defines);
				{
					let step_2971 = 0;
					const extra = pack_2964.targets[this.targetIndex].files;
					if (step_2971 == 0 && extra != null) { step_2971 = 1 };
					if (step_2971 == 1) { for (const file of $toIterator(extra)) pack_2964.files.push(file) };
				};
			};
			if (pack_2964.addLicenseNoticeToOutput == null) { pack_2964.addLicenseNoticeToOutput = true };
			return pack_2964;
		};
		constructor() { 
			this.lines = 0
			this.targetName = 'default'
			this.targetIndex = 0
		{
			const begin = Date.now();
			Lexer.init();
			if (process_19.argv[0].endsWith('node.exe') || process_19.argv[0].endsWith('node')) {
				process_19.argv.shift();
				process_19.argv.shift();
			} else if (process_19.argv[0].endsWith('.exe')) { process_19.argv.shift() };
			const defines_2972 = {};
			while (process_19.argv[0] == '--define') {
				if (process_19.argv.length < 2) {
					console.log('Usage: `--define name=value`');
					process_19.exit(1);
				};
				process_19.argv.shift();
				const kv = process_19.argv.shift().split('=');
				if (kv.length < 2) {
					console.log('Usage: `--define name=value`');
					process_19.exit(1);
				};
				const k_2973 = kv[0];
				const v_2974 = JSON.parse(kv[1]);
				defines_2972[k_2973] = v_2974;
			};
			Project.defines = defines_2972;
			if (process_19.argv[0] == '--syntax-linter') {
				if (process_19.argv.length < 2) { console.log('Usage: `hexa --syntax-linter file.hexa`') } else {
					const file = process_19.argv[1];
					try {
						const content_2976 = Fs.readFileSync(file);
						try {
							const tokens_2978 = Lexer.tokenize(content_2976, file);
							try { const parser_2980 = Parser.parseNodes(tokens_2978) } catch (temp_2979) {
								if (true) { 
								const e = temp_2979
								console.log(('' + (e) + '')) } else
								
								throw temp_2979;
							};
						} catch (temp_2977) {
							if (true) { 
							const e = temp_2977
							console.log(('' + (e) + '')) } else
							
							throw temp_2977;
						};
					} catch (temp_2975) {
						if (true) { 
						const e = temp_2975
						console.log(('ERROR: Unable to open file ' + (file) + '')) } else
						
						throw temp_2975;
					};
				};
				process_19.exit(0);
			};
			const ignoreArguments = (fromIndex_2981) => {
				if (fromIndex_2981 == process_19.argv.length) { return };
				const args_2982 = [];
				const count = process_19.argv.length - fromIndex_2981;
				let i_2983 = 0;
				while (i_2983 < count) args_2982.push(process_19.argv[(i_2983++) + fromIndex_2981]);
				console.log('Arguments `' + args_2982.join('`, `') + '` ignored');
			};
			if (process_19.argv[0] == '--version') {
				console.log(('Hexa ' + (version) + ' on node.js ') + process_19.versions.node);
				ignoreArguments(1);
				process_19.exit(0);
			} else if (process_19.argv[0] == '--help') {
				console.log('Usage: `hexa project.json` or `hexa init`');
				ignoreArguments(3);
				process_19.exit(0);
			} else if (process_19.argv[0] == null) {
				this.repl();
				process_19.exit(0);
			} else if (process_19.argv[0] == 'init') {
				this.init();
				ignoreArguments(3);
				process_19.exit(0);
			} else if (process_19.argv[0] == 'symlink') {
				this.symlink();
				process_19.exit(0);
			};
			let currentFile = path.resolve(process_19.argv[0]);
			let currentParsedFile = path.parse(currentFile);
			let input_2984 = (null);
			let packageFolder = currentParsedFile.dir;
			if (currentParsedFile.ext == '.json') {
				process.argv.shift();
				if (process.argv[0] == '--target') {
					process.argv.shift();
					this.targetName = (() => {
						const result_2985 = process.argv[0];
						if (result_2985 != null) { return result_2985 };
						return 'default';
					})();
					process.argv.shift();
				};
				input_2984 = this.loadPackage(currentFile, this.targetName);
				ignoreArguments(0);
				if (this.targetName != 'default') { console.log(('[Building ' + (input_2984.name) + ' - ' + (this.targetName) + ']')) } else console.log(('[Building ' + (input_2984.name) + ']'));
			} else if ((Fs.existsSync(currentFile)) && (Fs.lstatSync(currentFile).isDirectory())) {
				ignoreArguments(3);
				input_2984 = this.loadPackage(currentFile + path.sep + 'hexa.json', this.targetName);
				packageFolder = currentFile;
			} else if (currentParsedFile.ext == '.hexa') {
				try { eval(this.simplyCompileToJs(Fs.readFileSync(currentFile), currentFile)) } catch (temp_2986) {
					if (true) { 
					const e = temp_2986
					{
						console.error('' + e);
					} } else
					
					throw temp_2986;
				};
				process_19.exit(0);
				return;
			} else {
				console.error(('Unknown command: ' + (process_19.argv[0]) + ''));
				console.error('Try --help');
				process_19.exit(1);
				return;
			};
			let files_2987 = [];
			if (input_2984.files != null) {
				const fileList = input_2984.files.map((file_2988) => {
					if (file_2988.startsWith('/') || file_2988.charAt(1) == ':') { return path.resolve(file_2988) };
					return path.resolve(packageFolder + path.sep + file_2988);
				});
				files_2987 = this.processFiles(fileList);
			};
			const typer_2989 = new Typer();
			try { typer_2989.fillFiles(files_2987) } catch (temp_2990) {
				if (true) { 
				const e = temp_2990
				{
					console.log(e.toString());
					process_19.exit(1);
				} } else
				
				throw temp_2990;
			};
			const normalizer_2991 = new Normalizer();
			const generators = new Map();
			const registerTarget = (name_2992, generator_2993) => {
				{
					let step_2994 = 0;
					const generator_2995 = generators.get(name_2992);
					if (step_2994 == 0 && generator_2995 != null) { step_2994 = 1 };
					if (step_2994 == 1) { console.log(('Note: generator `' + (name_2992) + '` was overridden')) };
				};
				generators.set(name_2992, generator_2993);
			};
			registerTarget('js', GenJs.spawn);
			registerTarget('haxe', GenHaxe.spawn);
			registerTarget('native', GenCxx.spawn);
			{
				let step_2996 = 0;
				const generatorName = input_2984.targets[this.targetIndex].generator;
				if (step_2996 == 0 && generatorName != null) { step_2996 = 1 };
				if (step_2996 == 1) {
					let step_2997 = 0;
					const generatorSpawner = generators.get(generatorName);
					if (step_2997 == 0 && generatorSpawner != null) { step_2997 = 1 };
					if (step_2997 == 1) {
						const generator_2998 = generatorSpawner();
						const target_2999 = packageFolder + path.sep + path.parse(input_2984.targets[this.targetIndex].output).name + generator_2998.extension;
						const target_3000 = path.join(packageFolder, input_2984.targets[this.targetIndex].output);
						normalizer_2991.keywords = generator_2998.reserved;
						normalizer_2991.collected = files_2987;
						normalizer_2991.nativeEnums = generator_2998.nativeEnums;
						normalizer_2991.reservedGlobals = (() => {
							const result_3001 = generator_2998.reservedGlobals;
							if (result_3001 != null) { return result_3001 };
							return normalizer_2991.reservedGlobals;
						})();
						normalizer_2991.package = input_2984;
						{
							let step_3002 = 0;
							const randomSeed_3003 = input_2984.randomSeed;
							if (step_3002 == 0 && randomSeed_3003 != null) { step_3002 = 1 };
							if (step_3002 == 1) { normalizer_2991.id = randomSeed_3003 };
						};
						{
							let step_3004 = 0;
							const globalAccessor_3005 = generator_2998.globalAccessor;
							if (step_3004 == 0 && globalAccessor_3005 != null) { step_3004 = 1 };
							if (step_3004 == 1) { normalizer_2991.globalAccessor = globalAccessor_3005 };
						};
						normalizer_2991.typer = typer_2989;
						const normal_3006 = normalizer_2991.normalize();
						for (const hint of $toIterator(Project.hints)) {
							console.log(hint.toString());
						};
						const outs = generator_2998.perform(normal_3006);
						Fs.writeFileSync(target_3000, outs);
					} else {
						console.log(('Generator for `' + (generatorName) + '` is not registered.'));
						process_19.exit(1);
					};
				} else {
					console.log('Generator is not defined or unknown. Is there `target.generator` field in `hexa.json`?');
					process_19.exit(1);
				};
			};
			const delta = Date.now() - begin;
			const lps = Math.round(this.lines / (delta / 1000));
			console.log(('[Finished in ' + (delta) + ' ms, ' + (this.lines) + ' lines, ' + (lps) + ' lines per second]'));
			process_19.stdout.once('drain', () => { process_19.exit(0) });
			process_19.stdout.write('');
		} };
	}
	Main.question = (query) => {
			process_19.stdout.write(query);
			let bufsize_2929 = 256;
			let buf = new Buffer(bufsize_2929);
			let bytesRead = 0;
			const stdin = ((process.platform == 'win32'))? (process_19.stdin.fd) : Fs.openSync('/dev/stdin', 'rs');
			try { bytesRead = Fs.readSync(stdin, buf, 0, bufsize_2929) } catch (temp_2930) {
				if (true) { 
				const e = temp_2930
				{
					const e_2931 = e;
					if (e_2931.code == 'EAGAIN') { return 'ERROR: interactive stdin input not supported.' };
					if (e_2931.code == 'EOF') { return '' };
					throw e_2931;
				} } else
				
				throw temp_2930;
			};
			if (bytesRead == 0) { return '' };
			const answer = buf.toString('utf8', 0, bytesRead).trim();
			return answer;
		};
	function btoa(text_33) { return new Buffer(text_33, 'binary').toString('base64') };
	function atob(base64) { return new Buffer(base64, 'base64').toString('binary') };
	function hasOwnProperty(object_101, name_102) { return object_101.hasOwnProperty(name_102) };
	function setLibrary(target_2922, options, files, defines) {
			const temp_2923 = target_2922;
			switch (temp_2923) {
			case 'JavaScript': {
				{
					defines.js = (() => {
						const result_2924 = defines.js;
						if (result_2924 != null) { return result_2924 };
						return true;
					})();
					files.unshift(path.resolve(__dirname + '/library/js/js.hexa'));
					if (options.includes('nodejs')) { files.unshift(path.resolve(__dirname + '/library/nodejs/nodejs.hexa')) };
					if (options.includes('browser')) { files.unshift(path.resolve(__dirname + '/library/browser/html.hexa')) };
				}
			} break;
			
			case 'Native': {
				{
					defines.native = (() => {
						const result_2925 = defines.native;
						if (result_2925 != null) { return result_2925 };
						return true;
					})();
					files.unshift(path.resolve(__dirname + '/library/c/c.hexa'));
				}
			} break;
			
			case 'Haxe': {
				{
					defines.haxe = (() => {
						const result_2926 = defines.haxe;
						if (result_2926 != null) { return result_2926 };
						return true;
					})();
					files.unshift(path.resolve(__dirname + '/library/haxe/haxe.hexa'));
				}
			} break;
			};
		};
	function availableGenerators(name_2927) {
			const temp_2928 = name_2927;
			switch (temp_2928) {
			case 'js': {
				return 'JavaScript'
			} break;
			
			case 'native': {
				return 'Native'
			} break;
			
			case 'haxe': {
				return 'Haxe'
			} break;
			
			default: 
			return null
			};
		};
	var version = '0.0.1'
	{
		{
			new Main();
		}
	}
})();
